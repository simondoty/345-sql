// Autogenerated AST node
package org.python.antlr.ast;
import org.antlr.runtime.CommonToken;
import org.antlr.runtime.Token;
import org.python.antlr.AST;
import org.python.antlr.PythonTree;
import org.python.antlr.adapter.AstAdapters;
import org.python.antlr.base.excepthandler;
import org.python.antlr.base.expr;
import org.python.antlr.base.mod;
import org.python.antlr.base.slice;
import org.python.antlr.base.stmt;
import org.python.core.ArgParser;
import org.python.core.AstList;
import org.python.core.Py;
import org.python.core.PyObject;
import org.python.core.PyString;
import org.python.core.PyType;
import org.python.expose.ExposedGet;
import org.python.expose.ExposedMethod;
import org.python.expose.ExposedNew;
import org.python.expose.ExposedSet;
import org.python.expose.ExposedType;
import java.io.DataOutputStream;
import java.io.IOException;
import java.util.ArrayList;

@ExposedType(name = "_ast.Connection", base = AST.class)
public class Connection extends expr implements Context {
public static final PyType TYPE = PyType.fromClass(Connection.class);
//added to distinguish if need to process sql
//will change to null after processed stmt so wont try to process again

private Object url=null;
private Object uname=null;
private Object pword=null;
private Object ctype=null;

public Object getInternalURL() {
	return url;
}

public Object getInternaluname() {
	return uname;
}

public Object getInternalpword() {
	return pword;
}

public Object getInternalctype() {
	return ctype;
}

@ExposedGet(name = "url")
public PyObject getURL() {
	return (PyObject)url;
}
@ExposedSet(name = "url")
public void setURL(PyObject url) {
	this.url = AstAdapters.py2string(url);
}

@ExposedGet(name = "uname")
public PyObject getuname() {
	return (PyObject)uname;
}
@ExposedSet(name = "uname")
public void setuname(PyObject uname) {
	this.uname = AstAdapters.py2string(uname);
}

@ExposedGet(name = "pword")
public PyObject getpword() {
	return (PyObject)pword;
}
@ExposedSet(name = "pword")
public void setpword(PyObject pword) {
	this.pword = AstAdapters.py2string(pword);
}
@ExposedGet(name = "ctype")
public PyObject getctype() {
	return (PyObject)ctype;
}
@ExposedSet(name = "ctype")
public void setctype(PyObject ctype) {
	this.ctype = AstAdapters.py2string(ctype);
}
//end add object, more methods below 
    private java.util.List<expr> elts;
    public java.util.List<expr> getInternalElts() {
        return elts;
    }
    @ExposedGet(name = "elts")
    public PyObject getElts() {
        return new AstList(elts, AstAdapters.exprAdapter);
    }
    @ExposedSet(name = "elts")
    public void setElts(PyObject elts) {
        this.elts = AstAdapters.py2exprList(elts);
    }

    private expr_contextType ctx;
    public expr_contextType getInternalCtx() {
        return ctx;
    }
    @ExposedGet(name = "ctx")
    public PyObject getCtx() {
        return AstAdapters.expr_context2py(ctx);
    }
    @ExposedSet(name = "ctx")
    public void setCtx(PyObject ctx) {
        this.ctx = AstAdapters.py2expr_context(ctx);
    }


    private final static PyString[] fields =
    new PyString[] {new PyString("elts"), new PyString("ctx")};
    @ExposedGet(name = "_fields")
    public PyString[] get_fields() { return fields; }

    private final static PyString[] attributes =
    new PyString[] {new PyString("lineno"), new PyString("col_offset")};
    @ExposedGet(name = "_attributes")
    public PyString[] get_attributes() { return attributes; }

    public Connection(PyType subType) {
        super(subType);
    }
    public Connection() {
        this(TYPE);
    }

	public Connection(PyObject... elements) {
        this(TYPE, elements);
    }
	
	public Connection(PyType subtype, PyObject[] elements) {
        super(subtype);
    }
    @ExposedNew
    @ExposedMethod
    public void Connection___init__(PyObject[] args, String[] keywords) {
        ArgParser ap = new ArgParser("Connection", args, keywords, new String[]
            {"elts", "ctx", "lineno", "col_offset"}, 2, true);
        setElts(ap.getPyObject(0, Py.None));
        setCtx(ap.getPyObject(1, Py.None));
        int lin = ap.getInt(2, -1);
        if (lin != -1) {
            setLineno(lin);
        }
		
        int col = ap.getInt(3, -1);
        if (col != -1) {
            setLineno(col);
        }
	}
  //used to only for SQl stuff
  public Connection(PyObject[] ctx, String url, String uname, String pword, String ctype) {
	super(TYPE);
	this.url=url;
		this.uname=uname;
		this.pword=pword;
		this.ctype=ctype;
		//continue as before
	}

 public Connection(Token token, java.util.List<expr> elts, expr_contextType ctx, String url, String uname, String pword, String ctype) {
	super(token);
		this.url=url;
		this.uname=uname;
		this.pword=pword;
		this.ctype=ctype;
		//continue as before
		this.elts = elts;
		if (elts == null) {
			this.elts = new ArrayList<expr>();
		}
		for(PythonTree t : this.elts) {
			addChild(t);
		}
		this.ctx = ctx;
	}

	
	public Connection(Integer ttype, Token token, java.util.List<expr> elts, expr_contextType ctx, String url, String uname, String pword, String ctype) {
		super(ttype, token);
		this.url=url;
		this.uname=uname;
		this.pword=pword;
		this.ctype=ctype;
		//continue as before
		this.elts = elts;
		if (elts == null) {
			this.elts = new ArrayList<expr>();
		}
		for(PythonTree t : this.elts) {
			addChild(t);
		}
		this.ctx = ctx;
	}
	//end SQl stuff

    @ExposedGet(name = "repr")
    public String toString() {
        return "Connection";
    }

    public <R> R accept(VisitorIF<R> visitor) throws Exception {
        return visitor.visitConnection(this);
    }

    public void traverse(VisitorIF<?> visitor) throws Exception {
        if (elts != null) {
            for (PythonTree t : elts) {
                if (t != null)
                    t.accept(visitor);
            }
        }
    }

    public void setContext(expr_contextType c) {
        this.ctx = c;
    }
	
    private int lineno = -1;
    @ExposedGet(name = "lineno")
    public int getLineno() {
        if (lineno != -1) {
            return lineno;
        }
        return getLine();
    }

    @ExposedSet(name = "lineno")
    public void setLineno(int num) {
        lineno = num;
    }

    private int col_offset = -1;
    @ExposedGet(name = "col_offset")
    public int getCol_offset() {
        if (col_offset != -1) {
            return col_offset;
        }
        return getCharPositionInLine();
    }

    @ExposedSet(name = "col_offset")
    public void setCol_offset(int num) {
        col_offset = num;
    }

}
