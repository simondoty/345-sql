// $ANTLR 3.1.3 Mar 17, 2009 19:23:44 /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g 2012-11-25 11:48:34

package org.python.antlr;

import org.antlr.runtime.CommonToken;

import org.python.antlr.ParseException;
import org.python.antlr.PythonTree;
import org.python.antlr.ast.alias;
import org.python.antlr.ast.arguments;
import org.python.antlr.ast.Assert;
import org.python.antlr.ast.Assign;
import org.python.antlr.ast.Attribute;
import org.python.antlr.ast.AugAssign;
import org.python.antlr.ast.BinOp;
import org.python.antlr.ast.BoolOp;
import org.python.antlr.ast.boolopType;
import org.python.antlr.ast.Break;
import org.python.antlr.ast.Call;
import org.python.antlr.ast.ClassDef;
import org.python.antlr.ast.cmpopType;
import org.python.antlr.ast.Compare;
import org.python.antlr.ast.comprehension;
import org.python.antlr.ast.Context;
import org.python.antlr.ast.Continue;
import org.python.antlr.ast.Delete;
import org.python.antlr.ast.Dict;
import org.python.antlr.ast.Ellipsis;
import org.python.antlr.ast.ErrorMod;
import org.python.antlr.ast.ExceptHandler;
import org.python.antlr.ast.Exec;
import org.python.antlr.ast.Expr;
import org.python.antlr.ast.Expression;
import org.python.antlr.ast.expr_contextType;
import org.python.antlr.ast.ExtSlice;
import org.python.antlr.ast.For;
import org.python.antlr.ast.GeneratorExp;
import org.python.antlr.ast.Global;
import org.python.antlr.ast.If;
import org.python.antlr.ast.IfExp;
import org.python.antlr.ast.Import;
import org.python.antlr.ast.ImportFrom;
import org.python.antlr.ast.Index;
import org.python.antlr.ast.Interactive;
import org.python.antlr.ast.keyword;
import org.python.antlr.ast.ListComp;
import org.python.antlr.ast.Lambda;
import org.python.antlr.ast.Module;
import org.python.antlr.ast.Name;
import org.python.antlr.ast.Num;
import org.python.antlr.ast.operatorType;
import org.python.antlr.ast.Pass;
import org.python.antlr.ast.Print;
import org.python.antlr.ast.Raise;
import org.python.antlr.ast.Repr;
import org.python.antlr.ast.Return;
import org.python.antlr.ast.Slice;
import org.python.antlr.ast.Str;
import org.python.antlr.ast.Subscript;
import org.python.antlr.ast.TryExcept;
import org.python.antlr.ast.TryFinally;
import org.python.antlr.ast.Tuple;
import org.python.antlr.ast.unaryopType;
import org.python.antlr.ast.UnaryOp;
import org.python.antlr.ast.While;
import org.python.antlr.ast.With;
import org.python.antlr.ast.Yield;
import org.python.antlr.base.excepthandler;
import org.python.antlr.base.expr;
import org.python.antlr.base.mod;
import org.python.antlr.base.slice;
import org.python.antlr.base.stmt;
import org.python.core.Py;
import org.python.core.PyObject;
import org.python.core.PyString;
import org.python.core.PyUnicode;

import java.math.BigInteger;
import java.util.Collections;
import java.util.Iterator;
import java.util.ListIterator;

import java.util.LinkedList;
import org.python.antlr.ast.Connection;


import org.antlr.runtime.*;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.tree.*;

/** Python 2.3.3 Grammar
 *
 *  Terence Parr and Loring Craymer
 *  February 2004
 *
 *  Converted to ANTLR v3 November 2005 by Terence Parr.
 *
 *  This grammar was derived automatically from the Python 2.3.3
 *  parser grammar to get a syntactically correct ANTLR grammar
 *  for Python.  Then Terence hand tweaked it to be semantically
 *  correct; i.e., removed lookahead issues etc...  It is LL(1)
 *  except for the (sometimes optional) trailing commas and semi-colons.
 *  It needs two symbols of lookahead in this case.
 *
 *  Starting with Loring's preliminary lexer for Python, I modified it
 *  to do my version of the whole nasty INDENT/DEDENT issue just so I
 *  could understand the problem better.  This grammar requires
 *  PythonTokenStream.java to work.  Also I used some rules from the
 *  semi-formal grammar on the web for Python (automatically
 *  translated to ANTLR format by an ANTLR grammar, naturally <grin>).
 *  The lexical rules for python are particularly nasty and it took me
 *  a long time to get it 'right'; i.e., think about it in the proper
 *  way.  Resist changing the lexer unless you've used ANTLR a lot. ;)
 *
 *  I (Terence) tested this by running it on the jython-2.1/Lib
 *  directory of 40k lines of Python.
 *
 *  REQUIRES ANTLR v3
 *
 *
 *  Updated the original parser for Python 2.5 features. The parser has been
 *  altered to produce an AST - the AST work started from tne newcompiler
 *  grammar from Jim Baker.  The current parsing and compiling strategy looks
 *  like this:
 *
 *  Python source->Python.g->AST (org/python/parser/ast/*)->CodeCompiler(ASM)->.class
 */
public class PythonParser extends Parser {
    public static final String[] tokenNames = new String[] {
        "<invalid>", "<EOR>", "<DOWN>", "<UP>", "INDENT", "DEDENT", "TRAILBACKSLASH", "NEWLINE", "LEADING_WS", "NAME", "DOT", "AND", "AS", "ASSERT", "BREAK", "CLASS", "CONTINUE", "DEF", "DELETE", "ELIF", "EXCEPT", "EXEC", "FINALLY", "FROM", "FOR", "GLOBAL", "IF", "IMPORT", "IN", "IS", "LAMBDA", "NOT", "OR", "ORELSE", "PASS", "PRINT", "RAISE", "RETURN", "TRY", "WHILE", "WITH", "YIELD", "AT", "LPAREN", "RPAREN", "COLON", "ASSIGN", "COMMA", "STAR", "DOUBLESTAR", "SEMI", "PLUSEQUAL", "MINUSEQUAL", "STAREQUAL", "SLASHEQUAL", "PERCENTEQUAL", "AMPEREQUAL", "VBAREQUAL", "CIRCUMFLEXEQUAL", "LEFTSHIFTEQUAL", "RIGHTSHIFTEQUAL", "DOUBLESTAREQUAL", "DOUBLESLASHEQUAL", "RIGHTSHIFT", "LESS", "GREATER", "EQUAL", "GREATEREQUAL", "LESSEQUAL", "ALT_NOTEQUAL", "NOTEQUAL", "VBAR", "CIRCUMFLEX", "AMPER", "LEFTSHIFT", "PLUS", "MINUS", "SLASH", "PERCENT", "DOUBLESLASH", "TILDE", "LBRACK", "RBRACK", "LCURLY", "RCURLY", "BACKQUOTE", "INT", "LONGINT", "FLOAT", "COMPLEX", "STRING", "PRO", "PRLO", "ASPPRINTDB", "PRQO", "PRIO", "PRSO", "PRO_SELECT", "PRIMP", "DIGITS", "CLEAR", "ASP", "ASPBLANKQ", "ASP_SELECT", "REG_FACT", "GROUP_FACT", "ASP_PATH", "ASPLC", "ASPDOTDOT", "SOLVER", "SELECT", "INSERT", "CREATE", "DROP", "UPDATE", "SQL_DELETE", "ALTER", "MAKECONNECT", "ASPSELECT", "RDFSELECT", "URLLINK", "UNAME", "PWORD", "CONTYPE", "CAPSAS", "AGGREG", "CAPSFROM", "JOIN", "ON", "ORDER", "BY", "ASCEND", "DESCEND", "INTO", "VALUES", "TABLE", "SQL_SET", "CASCADE", "CONSTRAINTS", "PURGE", "VIEW", "INDEX", "FORCE", "FUNCTION", "OPERATOR", "PROCEDURE", "TRIGGER", "TYPE", "VALIDATE", "INTTYPE", "FLOATTYPE", "CHARTYPE", "DATETYPE", "SORT", "DEFAULT", "WHERE", "CAPSAND", "CAPSOR", "MODIFY", "CAPSCLASS", "SUBCLASS", "RETRIEVE", "OF", "REQD", "INITVAL", "SV", "MV", "INVERSE", "CAPSIS", "DISTINCT", "MAXVAL", "LIMIT", "INCLUDE", "CAPSWITH", "CTYPE", "NULLS", "FIRST", "LAST", "URL", "LUNBAR", "RUNBAR", "Exponent", "TRIAPOS", "TRIQUOTE", "ESC", "COMMENT", "CONTINUED_LINE", "WS", "'TOP'", "'INTEGERDATA'", "'STRINGDATA'", "'BOOLEANDATA'"
    };
    public static final int FUNCTION=143;
    public static final int BACKQUOTE=85;
    public static final int SLASHEQUAL=54;
    public static final int STAR=48;
    public static final int CIRCUMFLEXEQUAL=58;
    public static final int GROUP_FACT=105;
    public static final int CAPSIS=168;
    public static final int COMPLEX=89;
    public static final int NOT=31;
    public static final int EXCEPT=20;
    public static final int EOF=-1;
    public static final int TYPE=147;
    public static final int LEADING_WS=8;
    public static final int CLEAR=100;
    public static final int VBAR=71;
    public static final int MINUSEQUAL=52;
    public static final int RPAREN=44;
    public static final int IMPORT=27;
    public static final int CREATE=112;
    public static final int URLLINK=120;
    public static final int INCLUDE=172;
    public static final int RETURN=37;
    public static final int PRIMP=98;
    public static final int RBRACK=82;
    public static final int ASP=101;
    public static final int CHARTYPE=151;
    public static final int PRIO=95;
    public static final int LCURLY=83;
    public static final int INT=86;
    public static final int RIGHTSHIFT=63;
    public static final int REQD=163;
    public static final int MAXVAL=170;
    public static final int DOUBLESLASHEQUAL=62;
    public static final int RUNBAR=180;
    public static final int SQL_DELETE=115;
    public static final int WS=187;
    public static final int MAKECONNECT=117;
    public static final int INITVAL=164;
    public static final int VBAREQUAL=57;
    public static final int INTTYPE=149;
    public static final int MODIFY=158;
    public static final int ALTER=116;
    public static final int CONTINUED_LINE=186;
    public static final int LBRACK=81;
    public static final int FORCE=142;
    public static final int DOUBLESTAR=49;
    public static final int CTYPE=174;
    public static final int REG_FACT=104;
    public static final int TABLE=135;
    public static final int FLOAT=88;
    public static final int CAPSCLASS=159;
    public static final int RIGHTSHIFTEQUAL=60;
    public static final int LPAREN=43;
    public static final int INDENT=4;
    public static final int AT=42;
    public static final int AS=12;
    public static final int SLASH=77;
    public static final int CONTYPE=123;
    public static final int ASPDOTDOT=108;
    public static final int YIELD=41;
    public static final int PLUS=75;
    public static final int LAMBDA=30;
    public static final int CAPSAND=156;
    public static final int BY=130;
    public static final int CAPSWITH=173;
    public static final int SV=165;
    public static final int SORT=153;
    public static final int EXEC=21;
    public static final int MINUS=76;
    public static final int SEMI=50;
    public static final int PRINT=35;
    public static final int COLON=45;
    public static final int NULLS=175;
    public static final int AMPEREQUAL=56;
    public static final int DROP=113;
    public static final int VALIDATE=148;
    public static final int RCURLY=84;
    public static final int RDFSELECT=119;
    public static final int STAREQUAL=53;
    public static final int DESCEND=132;
    public static final int CIRCUMFLEX=72;
    public static final int STRING=90;
    public static final int FIRST=176;
    public static final int ALT_NOTEQUAL=69;
    public static final int CAPSAS=124;
    public static final int WHILE=39;
    public static final int DATETYPE=152;
    public static final int TRIAPOS=182;
    public static final int TRIGGER=146;
    public static final int ORELSE=33;
    public static final int GREATEREQUAL=67;
    public static final int CASCADE=137;
    public static final int BREAK=14;
    public static final int PASS=34;
    public static final int NOTEQUAL=70;
    public static final int MV=166;
    public static final int NAME=9;
    public static final int CAPSFROM=126;
    public static final int GREATER=65;
    public static final int INSERT=111;
    public static final int FLOATTYPE=150;
    public static final int AGGREG=125;
    public static final int DOUBLESTAREQUAL=61;
    public static final int PRSO=96;
    public static final int LESS=64;
    public static final int RAISE=36;
    public static final int ASPSELECT=118;
    public static final int LAST=177;
    public static final int COMMENT=185;
    public static final int SELECT=110;
    public static final int SQL_SET=136;
    public static final int INTO=133;
    public static final int ASPBLANKQ=102;
    public static final int VIEW=140;
    public static final int PWORD=122;
    public static final int ON=128;
    public static final int DELETE=18;
    public static final int LUNBAR=179;
    public static final int PRQO=94;
    public static final int OF=162;
    public static final int ASSERT=13;
    public static final int ASPLC=107;
    public static final int TRY=38;
    public static final int URL=178;
    public static final int ELIF=19;
    public static final int INVERSE=167;
    public static final int OR=32;
    public static final int LONGINT=87;
    public static final int PRO_SELECT=97;
    public static final int FROM=23;
    public static final int LESSEQUAL=68;
    public static final int PERCENTEQUAL=55;
    public static final int DISTINCT=169;
    public static final int DOUBLESLASH=79;
    public static final int ASPPRINTDB=93;
    public static final int CONSTRAINTS=138;
    public static final int WHERE=155;
    public static final int CLASS=15;
    public static final int DEF=17;
    public static final int ORDER=129;
    public static final int LIMIT=171;
    public static final int ESC=184;
    public static final int DIGITS=99;
    public static final int UPDATE=114;
    public static final int FOR=24;
    public static final int Exponent=181;
    public static final int DEDENT=5;
    public static final int AND=11;
    public static final int PRO=91;
    public static final int ASP_PATH=106;
    public static final int PLUSEQUAL=51;
    public static final int IF=26;
    public static final int RETRIEVE=161;
    public static final int INDEX=141;
    public static final int IN=28;
    public static final int CONTINUE=16;
    public static final int COMMA=47;
    public static final int T__191=191;
    public static final int IS=29;
    public static final int AMPER=73;
    public static final int T__190=190;
    public static final int EQUAL=66;
    public static final int CAPSOR=157;
    public static final int TILDE=80;
    public static final int LEFTSHIFTEQUAL=59;
    public static final int LEFTSHIFT=74;
    public static final int DOT=10;
    public static final int WITH=40;
    public static final int UNAME=121;
    public static final int T__188=188;
    public static final int PERCENT=78;
    public static final int T__189=189;
    public static final int OPERATOR=144;
    public static final int DEFAULT=154;
    public static final int VALUES=134;
    public static final int SUBCLASS=160;
    public static final int PURGE=139;
    public static final int JOIN=127;
    public static final int PROCEDURE=145;
    public static final int TRIQUOTE=183;
    public static final int TRAILBACKSLASH=6;
    public static final int NEWLINE=7;
    public static final int FINALLY=22;
    public static final int ASCEND=131;
    public static final int ASSIGN=46;
    public static final int SOLVER=109;
    public static final int ASP_SELECT=103;
    public static final int GLOBAL=25;
    public static final int PRLO=92;

    // delegates
    // delegators

    protected static class connection_scope {
        String url;
        String uname;
        String pword;
        String contype;
    }
    protected Stack connection_stack = new Stack();


        public PythonParser(TokenStream input) {
            this(input, new RecognizerSharedState());
        }
        public PythonParser(TokenStream input, RecognizerSharedState state) {
            super(input, state);
             
        }
        
    protected TreeAdaptor adaptor = new CommonTreeAdaptor();

    public void setTreeAdaptor(TreeAdaptor adaptor) {
        this.adaptor = adaptor;
    }
    public TreeAdaptor getTreeAdaptor() {
        return adaptor;
    }

    public String[] getTokenNames() { return PythonParser.tokenNames; }
    public String getGrammarFileName() { return "/v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g"; }


        private ErrorHandler errorHandler;

        private GrammarActions actions = new GrammarActions();

        private String encoding;

        public void setErrorHandler(ErrorHandler eh) {
            this.errorHandler = eh;
            actions.setErrorHandler(eh);
        }

        protected Object recoverFromMismatchedToken(IntStream input, int ttype, BitSet follow)
            throws RecognitionException {

            Object o = errorHandler.recoverFromMismatchedToken(this, input, ttype, follow);
            if (o != null) {
                return o;
            }
            return super.recoverFromMismatchedToken(input, ttype, follow);
        }

        public PythonParser(TokenStream input, String encoding) {
            this(input);
            this.encoding = encoding;
        }



    public static class single_input_return extends ParserRuleReturnScope {
        PythonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "single_input"
    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:282:1: single_input : ( ( NEWLINE )* EOF | simple_stmt ( NEWLINE )* EOF | compound_stmt ( NEWLINE )+ EOF );
    public final PythonParser.single_input_return single_input() throws RecognitionException {
        PythonParser.single_input_return retval = new PythonParser.single_input_return();
        retval.start = input.LT(1);

        PythonTree root_0 = null;

        Token NEWLINE1=null;
        Token EOF2=null;
        Token NEWLINE4=null;
        Token EOF5=null;
        Token NEWLINE7=null;
        Token EOF8=null;
        PythonParser.simple_stmt_return simple_stmt3 = null;

        PythonParser.compound_stmt_return compound_stmt6 = null;


        PythonTree NEWLINE1_tree=null;
        PythonTree EOF2_tree=null;
        PythonTree NEWLINE4_tree=null;
        PythonTree EOF5_tree=null;
        PythonTree NEWLINE7_tree=null;
        PythonTree EOF8_tree=null;


            mod mtype = null;

        try {
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:289:5: ( ( NEWLINE )* EOF | simple_stmt ( NEWLINE )* EOF | compound_stmt ( NEWLINE )+ EOF )
            int alt4=3;
            switch ( input.LA(1) ) {
            case EOF:
            case NEWLINE:
                {
                alt4=1;
                }
                break;
            case NAME:
            case ASSERT:
            case BREAK:
            case CONTINUE:
            case DELETE:
            case EXEC:
            case FROM:
            case GLOBAL:
            case IMPORT:
            case LAMBDA:
            case NOT:
            case PASS:
            case PRINT:
            case RAISE:
            case RETURN:
            case YIELD:
            case LPAREN:
            case PLUS:
            case MINUS:
            case TILDE:
            case LBRACK:
            case LCURLY:
            case BACKQUOTE:
            case INT:
            case LONGINT:
            case FLOAT:
            case COMPLEX:
            case STRING:
            case PRO:
            case PRO_SELECT:
            case ASP:
            case ASP_SELECT:
            case ASP_PATH:
            case SELECT:
            case INSERT:
            case CREATE:
            case DROP:
            case UPDATE:
            case SQL_DELETE:
            case ALTER:
            case MAKECONNECT:
            case ASPSELECT:
            case RDFSELECT:
            case CAPSFROM:
            case MODIFY:
            case CAPSCLASS:
            case SUBCLASS:
                {
                alt4=2;
                }
                break;
            case CLASS:
            case DEF:
            case FOR:
            case IF:
            case TRY:
            case WHILE:
            case WITH:
            case AT:
                {
                alt4=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 4, 0, input);

                throw nvae;
            }

            switch (alt4) {
                case 1 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:289:7: ( NEWLINE )* EOF
                    {
                    root_0 = (PythonTree)adaptor.nil();

                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:289:7: ( NEWLINE )*
                    loop1:
                    do {
                        int alt1=2;
                        int LA1_0 = input.LA(1);

                        if ( (LA1_0==NEWLINE) ) {
                            alt1=1;
                        }


                        switch (alt1) {
                    	case 1 :
                    	    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:289:7: NEWLINE
                    	    {
                    	    NEWLINE1=(Token)match(input,NEWLINE,FOLLOW_NEWLINE_in_single_input123); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    NEWLINE1_tree = (PythonTree)adaptor.create(NEWLINE1);
                    	    adaptor.addChild(root_0, NEWLINE1_tree);
                    	    }

                    	    }
                    	    break;

                    	default :
                    	    break loop1;
                        }
                    } while (true);

                    EOF2=(Token)match(input,EOF,FOLLOW_EOF_in_single_input126); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    EOF2_tree = (PythonTree)adaptor.create(EOF2);
                    adaptor.addChild(root_0, EOF2_tree);
                    }
                    if ( state.backtracking==0 ) {

                              mtype = new Interactive(((Token)retval.start), new ArrayList<stmt>());
                            
                    }

                    }
                    break;
                case 2 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:293:7: simple_stmt ( NEWLINE )* EOF
                    {
                    root_0 = (PythonTree)adaptor.nil();

                    pushFollow(FOLLOW_simple_stmt_in_single_input142);
                    simple_stmt3=simple_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, simple_stmt3.getTree());
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:293:19: ( NEWLINE )*
                    loop2:
                    do {
                        int alt2=2;
                        int LA2_0 = input.LA(1);

                        if ( (LA2_0==NEWLINE) ) {
                            alt2=1;
                        }


                        switch (alt2) {
                    	case 1 :
                    	    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:293:19: NEWLINE
                    	    {
                    	    NEWLINE4=(Token)match(input,NEWLINE,FOLLOW_NEWLINE_in_single_input144); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    NEWLINE4_tree = (PythonTree)adaptor.create(NEWLINE4);
                    	    adaptor.addChild(root_0, NEWLINE4_tree);
                    	    }

                    	    }
                    	    break;

                    	default :
                    	    break loop2;
                        }
                    } while (true);

                    EOF5=(Token)match(input,EOF,FOLLOW_EOF_in_single_input147); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    EOF5_tree = (PythonTree)adaptor.create(EOF5);
                    adaptor.addChild(root_0, EOF5_tree);
                    }
                    if ( state.backtracking==0 ) {

                              mtype = new Interactive(((Token)retval.start), actions.castStmts((simple_stmt3!=null?simple_stmt3.stypes:null)));
                            
                    }

                    }
                    break;
                case 3 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:297:7: compound_stmt ( NEWLINE )+ EOF
                    {
                    root_0 = (PythonTree)adaptor.nil();

                    pushFollow(FOLLOW_compound_stmt_in_single_input163);
                    compound_stmt6=compound_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, compound_stmt6.getTree());
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:297:21: ( NEWLINE )+
                    int cnt3=0;
                    loop3:
                    do {
                        int alt3=2;
                        int LA3_0 = input.LA(1);

                        if ( (LA3_0==NEWLINE) ) {
                            alt3=1;
                        }


                        switch (alt3) {
                    	case 1 :
                    	    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:297:21: NEWLINE
                    	    {
                    	    NEWLINE7=(Token)match(input,NEWLINE,FOLLOW_NEWLINE_in_single_input165); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    NEWLINE7_tree = (PythonTree)adaptor.create(NEWLINE7);
                    	    adaptor.addChild(root_0, NEWLINE7_tree);
                    	    }

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt3 >= 1 ) break loop3;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(3, input);
                                throw eee;
                        }
                        cnt3++;
                    } while (true);

                    EOF8=(Token)match(input,EOF,FOLLOW_EOF_in_single_input168); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    EOF8_tree = (PythonTree)adaptor.create(EOF8);
                    adaptor.addChild(root_0, EOF8_tree);
                    }
                    if ( state.backtracking==0 ) {

                              mtype = new Interactive(((Token)retval.start), actions.castStmts((compound_stmt6!=null?((PythonTree)compound_stmt6.tree):null)));
                            
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (PythonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {

                  retval.tree = mtype;

            }
        }
        catch (RecognitionException re) {

                    errorHandler.reportError(this, re);
                    errorHandler.recover(this, input,re);
                    PythonTree badNode = (PythonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
                    retval.tree = new ErrorMod(badNode);
                
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "single_input"

    public static class file_input_return extends ParserRuleReturnScope {
        PythonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "file_input"
    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:311:1: file_input : ( NEWLINE | stmt )* EOF ;
    public final PythonParser.file_input_return file_input() throws RecognitionException {
        PythonParser.file_input_return retval = new PythonParser.file_input_return();
        retval.start = input.LT(1);

        PythonTree root_0 = null;

        Token NEWLINE9=null;
        Token EOF11=null;
        PythonParser.stmt_return stmt10 = null;


        PythonTree NEWLINE9_tree=null;
        PythonTree EOF11_tree=null;


            mod mtype = null;
            List stypes = new ArrayList();

        try {
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:329:5: ( ( NEWLINE | stmt )* EOF )
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:329:7: ( NEWLINE | stmt )* EOF
            {
            root_0 = (PythonTree)adaptor.nil();

            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:329:7: ( NEWLINE | stmt )*
            loop5:
            do {
                int alt5=3;
                int LA5_0 = input.LA(1);

                if ( (LA5_0==NEWLINE) ) {
                    alt5=1;
                }
                else if ( (LA5_0==NAME||(LA5_0>=ASSERT && LA5_0<=DELETE)||LA5_0==EXEC||(LA5_0>=FROM && LA5_0<=IMPORT)||(LA5_0>=LAMBDA && LA5_0<=NOT)||(LA5_0>=PASS && LA5_0<=LPAREN)||(LA5_0>=PLUS && LA5_0<=MINUS)||(LA5_0>=TILDE && LA5_0<=LBRACK)||LA5_0==LCURLY||(LA5_0>=BACKQUOTE && LA5_0<=PRO)||LA5_0==PRO_SELECT||LA5_0==ASP||LA5_0==ASP_SELECT||LA5_0==ASP_PATH||(LA5_0>=SELECT && LA5_0<=RDFSELECT)||LA5_0==CAPSFROM||(LA5_0>=MODIFY && LA5_0<=SUBCLASS)) ) {
                    alt5=2;
                }


                switch (alt5) {
            	case 1 :
            	    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:329:8: NEWLINE
            	    {
            	    NEWLINE9=(Token)match(input,NEWLINE,FOLLOW_NEWLINE_in_file_input220); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    NEWLINE9_tree = (PythonTree)adaptor.create(NEWLINE9);
            	    adaptor.addChild(root_0, NEWLINE9_tree);
            	    }

            	    }
            	    break;
            	case 2 :
            	    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:330:9: stmt
            	    {
            	    pushFollow(FOLLOW_stmt_in_file_input230);
            	    stmt10=stmt();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, stmt10.getTree());
            	    if ( state.backtracking==0 ) {

            	                if ((stmt10!=null?stmt10.stypes:null) != null) {
            	                    stypes.addAll((stmt10!=null?stmt10.stypes:null));
            	                }
            	            
            	    }

            	    }
            	    break;

            	default :
            	    break loop5;
                }
            } while (true);

            EOF11=(Token)match(input,EOF,FOLLOW_EOF_in_file_input249); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            EOF11_tree = (PythonTree)adaptor.create(EOF11);
            adaptor.addChild(root_0, EOF11_tree);
            }
            if ( state.backtracking==0 ) {

                           mtype = new Module(((Token)retval.start), actions.castStmts(stypes));
                       
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (PythonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {

                  if (!stypes.isEmpty()) {
                      //The EOF token messes up the end offsets, so set them manually.
                      //XXX: this may no longer be true now that PythonTokenSource is
                      //     adjusting EOF offsets -- but needs testing before I remove
                      //     this.
                      PythonTree stop = (PythonTree)stypes.get(stypes.size() -1);
                      mtype.setCharStopIndex(stop.getCharStopIndex());
                      mtype.setTokenStopIndex(stop.getTokenStopIndex());
                  }

                  retval.tree = mtype;

            }
        }
        catch (RecognitionException re) {

                    errorHandler.reportError(this, re);
                    errorHandler.recover(this, input,re);
                    PythonTree badNode = (PythonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
                    retval.tree = new ErrorMod(badNode);
                
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "file_input"

    public static class eval_input_return extends ParserRuleReturnScope {
        PythonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "eval_input"
    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:350:1: eval_input : ( LEADING_WS )? ( NEWLINE )* testlist[expr_contextType.Load] ( NEWLINE )* EOF ;
    public final PythonParser.eval_input_return eval_input() throws RecognitionException {
        PythonParser.eval_input_return retval = new PythonParser.eval_input_return();
        retval.start = input.LT(1);

        PythonTree root_0 = null;

        Token LEADING_WS12=null;
        Token NEWLINE13=null;
        Token NEWLINE15=null;
        Token EOF16=null;
        PythonParser.testlist_return testlist14 = null;


        PythonTree LEADING_WS12_tree=null;
        PythonTree NEWLINE13_tree=null;
        PythonTree NEWLINE15_tree=null;
        PythonTree EOF16_tree=null;


            mod mtype = null;

        try {
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:357:5: ( ( LEADING_WS )? ( NEWLINE )* testlist[expr_contextType.Load] ( NEWLINE )* EOF )
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:357:7: ( LEADING_WS )? ( NEWLINE )* testlist[expr_contextType.Load] ( NEWLINE )* EOF
            {
            root_0 = (PythonTree)adaptor.nil();

            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:357:7: ( LEADING_WS )?
            int alt6=2;
            int LA6_0 = input.LA(1);

            if ( (LA6_0==LEADING_WS) ) {
                alt6=1;
            }
            switch (alt6) {
                case 1 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:357:7: LEADING_WS
                    {
                    LEADING_WS12=(Token)match(input,LEADING_WS,FOLLOW_LEADING_WS_in_eval_input303); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LEADING_WS12_tree = (PythonTree)adaptor.create(LEADING_WS12);
                    adaptor.addChild(root_0, LEADING_WS12_tree);
                    }

                    }
                    break;

            }

            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:357:19: ( NEWLINE )*
            loop7:
            do {
                int alt7=2;
                int LA7_0 = input.LA(1);

                if ( (LA7_0==NEWLINE) ) {
                    alt7=1;
                }


                switch (alt7) {
            	case 1 :
            	    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:357:20: NEWLINE
            	    {
            	    NEWLINE13=(Token)match(input,NEWLINE,FOLLOW_NEWLINE_in_eval_input307); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    NEWLINE13_tree = (PythonTree)adaptor.create(NEWLINE13);
            	    adaptor.addChild(root_0, NEWLINE13_tree);
            	    }

            	    }
            	    break;

            	default :
            	    break loop7;
                }
            } while (true);

            pushFollow(FOLLOW_testlist_in_eval_input311);
            testlist14=testlist(expr_contextType.Load);

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, testlist14.getTree());
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:357:62: ( NEWLINE )*
            loop8:
            do {
                int alt8=2;
                int LA8_0 = input.LA(1);

                if ( (LA8_0==NEWLINE) ) {
                    alt8=1;
                }


                switch (alt8) {
            	case 1 :
            	    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:357:63: NEWLINE
            	    {
            	    NEWLINE15=(Token)match(input,NEWLINE,FOLLOW_NEWLINE_in_eval_input315); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    NEWLINE15_tree = (PythonTree)adaptor.create(NEWLINE15);
            	    adaptor.addChild(root_0, NEWLINE15_tree);
            	    }

            	    }
            	    break;

            	default :
            	    break loop8;
                }
            } while (true);

            EOF16=(Token)match(input,EOF,FOLLOW_EOF_in_eval_input319); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            EOF16_tree = (PythonTree)adaptor.create(EOF16);
            adaptor.addChild(root_0, EOF16_tree);
            }
            if ( state.backtracking==0 ) {

                      mtype = new Expression(((Token)retval.start), actions.castExpr((testlist14!=null?((PythonTree)testlist14.tree):null)));
                    
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (PythonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {

                  retval.tree = mtype;

            }
        }
        catch (RecognitionException re) {

                    errorHandler.reportError(this, re);
                    errorHandler.recover(this, input,re);
                    PythonTree badNode = (PythonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
                    retval.tree = new ErrorMod(badNode);
                
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "eval_input"

    public static class dotted_attr_return extends ParserRuleReturnScope {
        public expr etype;
        PythonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dotted_attr"
    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:372:1: dotted_attr returns [expr etype] : n1= NAME ( ( DOT n2+= NAME )+ | ) ;
    public final PythonParser.dotted_attr_return dotted_attr() throws RecognitionException {
        PythonParser.dotted_attr_return retval = new PythonParser.dotted_attr_return();
        retval.start = input.LT(1);

        PythonTree root_0 = null;

        Token n1=null;
        Token DOT17=null;
        Token n2=null;
        List list_n2=null;

        PythonTree n1_tree=null;
        PythonTree DOT17_tree=null;
        PythonTree n2_tree=null;

        try {
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:374:5: (n1= NAME ( ( DOT n2+= NAME )+ | ) )
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:374:7: n1= NAME ( ( DOT n2+= NAME )+ | )
            {
            root_0 = (PythonTree)adaptor.nil();

            n1=(Token)match(input,NAME,FOLLOW_NAME_in_dotted_attr371); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            n1_tree = (PythonTree)adaptor.create(n1);
            adaptor.addChild(root_0, n1_tree);
            }
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:375:7: ( ( DOT n2+= NAME )+ | )
            int alt10=2;
            int LA10_0 = input.LA(1);

            if ( (LA10_0==DOT) ) {
                alt10=1;
            }
            else if ( (LA10_0==NEWLINE||LA10_0==LPAREN) ) {
                alt10=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 10, 0, input);

                throw nvae;
            }
            switch (alt10) {
                case 1 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:375:9: ( DOT n2+= NAME )+
                    {
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:375:9: ( DOT n2+= NAME )+
                    int cnt9=0;
                    loop9:
                    do {
                        int alt9=2;
                        int LA9_0 = input.LA(1);

                        if ( (LA9_0==DOT) ) {
                            alt9=1;
                        }


                        switch (alt9) {
                    	case 1 :
                    	    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:375:10: DOT n2+= NAME
                    	    {
                    	    DOT17=(Token)match(input,DOT,FOLLOW_DOT_in_dotted_attr382); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    DOT17_tree = (PythonTree)adaptor.create(DOT17);
                    	    adaptor.addChild(root_0, DOT17_tree);
                    	    }
                    	    n2=(Token)match(input,NAME,FOLLOW_NAME_in_dotted_attr386); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    n2_tree = (PythonTree)adaptor.create(n2);
                    	    adaptor.addChild(root_0, n2_tree);
                    	    }
                    	    if (list_n2==null) list_n2=new ArrayList();
                    	    list_n2.add(n2);


                    	    }
                    	    break;

                    	default :
                    	    if ( cnt9 >= 1 ) break loop9;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(9, input);
                                throw eee;
                        }
                        cnt9++;
                    } while (true);

                    if ( state.backtracking==0 ) {

                                  retval.etype = actions.makeDottedAttr(n1, list_n2);
                              
                    }

                    }
                    break;
                case 2 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:380:9: 
                    {
                    if ( state.backtracking==0 ) {

                                  retval.etype = actions.makeNameNode(n1);
                              
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (PythonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException re) {
            errorHandler.reportError(this, re);
            errorHandler.recover(this, input,re);
            retval.tree = (PythonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "dotted_attr"

    public static class attr_return extends ParserRuleReturnScope {
        PythonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "attr"
    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:389:1: attr : ( NAME | AND | AS | ASSERT | BREAK | CLASS | CONTINUE | DEF | DELETE | ELIF | EXCEPT | EXEC | FINALLY | FROM | FOR | GLOBAL | IF | IMPORT | IN | IS | LAMBDA | NOT | OR | ORELSE | PASS | PRINT | RAISE | RETURN | TRY | WHILE | WITH | YIELD );
    public final PythonParser.attr_return attr() throws RecognitionException {
        PythonParser.attr_return retval = new PythonParser.attr_return();
        retval.start = input.LT(1);

        PythonTree root_0 = null;

        Token set18=null;

        PythonTree set18_tree=null;

        try {
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:390:5: ( NAME | AND | AS | ASSERT | BREAK | CLASS | CONTINUE | DEF | DELETE | ELIF | EXCEPT | EXEC | FINALLY | FROM | FOR | GLOBAL | IF | IMPORT | IN | IS | LAMBDA | NOT | OR | ORELSE | PASS | PRINT | RAISE | RETURN | TRY | WHILE | WITH | YIELD )
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:
            {
            root_0 = (PythonTree)adaptor.nil();

            set18=(Token)input.LT(1);
            if ( input.LA(1)==NAME||(input.LA(1)>=AND && input.LA(1)<=YIELD) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (PythonTree)adaptor.create(set18));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (PythonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException re) {
            errorHandler.reportError(this, re);
            errorHandler.recover(this, input,re);
            retval.tree = (PythonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "attr"

    public static class decorator_return extends ParserRuleReturnScope {
        public expr etype;
        PythonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "decorator"
    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:425:1: decorator returns [expr etype] : AT dotted_attr ( LPAREN ( arglist | ) RPAREN | ) NEWLINE ;
    public final PythonParser.decorator_return decorator() throws RecognitionException {
        PythonParser.decorator_return retval = new PythonParser.decorator_return();
        retval.start = input.LT(1);

        PythonTree root_0 = null;

        Token AT19=null;
        Token LPAREN21=null;
        Token RPAREN23=null;
        Token NEWLINE24=null;
        PythonParser.dotted_attr_return dotted_attr20 = null;

        PythonParser.arglist_return arglist22 = null;


        PythonTree AT19_tree=null;
        PythonTree LPAREN21_tree=null;
        PythonTree RPAREN23_tree=null;
        PythonTree NEWLINE24_tree=null;

        try {
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:430:5: ( AT dotted_attr ( LPAREN ( arglist | ) RPAREN | ) NEWLINE )
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:430:7: AT dotted_attr ( LPAREN ( arglist | ) RPAREN | ) NEWLINE
            {
            root_0 = (PythonTree)adaptor.nil();

            AT19=(Token)match(input,AT,FOLLOW_AT_in_decorator723); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            AT19_tree = (PythonTree)adaptor.create(AT19);
            adaptor.addChild(root_0, AT19_tree);
            }
            pushFollow(FOLLOW_dotted_attr_in_decorator725);
            dotted_attr20=dotted_attr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, dotted_attr20.getTree());
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:431:5: ( LPAREN ( arglist | ) RPAREN | )
            int alt12=2;
            int LA12_0 = input.LA(1);

            if ( (LA12_0==LPAREN) ) {
                alt12=1;
            }
            else if ( (LA12_0==NEWLINE) ) {
                alt12=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 12, 0, input);

                throw nvae;
            }
            switch (alt12) {
                case 1 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:431:7: LPAREN ( arglist | ) RPAREN
                    {
                    LPAREN21=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_decorator733); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LPAREN21_tree = (PythonTree)adaptor.create(LPAREN21);
                    adaptor.addChild(root_0, LPAREN21_tree);
                    }
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:432:7: ( arglist | )
                    int alt11=2;
                    int LA11_0 = input.LA(1);

                    if ( (LA11_0==NAME||(LA11_0>=LAMBDA && LA11_0<=NOT)||LA11_0==LPAREN||(LA11_0>=STAR && LA11_0<=DOUBLESTAR)||(LA11_0>=PLUS && LA11_0<=MINUS)||(LA11_0>=TILDE && LA11_0<=LBRACK)||LA11_0==LCURLY||(LA11_0>=BACKQUOTE && LA11_0<=PRO)||LA11_0==PRO_SELECT||LA11_0==ASP||LA11_0==ASP_SELECT||LA11_0==ASP_PATH||(LA11_0>=SELECT && LA11_0<=RDFSELECT)||LA11_0==CAPSFROM||(LA11_0>=MODIFY && LA11_0<=SUBCLASS)) ) {
                        alt11=1;
                    }
                    else if ( (LA11_0==RPAREN) ) {
                        alt11=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 11, 0, input);

                        throw nvae;
                    }
                    switch (alt11) {
                        case 1 :
                            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:432:9: arglist
                            {
                            pushFollow(FOLLOW_arglist_in_decorator743);
                            arglist22=arglist();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, arglist22.getTree());
                            if ( state.backtracking==0 ) {

                                          retval.etype = actions.makeCall(LPAREN21, (dotted_attr20!=null?dotted_attr20.etype:null), (arglist22!=null?arglist22.args:null), (arglist22!=null?arglist22.keywords:null),
                                                   (arglist22!=null?arglist22.starargs:null), (arglist22!=null?arglist22.kwargs:null));
                                      
                            }

                            }
                            break;
                        case 2 :
                            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:438:9: 
                            {
                            if ( state.backtracking==0 ) {

                                          retval.etype = actions.makeCall(LPAREN21, (dotted_attr20!=null?dotted_attr20.etype:null));
                                      
                            }

                            }
                            break;

                    }

                    RPAREN23=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_decorator787); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RPAREN23_tree = (PythonTree)adaptor.create(RPAREN23);
                    adaptor.addChild(root_0, RPAREN23_tree);
                    }

                    }
                    break;
                case 2 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:444:7: 
                    {
                    if ( state.backtracking==0 ) {

                                retval.etype = (dotted_attr20!=null?dotted_attr20.etype:null);
                            
                    }

                    }
                    break;

            }

            NEWLINE24=(Token)match(input,NEWLINE,FOLLOW_NEWLINE_in_decorator809); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            NEWLINE24_tree = (PythonTree)adaptor.create(NEWLINE24);
            adaptor.addChild(root_0, NEWLINE24_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (PythonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {

                 retval.tree = retval.etype;

            }
        }

        catch (RecognitionException re) {
            errorHandler.reportError(this, re);
            errorHandler.recover(this, input,re);
            retval.tree = (PythonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "decorator"

    public static class decorators_return extends ParserRuleReturnScope {
        public List etypes;
        PythonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "decorators"
    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:451:1: decorators returns [List etypes] : (d+= decorator )+ ;
    public final PythonParser.decorators_return decorators() throws RecognitionException {
        PythonParser.decorators_return retval = new PythonParser.decorators_return();
        retval.start = input.LT(1);

        PythonTree root_0 = null;

        List list_d=null;
        PythonParser.decorator_return d = null;
         d = null;

        try {
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:453:5: ( (d+= decorator )+ )
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:453:7: (d+= decorator )+
            {
            root_0 = (PythonTree)adaptor.nil();

            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:453:8: (d+= decorator )+
            int cnt13=0;
            loop13:
            do {
                int alt13=2;
                int LA13_0 = input.LA(1);

                if ( (LA13_0==AT) ) {
                    alt13=1;
                }


                switch (alt13) {
            	case 1 :
            	    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:453:8: d+= decorator
            	    {
            	    pushFollow(FOLLOW_decorator_in_decorators837);
            	    d=decorator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, d.getTree());
            	    if (list_d==null) list_d=new ArrayList();
            	    list_d.add(d.getTree());


            	    }
            	    break;

            	default :
            	    if ( cnt13 >= 1 ) break loop13;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(13, input);
                        throw eee;
                }
                cnt13++;
            } while (true);

            if ( state.backtracking==0 ) {

                        retval.etypes = list_d;
                    
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (PythonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException re) {
            errorHandler.reportError(this, re);
            errorHandler.recover(this, input,re);
            retval.tree = (PythonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "decorators"

    public static class funcdef_return extends ParserRuleReturnScope {
        PythonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "funcdef"
    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:460:1: funcdef : ( decorators )? DEF NAME parameters COLON suite[false] ;
    public final PythonParser.funcdef_return funcdef() throws RecognitionException {
        PythonParser.funcdef_return retval = new PythonParser.funcdef_return();
        retval.start = input.LT(1);

        PythonTree root_0 = null;

        Token DEF26=null;
        Token NAME27=null;
        Token COLON29=null;
        PythonParser.decorators_return decorators25 = null;

        PythonParser.parameters_return parameters28 = null;

        PythonParser.suite_return suite30 = null;


        PythonTree DEF26_tree=null;
        PythonTree NAME27_tree=null;
        PythonTree COLON29_tree=null;


            stmt stype = null;

        try {
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:468:5: ( ( decorators )? DEF NAME parameters COLON suite[false] )
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:468:7: ( decorators )? DEF NAME parameters COLON suite[false]
            {
            root_0 = (PythonTree)adaptor.nil();

            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:468:7: ( decorators )?
            int alt14=2;
            int LA14_0 = input.LA(1);

            if ( (LA14_0==AT) ) {
                alt14=1;
            }
            switch (alt14) {
                case 1 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:468:7: decorators
                    {
                    pushFollow(FOLLOW_decorators_in_funcdef875);
                    decorators25=decorators();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, decorators25.getTree());

                    }
                    break;

            }

            DEF26=(Token)match(input,DEF,FOLLOW_DEF_in_funcdef878); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            DEF26_tree = (PythonTree)adaptor.create(DEF26);
            adaptor.addChild(root_0, DEF26_tree);
            }
            NAME27=(Token)match(input,NAME,FOLLOW_NAME_in_funcdef880); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            NAME27_tree = (PythonTree)adaptor.create(NAME27);
            adaptor.addChild(root_0, NAME27_tree);
            }
            pushFollow(FOLLOW_parameters_in_funcdef882);
            parameters28=parameters();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, parameters28.getTree());
            COLON29=(Token)match(input,COLON,FOLLOW_COLON_in_funcdef884); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            COLON29_tree = (PythonTree)adaptor.create(COLON29);
            adaptor.addChild(root_0, COLON29_tree);
            }
            pushFollow(FOLLOW_suite_in_funcdef886);
            suite30=suite(false);

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, suite30.getTree());
            if ( state.backtracking==0 ) {

                      Token t = DEF26;
                      if ((decorators25!=null?((Token)decorators25.start):null) != null) {
                          t = (decorators25!=null?((Token)decorators25.start):null);
                      }
                      stype = actions.makeFuncdef(t, NAME27, (parameters28!=null?parameters28.args:null), (suite30!=null?suite30.stypes:null), (decorators25!=null?decorators25.etypes:null));
                  
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (PythonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {

                  retval.tree = stype;

            }
        }

        catch (RecognitionException re) {
            errorHandler.reportError(this, re);
            errorHandler.recover(this, input,re);
            retval.tree = (PythonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "funcdef"

    public static class parameters_return extends ParserRuleReturnScope {
        public arguments args;
        PythonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "parameters"
    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:479:1: parameters returns [arguments args] : LPAREN ( varargslist | ) RPAREN ;
    public final PythonParser.parameters_return parameters() throws RecognitionException {
        PythonParser.parameters_return retval = new PythonParser.parameters_return();
        retval.start = input.LT(1);

        PythonTree root_0 = null;

        Token LPAREN31=null;
        Token RPAREN33=null;
        PythonParser.varargslist_return varargslist32 = null;


        PythonTree LPAREN31_tree=null;
        PythonTree RPAREN33_tree=null;

        try {
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:481:5: ( LPAREN ( varargslist | ) RPAREN )
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:481:7: LPAREN ( varargslist | ) RPAREN
            {
            root_0 = (PythonTree)adaptor.nil();

            LPAREN31=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_parameters919); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LPAREN31_tree = (PythonTree)adaptor.create(LPAREN31);
            adaptor.addChild(root_0, LPAREN31_tree);
            }
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:482:7: ( varargslist | )
            int alt15=2;
            int LA15_0 = input.LA(1);

            if ( (LA15_0==NAME||LA15_0==LPAREN||(LA15_0>=STAR && LA15_0<=DOUBLESTAR)) ) {
                alt15=1;
            }
            else if ( (LA15_0==RPAREN) ) {
                alt15=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 15, 0, input);

                throw nvae;
            }
            switch (alt15) {
                case 1 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:482:8: varargslist
                    {
                    pushFollow(FOLLOW_varargslist_in_parameters928);
                    varargslist32=varargslist();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, varargslist32.getTree());
                    if ( state.backtracking==0 ) {

                                    retval.args = (varargslist32!=null?varargslist32.args:null);
                              
                    }

                    }
                    break;
                case 2 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:487:9: 
                    {
                    if ( state.backtracking==0 ) {

                                  retval.args = new arguments(((Token)retval.start), new ArrayList<expr>(), null, null, new ArrayList<expr>());
                              
                    }

                    }
                    break;

            }

            RPAREN33=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_parameters972); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RPAREN33_tree = (PythonTree)adaptor.create(RPAREN33);
            adaptor.addChild(root_0, RPAREN33_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (PythonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException re) {
            errorHandler.reportError(this, re);
            errorHandler.recover(this, input,re);
            retval.tree = (PythonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "parameters"

    public static class defparameter_return extends ParserRuleReturnScope {
        public expr etype;
        PythonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "defparameter"
    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:495:1: defparameter[List defaults] returns [expr etype] : fpdef[expr_contextType.Param] ( ASSIGN test[expr_contextType.Load] )? ;
    public final PythonParser.defparameter_return defparameter(List defaults) throws RecognitionException {
        PythonParser.defparameter_return retval = new PythonParser.defparameter_return();
        retval.start = input.LT(1);

        PythonTree root_0 = null;

        Token ASSIGN35=null;
        PythonParser.fpdef_return fpdef34 = null;

        PythonParser.test_return test36 = null;


        PythonTree ASSIGN35_tree=null;

        try {
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:500:5: ( fpdef[expr_contextType.Param] ( ASSIGN test[expr_contextType.Load] )? )
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:500:7: fpdef[expr_contextType.Param] ( ASSIGN test[expr_contextType.Load] )?
            {
            root_0 = (PythonTree)adaptor.nil();

            pushFollow(FOLLOW_fpdef_in_defparameter1005);
            fpdef34=fpdef(expr_contextType.Param);

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, fpdef34.getTree());
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:500:37: ( ASSIGN test[expr_contextType.Load] )?
            int alt16=2;
            int LA16_0 = input.LA(1);

            if ( (LA16_0==ASSIGN) ) {
                alt16=1;
            }
            switch (alt16) {
                case 1 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:500:38: ASSIGN test[expr_contextType.Load]
                    {
                    ASSIGN35=(Token)match(input,ASSIGN,FOLLOW_ASSIGN_in_defparameter1009); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ASSIGN35_tree = (PythonTree)adaptor.create(ASSIGN35);
                    adaptor.addChild(root_0, ASSIGN35_tree);
                    }
                    pushFollow(FOLLOW_test_in_defparameter1011);
                    test36=test(expr_contextType.Load);

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, test36.getTree());

                    }
                    break;

            }

            if ( state.backtracking==0 ) {

                        retval.etype = actions.castExpr((fpdef34!=null?((PythonTree)fpdef34.tree):null));
                        if (ASSIGN35 != null) {
                            defaults.add((test36!=null?((PythonTree)test36.tree):null));
                        } else if (!defaults.isEmpty()) {
                            throw new ParseException("non-default argument follows default argument", (fpdef34!=null?((PythonTree)fpdef34.tree):null));
                        }
                    
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (PythonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {

                 retval.tree = retval.etype;

            }
        }

        catch (RecognitionException re) {
            errorHandler.reportError(this, re);
            errorHandler.recover(this, input,re);
            retval.tree = (PythonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "defparameter"

    public static class varargslist_return extends ParserRuleReturnScope {
        public arguments args;
        PythonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "varargslist"
    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:514:1: varargslist returns [arguments args] : (d+= defparameter[defaults] ( options {greedy=true; } : COMMA d+= defparameter[defaults] )* ( COMMA ( STAR starargs= NAME ( COMMA DOUBLESTAR kwargs= NAME )? | DOUBLESTAR kwargs= NAME )? )? | STAR starargs= NAME ( COMMA DOUBLESTAR kwargs= NAME )? | DOUBLESTAR kwargs= NAME );
    public final PythonParser.varargslist_return varargslist() throws RecognitionException {
        PythonParser.varargslist_return retval = new PythonParser.varargslist_return();
        retval.start = input.LT(1);

        PythonTree root_0 = null;

        Token starargs=null;
        Token kwargs=null;
        Token COMMA37=null;
        Token COMMA38=null;
        Token STAR39=null;
        Token COMMA40=null;
        Token DOUBLESTAR41=null;
        Token DOUBLESTAR42=null;
        Token STAR43=null;
        Token COMMA44=null;
        Token DOUBLESTAR45=null;
        Token DOUBLESTAR46=null;
        List list_d=null;
        PythonParser.defparameter_return d = null;
         d = null;
        PythonTree starargs_tree=null;
        PythonTree kwargs_tree=null;
        PythonTree COMMA37_tree=null;
        PythonTree COMMA38_tree=null;
        PythonTree STAR39_tree=null;
        PythonTree COMMA40_tree=null;
        PythonTree DOUBLESTAR41_tree=null;
        PythonTree DOUBLESTAR42_tree=null;
        PythonTree STAR43_tree=null;
        PythonTree COMMA44_tree=null;
        PythonTree DOUBLESTAR45_tree=null;
        PythonTree DOUBLESTAR46_tree=null;


            List defaults = new ArrayList();

        try {
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:519:5: (d+= defparameter[defaults] ( options {greedy=true; } : COMMA d+= defparameter[defaults] )* ( COMMA ( STAR starargs= NAME ( COMMA DOUBLESTAR kwargs= NAME )? | DOUBLESTAR kwargs= NAME )? )? | STAR starargs= NAME ( COMMA DOUBLESTAR kwargs= NAME )? | DOUBLESTAR kwargs= NAME )
            int alt22=3;
            switch ( input.LA(1) ) {
            case NAME:
            case LPAREN:
                {
                alt22=1;
                }
                break;
            case STAR:
                {
                alt22=2;
                }
                break;
            case DOUBLESTAR:
                {
                alt22=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 22, 0, input);

                throw nvae;
            }

            switch (alt22) {
                case 1 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:519:7: d+= defparameter[defaults] ( options {greedy=true; } : COMMA d+= defparameter[defaults] )* ( COMMA ( STAR starargs= NAME ( COMMA DOUBLESTAR kwargs= NAME )? | DOUBLESTAR kwargs= NAME )? )?
                    {
                    root_0 = (PythonTree)adaptor.nil();

                    pushFollow(FOLLOW_defparameter_in_varargslist1057);
                    d=defparameter(defaults);

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, d.getTree());
                    if (list_d==null) list_d=new ArrayList();
                    list_d.add(d.getTree());

                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:519:33: ( options {greedy=true; } : COMMA d+= defparameter[defaults] )*
                    loop17:
                    do {
                        int alt17=2;
                        int LA17_0 = input.LA(1);

                        if ( (LA17_0==COMMA) ) {
                            int LA17_1 = input.LA(2);

                            if ( (LA17_1==NAME||LA17_1==LPAREN) ) {
                                alt17=1;
                            }


                        }


                        switch (alt17) {
                    	case 1 :
                    	    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:519:57: COMMA d+= defparameter[defaults]
                    	    {
                    	    COMMA37=(Token)match(input,COMMA,FOLLOW_COMMA_in_varargslist1068); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    COMMA37_tree = (PythonTree)adaptor.create(COMMA37);
                    	    adaptor.addChild(root_0, COMMA37_tree);
                    	    }
                    	    pushFollow(FOLLOW_defparameter_in_varargslist1072);
                    	    d=defparameter(defaults);

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, d.getTree());
                    	    if (list_d==null) list_d=new ArrayList();
                    	    list_d.add(d.getTree());


                    	    }
                    	    break;

                    	default :
                    	    break loop17;
                        }
                    } while (true);

                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:520:7: ( COMMA ( STAR starargs= NAME ( COMMA DOUBLESTAR kwargs= NAME )? | DOUBLESTAR kwargs= NAME )? )?
                    int alt20=2;
                    int LA20_0 = input.LA(1);

                    if ( (LA20_0==COMMA) ) {
                        alt20=1;
                    }
                    switch (alt20) {
                        case 1 :
                            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:520:8: COMMA ( STAR starargs= NAME ( COMMA DOUBLESTAR kwargs= NAME )? | DOUBLESTAR kwargs= NAME )?
                            {
                            COMMA38=(Token)match(input,COMMA,FOLLOW_COMMA_in_varargslist1084); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            COMMA38_tree = (PythonTree)adaptor.create(COMMA38);
                            adaptor.addChild(root_0, COMMA38_tree);
                            }
                            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:521:11: ( STAR starargs= NAME ( COMMA DOUBLESTAR kwargs= NAME )? | DOUBLESTAR kwargs= NAME )?
                            int alt19=3;
                            int LA19_0 = input.LA(1);

                            if ( (LA19_0==STAR) ) {
                                alt19=1;
                            }
                            else if ( (LA19_0==DOUBLESTAR) ) {
                                alt19=2;
                            }
                            switch (alt19) {
                                case 1 :
                                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:521:12: STAR starargs= NAME ( COMMA DOUBLESTAR kwargs= NAME )?
                                    {
                                    STAR39=(Token)match(input,STAR,FOLLOW_STAR_in_varargslist1097); if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                    STAR39_tree = (PythonTree)adaptor.create(STAR39);
                                    adaptor.addChild(root_0, STAR39_tree);
                                    }
                                    starargs=(Token)match(input,NAME,FOLLOW_NAME_in_varargslist1101); if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                    starargs_tree = (PythonTree)adaptor.create(starargs);
                                    adaptor.addChild(root_0, starargs_tree);
                                    }
                                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:521:31: ( COMMA DOUBLESTAR kwargs= NAME )?
                                    int alt18=2;
                                    int LA18_0 = input.LA(1);

                                    if ( (LA18_0==COMMA) ) {
                                        alt18=1;
                                    }
                                    switch (alt18) {
                                        case 1 :
                                            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:521:32: COMMA DOUBLESTAR kwargs= NAME
                                            {
                                            COMMA40=(Token)match(input,COMMA,FOLLOW_COMMA_in_varargslist1104); if (state.failed) return retval;
                                            if ( state.backtracking==0 ) {
                                            COMMA40_tree = (PythonTree)adaptor.create(COMMA40);
                                            adaptor.addChild(root_0, COMMA40_tree);
                                            }
                                            DOUBLESTAR41=(Token)match(input,DOUBLESTAR,FOLLOW_DOUBLESTAR_in_varargslist1106); if (state.failed) return retval;
                                            if ( state.backtracking==0 ) {
                                            DOUBLESTAR41_tree = (PythonTree)adaptor.create(DOUBLESTAR41);
                                            adaptor.addChild(root_0, DOUBLESTAR41_tree);
                                            }
                                            kwargs=(Token)match(input,NAME,FOLLOW_NAME_in_varargslist1110); if (state.failed) return retval;
                                            if ( state.backtracking==0 ) {
                                            kwargs_tree = (PythonTree)adaptor.create(kwargs);
                                            adaptor.addChild(root_0, kwargs_tree);
                                            }

                                            }
                                            break;

                                    }


                                    }
                                    break;
                                case 2 :
                                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:522:13: DOUBLESTAR kwargs= NAME
                                    {
                                    DOUBLESTAR42=(Token)match(input,DOUBLESTAR,FOLLOW_DOUBLESTAR_in_varargslist1126); if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                    DOUBLESTAR42_tree = (PythonTree)adaptor.create(DOUBLESTAR42);
                                    adaptor.addChild(root_0, DOUBLESTAR42_tree);
                                    }
                                    kwargs=(Token)match(input,NAME,FOLLOW_NAME_in_varargslist1130); if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                    kwargs_tree = (PythonTree)adaptor.create(kwargs);
                                    adaptor.addChild(root_0, kwargs_tree);
                                    }

                                    }
                                    break;

                            }


                            }
                            break;

                    }

                    if ( state.backtracking==0 ) {

                                retval.args = actions.makeArgumentsType(((Token)retval.start), list_d, starargs, kwargs, defaults);
                            
                    }

                    }
                    break;
                case 2 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:528:7: STAR starargs= NAME ( COMMA DOUBLESTAR kwargs= NAME )?
                    {
                    root_0 = (PythonTree)adaptor.nil();

                    STAR43=(Token)match(input,STAR,FOLLOW_STAR_in_varargslist1168); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STAR43_tree = (PythonTree)adaptor.create(STAR43);
                    adaptor.addChild(root_0, STAR43_tree);
                    }
                    starargs=(Token)match(input,NAME,FOLLOW_NAME_in_varargslist1172); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    starargs_tree = (PythonTree)adaptor.create(starargs);
                    adaptor.addChild(root_0, starargs_tree);
                    }
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:528:26: ( COMMA DOUBLESTAR kwargs= NAME )?
                    int alt21=2;
                    int LA21_0 = input.LA(1);

                    if ( (LA21_0==COMMA) ) {
                        alt21=1;
                    }
                    switch (alt21) {
                        case 1 :
                            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:528:27: COMMA DOUBLESTAR kwargs= NAME
                            {
                            COMMA44=(Token)match(input,COMMA,FOLLOW_COMMA_in_varargslist1175); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            COMMA44_tree = (PythonTree)adaptor.create(COMMA44);
                            adaptor.addChild(root_0, COMMA44_tree);
                            }
                            DOUBLESTAR45=(Token)match(input,DOUBLESTAR,FOLLOW_DOUBLESTAR_in_varargslist1177); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            DOUBLESTAR45_tree = (PythonTree)adaptor.create(DOUBLESTAR45);
                            adaptor.addChild(root_0, DOUBLESTAR45_tree);
                            }
                            kwargs=(Token)match(input,NAME,FOLLOW_NAME_in_varargslist1181); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            kwargs_tree = (PythonTree)adaptor.create(kwargs);
                            adaptor.addChild(root_0, kwargs_tree);
                            }

                            }
                            break;

                    }

                    if ( state.backtracking==0 ) {

                                retval.args = actions.makeArgumentsType(((Token)retval.start), list_d, starargs, kwargs, defaults);
                            
                    }

                    }
                    break;
                case 3 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:532:7: DOUBLESTAR kwargs= NAME
                    {
                    root_0 = (PythonTree)adaptor.nil();

                    DOUBLESTAR46=(Token)match(input,DOUBLESTAR,FOLLOW_DOUBLESTAR_in_varargslist1199); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DOUBLESTAR46_tree = (PythonTree)adaptor.create(DOUBLESTAR46);
                    adaptor.addChild(root_0, DOUBLESTAR46_tree);
                    }
                    kwargs=(Token)match(input,NAME,FOLLOW_NAME_in_varargslist1203); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    kwargs_tree = (PythonTree)adaptor.create(kwargs);
                    adaptor.addChild(root_0, kwargs_tree);
                    }
                    if ( state.backtracking==0 ) {

                                retval.args = actions.makeArgumentsType(((Token)retval.start), list_d, null, kwargs, defaults);
                            
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (PythonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException re) {
            errorHandler.reportError(this, re);
            errorHandler.recover(this, input,re);
            retval.tree = (PythonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "varargslist"

    public static class fpdef_return extends ParserRuleReturnScope {
        PythonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "fpdef"
    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:539:1: fpdef[expr_contextType ctype] : ( NAME | ( LPAREN fpdef[null] COMMA )=> LPAREN fplist RPAREN | LPAREN fplist RPAREN );
    public final PythonParser.fpdef_return fpdef(expr_contextType ctype) throws RecognitionException {
        PythonParser.fpdef_return retval = new PythonParser.fpdef_return();
        retval.start = input.LT(1);

        PythonTree root_0 = null;

        Token NAME47=null;
        Token LPAREN48=null;
        Token RPAREN50=null;
        Token LPAREN51=null;
        Token RPAREN53=null;
        PythonParser.fplist_return fplist49 = null;

        PythonParser.fplist_return fplist52 = null;


        PythonTree NAME47_tree=null;
        PythonTree LPAREN48_tree=null;
        PythonTree RPAREN50_tree=null;
        PythonTree LPAREN51_tree=null;
        PythonTree RPAREN53_tree=null;


            expr etype = null;

        try {
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:549:5: ( NAME | ( LPAREN fpdef[null] COMMA )=> LPAREN fplist RPAREN | LPAREN fplist RPAREN )
            int alt23=3;
            int LA23_0 = input.LA(1);

            if ( (LA23_0==NAME) ) {
                alt23=1;
            }
            else if ( (LA23_0==LPAREN) ) {
                int LA23_2 = input.LA(2);

                if ( (synpred1_Python()) ) {
                    alt23=2;
                }
                else if ( (true) ) {
                    alt23=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 23, 2, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 23, 0, input);

                throw nvae;
            }
            switch (alt23) {
                case 1 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:549:7: NAME
                    {
                    root_0 = (PythonTree)adaptor.nil();

                    NAME47=(Token)match(input,NAME,FOLLOW_NAME_in_fpdef1240); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NAME47_tree = (PythonTree)adaptor.create(NAME47);
                    adaptor.addChild(root_0, NAME47_tree);
                    }
                    if ( state.backtracking==0 ) {

                                etype = new Name(NAME47, (NAME47!=null?NAME47.getText():null), ctype);
                            
                    }

                    }
                    break;
                case 2 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:553:7: ( LPAREN fpdef[null] COMMA )=> LPAREN fplist RPAREN
                    {
                    root_0 = (PythonTree)adaptor.nil();

                    LPAREN48=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_fpdef1267); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LPAREN48_tree = (PythonTree)adaptor.create(LPAREN48);
                    adaptor.addChild(root_0, LPAREN48_tree);
                    }
                    pushFollow(FOLLOW_fplist_in_fpdef1269);
                    fplist49=fplist();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, fplist49.getTree());
                    RPAREN50=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_fpdef1271); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RPAREN50_tree = (PythonTree)adaptor.create(RPAREN50);
                    adaptor.addChild(root_0, RPAREN50_tree);
                    }
                    if ( state.backtracking==0 ) {

                                etype = new Tuple((fplist49!=null?((Token)fplist49.start):null), actions.castExprs((fplist49!=null?fplist49.etypes:null)), expr_contextType.Store);
                            
                    }

                    }
                    break;
                case 3 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:557:7: LPAREN fplist RPAREN
                    {
                    root_0 = (PythonTree)adaptor.nil();

                    LPAREN51=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_fpdef1287); if (state.failed) return retval;
                    pushFollow(FOLLOW_fplist_in_fpdef1290);
                    fplist52=fplist();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, fplist52.getTree());
                    RPAREN53=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_fpdef1292); if (state.failed) return retval;

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (PythonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {

                  if (etype != null) {
                      retval.tree = etype;
                  }
                  actions.checkAssign(actions.castExpr(((PythonTree)retval.tree)));

            }
        }

        catch (RecognitionException re) {
            errorHandler.reportError(this, re);
            errorHandler.recover(this, input,re);
            retval.tree = (PythonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "fpdef"

    public static class fplist_return extends ParserRuleReturnScope {
        public List etypes;
        PythonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "fplist"
    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:561:1: fplist returns [List etypes] : f+= fpdef[expr_contextType.Store] ( options {greedy=true; } : COMMA f+= fpdef[expr_contextType.Store] )* ( COMMA )? ;
    public final PythonParser.fplist_return fplist() throws RecognitionException {
        PythonParser.fplist_return retval = new PythonParser.fplist_return();
        retval.start = input.LT(1);

        PythonTree root_0 = null;

        Token COMMA54=null;
        Token COMMA55=null;
        List list_f=null;
        PythonParser.fpdef_return f = null;
         f = null;
        PythonTree COMMA54_tree=null;
        PythonTree COMMA55_tree=null;

        try {
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:563:5: (f+= fpdef[expr_contextType.Store] ( options {greedy=true; } : COMMA f+= fpdef[expr_contextType.Store] )* ( COMMA )? )
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:563:7: f+= fpdef[expr_contextType.Store] ( options {greedy=true; } : COMMA f+= fpdef[expr_contextType.Store] )* ( COMMA )?
            {
            root_0 = (PythonTree)adaptor.nil();

            pushFollow(FOLLOW_fpdef_in_fplist1321);
            f=fpdef(expr_contextType.Store);

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, f.getTree());
            if (list_f==null) list_f=new ArrayList();
            list_f.add(f.getTree());

            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:564:7: ( options {greedy=true; } : COMMA f+= fpdef[expr_contextType.Store] )*
            loop24:
            do {
                int alt24=2;
                int LA24_0 = input.LA(1);

                if ( (LA24_0==COMMA) ) {
                    int LA24_1 = input.LA(2);

                    if ( (LA24_1==NAME||LA24_1==LPAREN) ) {
                        alt24=1;
                    }


                }


                switch (alt24) {
            	case 1 :
            	    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:564:31: COMMA f+= fpdef[expr_contextType.Store]
            	    {
            	    COMMA54=(Token)match(input,COMMA,FOLLOW_COMMA_in_fplist1338); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    COMMA54_tree = (PythonTree)adaptor.create(COMMA54);
            	    adaptor.addChild(root_0, COMMA54_tree);
            	    }
            	    pushFollow(FOLLOW_fpdef_in_fplist1342);
            	    f=fpdef(expr_contextType.Store);

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, f.getTree());
            	    if (list_f==null) list_f=new ArrayList();
            	    list_f.add(f.getTree());


            	    }
            	    break;

            	default :
            	    break loop24;
                }
            } while (true);

            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:564:72: ( COMMA )?
            int alt25=2;
            int LA25_0 = input.LA(1);

            if ( (LA25_0==COMMA) ) {
                alt25=1;
            }
            switch (alt25) {
                case 1 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:564:73: COMMA
                    {
                    COMMA55=(Token)match(input,COMMA,FOLLOW_COMMA_in_fplist1348); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COMMA55_tree = (PythonTree)adaptor.create(COMMA55);
                    adaptor.addChild(root_0, COMMA55_tree);
                    }

                    }
                    break;

            }

            if ( state.backtracking==0 ) {

                        retval.etypes = list_f;
                    
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (PythonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException re) {
            errorHandler.reportError(this, re);
            errorHandler.recover(this, input,re);
            retval.tree = (PythonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "fplist"

    public static class stmt_return extends ParserRuleReturnScope {
        public List stypes;
        PythonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "stmt"
    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:571:1: stmt returns [List stypes] : ( simple_stmt | compound_stmt );
    public final PythonParser.stmt_return stmt() throws RecognitionException {
        PythonParser.stmt_return retval = new PythonParser.stmt_return();
        retval.start = input.LT(1);

        PythonTree root_0 = null;

        PythonParser.simple_stmt_return simple_stmt56 = null;

        PythonParser.compound_stmt_return compound_stmt57 = null;



        try {
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:573:5: ( simple_stmt | compound_stmt )
            int alt26=2;
            int LA26_0 = input.LA(1);

            if ( (LA26_0==NAME||(LA26_0>=ASSERT && LA26_0<=BREAK)||LA26_0==CONTINUE||LA26_0==DELETE||LA26_0==EXEC||LA26_0==FROM||LA26_0==GLOBAL||LA26_0==IMPORT||(LA26_0>=LAMBDA && LA26_0<=NOT)||(LA26_0>=PASS && LA26_0<=RETURN)||LA26_0==YIELD||LA26_0==LPAREN||(LA26_0>=PLUS && LA26_0<=MINUS)||(LA26_0>=TILDE && LA26_0<=LBRACK)||LA26_0==LCURLY||(LA26_0>=BACKQUOTE && LA26_0<=PRO)||LA26_0==PRO_SELECT||LA26_0==ASP||LA26_0==ASP_SELECT||LA26_0==ASP_PATH||(LA26_0>=SELECT && LA26_0<=RDFSELECT)||LA26_0==CAPSFROM||(LA26_0>=MODIFY && LA26_0<=SUBCLASS)) ) {
                alt26=1;
            }
            else if ( (LA26_0==CLASS||LA26_0==DEF||LA26_0==FOR||LA26_0==IF||(LA26_0>=TRY && LA26_0<=WITH)||LA26_0==AT) ) {
                alt26=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 26, 0, input);

                throw nvae;
            }
            switch (alt26) {
                case 1 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:573:7: simple_stmt
                    {
                    root_0 = (PythonTree)adaptor.nil();

                    pushFollow(FOLLOW_simple_stmt_in_stmt1384);
                    simple_stmt56=simple_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, simple_stmt56.getTree());
                    if ( state.backtracking==0 ) {

                                retval.stypes = (simple_stmt56!=null?simple_stmt56.stypes:null);
                            
                    }

                    }
                    break;
                case 2 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:577:7: compound_stmt
                    {
                    root_0 = (PythonTree)adaptor.nil();

                    pushFollow(FOLLOW_compound_stmt_in_stmt1400);
                    compound_stmt57=compound_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, compound_stmt57.getTree());
                    if ( state.backtracking==0 ) {

                                retval.stypes = new ArrayList();
                                retval.stypes.add((compound_stmt57!=null?((PythonTree)compound_stmt57.tree):null));
                            
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (PythonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException re) {
            errorHandler.reportError(this, re);
            errorHandler.recover(this, input,re);
            retval.tree = (PythonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "stmt"

    public static class simple_stmt_return extends ParserRuleReturnScope {
        public List stypes;
        PythonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "simple_stmt"
    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:585:1: simple_stmt returns [List stypes] : s+= small_stmt ( options {greedy=true; } : SEMI s+= small_stmt )* ( SEMI )? NEWLINE ;
    public final PythonParser.simple_stmt_return simple_stmt() throws RecognitionException {
        PythonParser.simple_stmt_return retval = new PythonParser.simple_stmt_return();
        retval.start = input.LT(1);

        PythonTree root_0 = null;

        Token SEMI58=null;
        Token SEMI59=null;
        Token NEWLINE60=null;
        List list_s=null;
        PythonParser.small_stmt_return s = null;
         s = null;
        PythonTree SEMI58_tree=null;
        PythonTree SEMI59_tree=null;
        PythonTree NEWLINE60_tree=null;

        try {
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:587:5: (s+= small_stmt ( options {greedy=true; } : SEMI s+= small_stmt )* ( SEMI )? NEWLINE )
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:587:7: s+= small_stmt ( options {greedy=true; } : SEMI s+= small_stmt )* ( SEMI )? NEWLINE
            {
            root_0 = (PythonTree)adaptor.nil();

            pushFollow(FOLLOW_small_stmt_in_simple_stmt1436);
            s=small_stmt();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, s.getTree());
            if (list_s==null) list_s=new ArrayList();
            list_s.add(s.getTree());

            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:587:21: ( options {greedy=true; } : SEMI s+= small_stmt )*
            loop27:
            do {
                int alt27=2;
                int LA27_0 = input.LA(1);

                if ( (LA27_0==SEMI) ) {
                    int LA27_1 = input.LA(2);

                    if ( (LA27_1==NAME||(LA27_1>=ASSERT && LA27_1<=BREAK)||LA27_1==CONTINUE||LA27_1==DELETE||LA27_1==EXEC||LA27_1==FROM||LA27_1==GLOBAL||LA27_1==IMPORT||(LA27_1>=LAMBDA && LA27_1<=NOT)||(LA27_1>=PASS && LA27_1<=RETURN)||LA27_1==YIELD||LA27_1==LPAREN||(LA27_1>=PLUS && LA27_1<=MINUS)||(LA27_1>=TILDE && LA27_1<=LBRACK)||LA27_1==LCURLY||(LA27_1>=BACKQUOTE && LA27_1<=PRO)||LA27_1==PRO_SELECT||LA27_1==ASP||LA27_1==ASP_SELECT||LA27_1==ASP_PATH||(LA27_1>=SELECT && LA27_1<=RDFSELECT)||LA27_1==CAPSFROM||(LA27_1>=MODIFY && LA27_1<=SUBCLASS)) ) {
                        alt27=1;
                    }


                }


                switch (alt27) {
            	case 1 :
            	    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:587:45: SEMI s+= small_stmt
            	    {
            	    SEMI58=(Token)match(input,SEMI,FOLLOW_SEMI_in_simple_stmt1446); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    SEMI58_tree = (PythonTree)adaptor.create(SEMI58);
            	    adaptor.addChild(root_0, SEMI58_tree);
            	    }
            	    pushFollow(FOLLOW_small_stmt_in_simple_stmt1450);
            	    s=small_stmt();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, s.getTree());
            	    if (list_s==null) list_s=new ArrayList();
            	    list_s.add(s.getTree());


            	    }
            	    break;

            	default :
            	    break loop27;
                }
            } while (true);

            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:587:66: ( SEMI )?
            int alt28=2;
            int LA28_0 = input.LA(1);

            if ( (LA28_0==SEMI) ) {
                alt28=1;
            }
            switch (alt28) {
                case 1 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:587:67: SEMI
                    {
                    SEMI59=(Token)match(input,SEMI,FOLLOW_SEMI_in_simple_stmt1455); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SEMI59_tree = (PythonTree)adaptor.create(SEMI59);
                    adaptor.addChild(root_0, SEMI59_tree);
                    }

                    }
                    break;

            }

            NEWLINE60=(Token)match(input,NEWLINE,FOLLOW_NEWLINE_in_simple_stmt1459); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            NEWLINE60_tree = (PythonTree)adaptor.create(NEWLINE60);
            adaptor.addChild(root_0, NEWLINE60_tree);
            }
            if ( state.backtracking==0 ) {

                        retval.stypes = list_s;
                    
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (PythonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException re) {
            errorHandler.reportError(this, re);
            errorHandler.recover(this, input,re);
            retval.tree = (PythonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "simple_stmt"

    public static class small_stmt_return extends ParserRuleReturnScope {
        PythonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "small_stmt"
    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:595:1: small_stmt : ( expr_stmt | print_stmt | del_stmt | pass_stmt | flow_stmt | import_stmt | global_stmt | exec_stmt | assert_stmt );
    public final PythonParser.small_stmt_return small_stmt() throws RecognitionException {
        PythonParser.small_stmt_return retval = new PythonParser.small_stmt_return();
        retval.start = input.LT(1);

        PythonTree root_0 = null;

        PythonParser.expr_stmt_return expr_stmt61 = null;

        PythonParser.print_stmt_return print_stmt62 = null;

        PythonParser.del_stmt_return del_stmt63 = null;

        PythonParser.pass_stmt_return pass_stmt64 = null;

        PythonParser.flow_stmt_return flow_stmt65 = null;

        PythonParser.import_stmt_return import_stmt66 = null;

        PythonParser.global_stmt_return global_stmt67 = null;

        PythonParser.exec_stmt_return exec_stmt68 = null;

        PythonParser.assert_stmt_return assert_stmt69 = null;



        try {
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:595:12: ( expr_stmt | print_stmt | del_stmt | pass_stmt | flow_stmt | import_stmt | global_stmt | exec_stmt | assert_stmt )
            int alt29=9;
            alt29 = dfa29.predict(input);
            switch (alt29) {
                case 1 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:595:14: expr_stmt
                    {
                    root_0 = (PythonTree)adaptor.nil();

                    pushFollow(FOLLOW_expr_stmt_in_small_stmt1482);
                    expr_stmt61=expr_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expr_stmt61.getTree());

                    }
                    break;
                case 2 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:596:14: print_stmt
                    {
                    root_0 = (PythonTree)adaptor.nil();

                    pushFollow(FOLLOW_print_stmt_in_small_stmt1497);
                    print_stmt62=print_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, print_stmt62.getTree());

                    }
                    break;
                case 3 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:597:14: del_stmt
                    {
                    root_0 = (PythonTree)adaptor.nil();

                    pushFollow(FOLLOW_del_stmt_in_small_stmt1512);
                    del_stmt63=del_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, del_stmt63.getTree());

                    }
                    break;
                case 4 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:598:14: pass_stmt
                    {
                    root_0 = (PythonTree)adaptor.nil();

                    pushFollow(FOLLOW_pass_stmt_in_small_stmt1527);
                    pass_stmt64=pass_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, pass_stmt64.getTree());

                    }
                    break;
                case 5 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:599:14: flow_stmt
                    {
                    root_0 = (PythonTree)adaptor.nil();

                    pushFollow(FOLLOW_flow_stmt_in_small_stmt1542);
                    flow_stmt65=flow_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, flow_stmt65.getTree());

                    }
                    break;
                case 6 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:600:14: import_stmt
                    {
                    root_0 = (PythonTree)adaptor.nil();

                    pushFollow(FOLLOW_import_stmt_in_small_stmt1557);
                    import_stmt66=import_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, import_stmt66.getTree());

                    }
                    break;
                case 7 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:601:14: global_stmt
                    {
                    root_0 = (PythonTree)adaptor.nil();

                    pushFollow(FOLLOW_global_stmt_in_small_stmt1572);
                    global_stmt67=global_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, global_stmt67.getTree());

                    }
                    break;
                case 8 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:602:14: exec_stmt
                    {
                    root_0 = (PythonTree)adaptor.nil();

                    pushFollow(FOLLOW_exec_stmt_in_small_stmt1587);
                    exec_stmt68=exec_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, exec_stmt68.getTree());

                    }
                    break;
                case 9 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:603:14: assert_stmt
                    {
                    root_0 = (PythonTree)adaptor.nil();

                    pushFollow(FOLLOW_assert_stmt_in_small_stmt1602);
                    assert_stmt69=assert_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, assert_stmt69.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (PythonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException re) {
            errorHandler.reportError(this, re);
            errorHandler.recover(this, input,re);
            retval.tree = (PythonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "small_stmt"

    public static class expr_stmt_return extends ParserRuleReturnScope {
        PythonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "expr_stmt"
    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:608:1: expr_stmt : ( ( testlist[null] augassign )=>lhs= testlist[expr_contextType.AugStore] ( (aay= augassign y1= yield_expr ) | (aat= augassign rhs= testlist[expr_contextType.Load] ) ) | ( testlist[null] ASSIGN )=>lhs= testlist[expr_contextType.Store] ( | ( (at= ASSIGN t+= testlist[expr_contextType.Store] )+ ) | ( (ay= ASSIGN y2+= yield_expr )+ ) ) | lhs= testlist[expr_contextType.Load] ) ;
    public final PythonParser.expr_stmt_return expr_stmt() throws RecognitionException {
        PythonParser.expr_stmt_return retval = new PythonParser.expr_stmt_return();
        retval.start = input.LT(1);

        PythonTree root_0 = null;

        Token at=null;
        Token ay=null;
        List list_t=null;
        List list_y2=null;
        PythonParser.testlist_return lhs = null;

        PythonParser.augassign_return aay = null;

        PythonParser.yield_expr_return y1 = null;

        PythonParser.augassign_return aat = null;

        PythonParser.testlist_return rhs = null;

        PythonParser.testlist_return t = null;
         t = null;
        PythonParser.yield_expr_return y2 = null;
         y2 = null;
        PythonTree at_tree=null;
        PythonTree ay_tree=null;


            stmt stype = null;

        try {
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:617:5: ( ( ( testlist[null] augassign )=>lhs= testlist[expr_contextType.AugStore] ( (aay= augassign y1= yield_expr ) | (aat= augassign rhs= testlist[expr_contextType.Load] ) ) | ( testlist[null] ASSIGN )=>lhs= testlist[expr_contextType.Store] ( | ( (at= ASSIGN t+= testlist[expr_contextType.Store] )+ ) | ( (ay= ASSIGN y2+= yield_expr )+ ) ) | lhs= testlist[expr_contextType.Load] ) )
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:617:7: ( ( testlist[null] augassign )=>lhs= testlist[expr_contextType.AugStore] ( (aay= augassign y1= yield_expr ) | (aat= augassign rhs= testlist[expr_contextType.Load] ) ) | ( testlist[null] ASSIGN )=>lhs= testlist[expr_contextType.Store] ( | ( (at= ASSIGN t+= testlist[expr_contextType.Store] )+ ) | ( (ay= ASSIGN y2+= yield_expr )+ ) ) | lhs= testlist[expr_contextType.Load] )
            {
            root_0 = (PythonTree)adaptor.nil();

            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:617:7: ( ( testlist[null] augassign )=>lhs= testlist[expr_contextType.AugStore] ( (aay= augassign y1= yield_expr ) | (aat= augassign rhs= testlist[expr_contextType.Load] ) ) | ( testlist[null] ASSIGN )=>lhs= testlist[expr_contextType.Store] ( | ( (at= ASSIGN t+= testlist[expr_contextType.Store] )+ ) | ( (ay= ASSIGN y2+= yield_expr )+ ) ) | lhs= testlist[expr_contextType.Load] )
            int alt34=3;
            alt34 = dfa34.predict(input);
            switch (alt34) {
                case 1 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:617:8: ( testlist[null] augassign )=>lhs= testlist[expr_contextType.AugStore] ( (aay= augassign y1= yield_expr ) | (aat= augassign rhs= testlist[expr_contextType.Load] ) )
                    {
                    pushFollow(FOLLOW_testlist_in_expr_stmt1650);
                    lhs=testlist(expr_contextType.AugStore);

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lhs.getTree());
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:618:9: ( (aay= augassign y1= yield_expr ) | (aat= augassign rhs= testlist[expr_contextType.Load] ) )
                    int alt30=2;
                    alt30 = dfa30.predict(input);
                    switch (alt30) {
                        case 1 :
                            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:618:11: (aay= augassign y1= yield_expr )
                            {
                            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:618:11: (aay= augassign y1= yield_expr )
                            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:618:12: aay= augassign y1= yield_expr
                            {
                            pushFollow(FOLLOW_augassign_in_expr_stmt1666);
                            aay=augassign();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, aay.getTree());
                            pushFollow(FOLLOW_yield_expr_in_expr_stmt1670);
                            y1=yield_expr();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, y1.getTree());
                            if ( state.backtracking==0 ) {

                                             actions.checkAssign(actions.castExpr((lhs!=null?((PythonTree)lhs.tree):null)));
                                             stype = new AugAssign((lhs!=null?((PythonTree)lhs.tree):null), actions.castExpr((lhs!=null?((PythonTree)lhs.tree):null)), (aay!=null?aay.op:null), actions.castExpr((y1!=null?y1.etype:null)));
                                         
                            }

                            }


                            }
                            break;
                        case 2 :
                            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:624:11: (aat= augassign rhs= testlist[expr_contextType.Load] )
                            {
                            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:624:11: (aat= augassign rhs= testlist[expr_contextType.Load] )
                            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:624:12: aat= augassign rhs= testlist[expr_contextType.Load]
                            {
                            pushFollow(FOLLOW_augassign_in_expr_stmt1710);
                            aat=augassign();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, aat.getTree());
                            pushFollow(FOLLOW_testlist_in_expr_stmt1714);
                            rhs=testlist(expr_contextType.Load);

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, rhs.getTree());
                            if ( state.backtracking==0 ) {

                                             actions.checkAssign(actions.castExpr((lhs!=null?((PythonTree)lhs.tree):null)));
                                             stype = new AugAssign((lhs!=null?((PythonTree)lhs.tree):null), actions.castExpr((lhs!=null?((PythonTree)lhs.tree):null)), (aat!=null?aat.op:null), actions.castExpr((rhs!=null?((PythonTree)rhs.tree):null)));
                                         
                            }

                            }


                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:631:7: ( testlist[null] ASSIGN )=>lhs= testlist[expr_contextType.Store] ( | ( (at= ASSIGN t+= testlist[expr_contextType.Store] )+ ) | ( (ay= ASSIGN y2+= yield_expr )+ ) )
                    {
                    pushFollow(FOLLOW_testlist_in_expr_stmt1769);
                    lhs=testlist(expr_contextType.Store);

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lhs.getTree());
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:632:9: ( | ( (at= ASSIGN t+= testlist[expr_contextType.Store] )+ ) | ( (ay= ASSIGN y2+= yield_expr )+ ) )
                    int alt33=3;
                    int LA33_0 = input.LA(1);

                    if ( (LA33_0==NEWLINE||LA33_0==SEMI) ) {
                        alt33=1;
                    }
                    else if ( (LA33_0==ASSIGN) ) {
                        int LA33_2 = input.LA(2);

                        if ( (LA33_2==YIELD) ) {
                            alt33=3;
                        }
                        else if ( (LA33_2==NAME||(LA33_2>=LAMBDA && LA33_2<=NOT)||LA33_2==LPAREN||(LA33_2>=PLUS && LA33_2<=MINUS)||(LA33_2>=TILDE && LA33_2<=LBRACK)||LA33_2==LCURLY||(LA33_2>=BACKQUOTE && LA33_2<=PRO)||LA33_2==PRO_SELECT||LA33_2==ASP||LA33_2==ASP_SELECT||LA33_2==ASP_PATH||(LA33_2>=SELECT && LA33_2<=RDFSELECT)||LA33_2==CAPSFROM||(LA33_2>=MODIFY && LA33_2<=SUBCLASS)) ) {
                            alt33=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 33, 2, input);

                            throw nvae;
                        }
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 33, 0, input);

                        throw nvae;
                    }
                    switch (alt33) {
                        case 1 :
                            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:633:9: 
                            {
                            }
                            break;
                        case 2 :
                            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:633:11: ( (at= ASSIGN t+= testlist[expr_contextType.Store] )+ )
                            {
                            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:633:11: ( (at= ASSIGN t+= testlist[expr_contextType.Store] )+ )
                            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:633:12: (at= ASSIGN t+= testlist[expr_contextType.Store] )+
                            {
                            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:633:12: (at= ASSIGN t+= testlist[expr_contextType.Store] )+
                            int cnt31=0;
                            loop31:
                            do {
                                int alt31=2;
                                int LA31_0 = input.LA(1);

                                if ( (LA31_0==ASSIGN) ) {
                                    alt31=1;
                                }


                                switch (alt31) {
                            	case 1 :
                            	    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:633:13: at= ASSIGN t+= testlist[expr_contextType.Store]
                            	    {
                            	    at=(Token)match(input,ASSIGN,FOLLOW_ASSIGN_in_expr_stmt1796); if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {
                            	    at_tree = (PythonTree)adaptor.create(at);
                            	    adaptor.addChild(root_0, at_tree);
                            	    }
                            	    pushFollow(FOLLOW_testlist_in_expr_stmt1800);
                            	    t=testlist(expr_contextType.Store);

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, t.getTree());
                            	    if (list_t==null) list_t=new ArrayList();
                            	    list_t.add(t.getTree());


                            	    }
                            	    break;

                            	default :
                            	    if ( cnt31 >= 1 ) break loop31;
                            	    if (state.backtracking>0) {state.failed=true; return retval;}
                                        EarlyExitException eee =
                                            new EarlyExitException(31, input);
                                        throw eee;
                                }
                                cnt31++;
                            } while (true);

                            if ( state.backtracking==0 ) {

                                              stype = new Assign((lhs!=null?((PythonTree)lhs.tree):null), actions.makeAssignTargets(
                                                  actions.castExpr((lhs!=null?((PythonTree)lhs.tree):null)), list_t), actions.makeAssignValue(list_t));
                                          
                            }

                            }


                            }
                            break;
                        case 3 :
                            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:639:11: ( (ay= ASSIGN y2+= yield_expr )+ )
                            {
                            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:639:11: ( (ay= ASSIGN y2+= yield_expr )+ )
                            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:639:12: (ay= ASSIGN y2+= yield_expr )+
                            {
                            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:639:12: (ay= ASSIGN y2+= yield_expr )+
                            int cnt32=0;
                            loop32:
                            do {
                                int alt32=2;
                                int LA32_0 = input.LA(1);

                                if ( (LA32_0==ASSIGN) ) {
                                    alt32=1;
                                }


                                switch (alt32) {
                            	case 1 :
                            	    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:639:13: ay= ASSIGN y2+= yield_expr
                            	    {
                            	    ay=(Token)match(input,ASSIGN,FOLLOW_ASSIGN_in_expr_stmt1845); if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {
                            	    ay_tree = (PythonTree)adaptor.create(ay);
                            	    adaptor.addChild(root_0, ay_tree);
                            	    }
                            	    pushFollow(FOLLOW_yield_expr_in_expr_stmt1849);
                            	    y2=yield_expr();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, y2.getTree());
                            	    if (list_y2==null) list_y2=new ArrayList();
                            	    list_y2.add(y2.getTree());


                            	    }
                            	    break;

                            	default :
                            	    if ( cnt32 >= 1 ) break loop32;
                            	    if (state.backtracking>0) {state.failed=true; return retval;}
                                        EarlyExitException eee =
                                            new EarlyExitException(32, input);
                                        throw eee;
                                }
                                cnt32++;
                            } while (true);

                            if ( state.backtracking==0 ) {

                                              stype = new Assign((lhs!=null?((Token)lhs.start):null), actions.makeAssignTargets(
                                                  actions.castExpr((lhs!=null?((PythonTree)lhs.tree):null)), list_y2), actions.makeAssignValue(list_y2));
                                          
                            }

                            }


                            }
                            break;

                    }


                    }
                    break;
                case 3 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:646:7: lhs= testlist[expr_contextType.Load]
                    {
                    pushFollow(FOLLOW_testlist_in_expr_stmt1897);
                    lhs=testlist(expr_contextType.Load);

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lhs.getTree());
                    if ( state.backtracking==0 ) {

                                stype = new Expr((lhs!=null?((Token)lhs.start):null), actions.castExpr((lhs!=null?((PythonTree)lhs.tree):null)));
                            
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (PythonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {

                  if (stype != null) {
                      retval.tree = stype;
                  }

            }
        }

        catch (RecognitionException re) {
            errorHandler.reportError(this, re);
            errorHandler.recover(this, input,re);
            retval.tree = (PythonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "expr_stmt"

    public static class augassign_return extends ParserRuleReturnScope {
        public operatorType op;
        PythonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "augassign"
    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:655:1: augassign returns [operatorType op] : ( PLUSEQUAL | MINUSEQUAL | STAREQUAL | SLASHEQUAL | PERCENTEQUAL | AMPEREQUAL | VBAREQUAL | CIRCUMFLEXEQUAL | LEFTSHIFTEQUAL | RIGHTSHIFTEQUAL | DOUBLESTAREQUAL | DOUBLESLASHEQUAL );
    public final PythonParser.augassign_return augassign() throws RecognitionException {
        PythonParser.augassign_return retval = new PythonParser.augassign_return();
        retval.start = input.LT(1);

        PythonTree root_0 = null;

        Token PLUSEQUAL70=null;
        Token MINUSEQUAL71=null;
        Token STAREQUAL72=null;
        Token SLASHEQUAL73=null;
        Token PERCENTEQUAL74=null;
        Token AMPEREQUAL75=null;
        Token VBAREQUAL76=null;
        Token CIRCUMFLEXEQUAL77=null;
        Token LEFTSHIFTEQUAL78=null;
        Token RIGHTSHIFTEQUAL79=null;
        Token DOUBLESTAREQUAL80=null;
        Token DOUBLESLASHEQUAL81=null;

        PythonTree PLUSEQUAL70_tree=null;
        PythonTree MINUSEQUAL71_tree=null;
        PythonTree STAREQUAL72_tree=null;
        PythonTree SLASHEQUAL73_tree=null;
        PythonTree PERCENTEQUAL74_tree=null;
        PythonTree AMPEREQUAL75_tree=null;
        PythonTree VBAREQUAL76_tree=null;
        PythonTree CIRCUMFLEXEQUAL77_tree=null;
        PythonTree LEFTSHIFTEQUAL78_tree=null;
        PythonTree RIGHTSHIFTEQUAL79_tree=null;
        PythonTree DOUBLESTAREQUAL80_tree=null;
        PythonTree DOUBLESLASHEQUAL81_tree=null;

        try {
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:657:5: ( PLUSEQUAL | MINUSEQUAL | STAREQUAL | SLASHEQUAL | PERCENTEQUAL | AMPEREQUAL | VBAREQUAL | CIRCUMFLEXEQUAL | LEFTSHIFTEQUAL | RIGHTSHIFTEQUAL | DOUBLESTAREQUAL | DOUBLESLASHEQUAL )
            int alt35=12;
            switch ( input.LA(1) ) {
            case PLUSEQUAL:
                {
                alt35=1;
                }
                break;
            case MINUSEQUAL:
                {
                alt35=2;
                }
                break;
            case STAREQUAL:
                {
                alt35=3;
                }
                break;
            case SLASHEQUAL:
                {
                alt35=4;
                }
                break;
            case PERCENTEQUAL:
                {
                alt35=5;
                }
                break;
            case AMPEREQUAL:
                {
                alt35=6;
                }
                break;
            case VBAREQUAL:
                {
                alt35=7;
                }
                break;
            case CIRCUMFLEXEQUAL:
                {
                alt35=8;
                }
                break;
            case LEFTSHIFTEQUAL:
                {
                alt35=9;
                }
                break;
            case RIGHTSHIFTEQUAL:
                {
                alt35=10;
                }
                break;
            case DOUBLESTAREQUAL:
                {
                alt35=11;
                }
                break;
            case DOUBLESLASHEQUAL:
                {
                alt35=12;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 35, 0, input);

                throw nvae;
            }

            switch (alt35) {
                case 1 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:657:7: PLUSEQUAL
                    {
                    root_0 = (PythonTree)adaptor.nil();

                    PLUSEQUAL70=(Token)match(input,PLUSEQUAL,FOLLOW_PLUSEQUAL_in_augassign1939); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PLUSEQUAL70_tree = (PythonTree)adaptor.create(PLUSEQUAL70);
                    adaptor.addChild(root_0, PLUSEQUAL70_tree);
                    }
                    if ( state.backtracking==0 ) {

                                  retval.op = operatorType.Add;
                              
                    }

                    }
                    break;
                case 2 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:661:7: MINUSEQUAL
                    {
                    root_0 = (PythonTree)adaptor.nil();

                    MINUSEQUAL71=(Token)match(input,MINUSEQUAL,FOLLOW_MINUSEQUAL_in_augassign1957); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MINUSEQUAL71_tree = (PythonTree)adaptor.create(MINUSEQUAL71);
                    adaptor.addChild(root_0, MINUSEQUAL71_tree);
                    }
                    if ( state.backtracking==0 ) {

                                  retval.op = operatorType.Sub;
                              
                    }

                    }
                    break;
                case 3 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:665:7: STAREQUAL
                    {
                    root_0 = (PythonTree)adaptor.nil();

                    STAREQUAL72=(Token)match(input,STAREQUAL,FOLLOW_STAREQUAL_in_augassign1975); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STAREQUAL72_tree = (PythonTree)adaptor.create(STAREQUAL72);
                    adaptor.addChild(root_0, STAREQUAL72_tree);
                    }
                    if ( state.backtracking==0 ) {

                                  retval.op = operatorType.Mult;
                              
                    }

                    }
                    break;
                case 4 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:669:7: SLASHEQUAL
                    {
                    root_0 = (PythonTree)adaptor.nil();

                    SLASHEQUAL73=(Token)match(input,SLASHEQUAL,FOLLOW_SLASHEQUAL_in_augassign1993); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SLASHEQUAL73_tree = (PythonTree)adaptor.create(SLASHEQUAL73);
                    adaptor.addChild(root_0, SLASHEQUAL73_tree);
                    }
                    if ( state.backtracking==0 ) {

                                  retval.op = operatorType.Div;
                              
                    }

                    }
                    break;
                case 5 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:673:7: PERCENTEQUAL
                    {
                    root_0 = (PythonTree)adaptor.nil();

                    PERCENTEQUAL74=(Token)match(input,PERCENTEQUAL,FOLLOW_PERCENTEQUAL_in_augassign2011); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PERCENTEQUAL74_tree = (PythonTree)adaptor.create(PERCENTEQUAL74);
                    adaptor.addChild(root_0, PERCENTEQUAL74_tree);
                    }
                    if ( state.backtracking==0 ) {

                                  retval.op = operatorType.Mod;
                              
                    }

                    }
                    break;
                case 6 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:677:7: AMPEREQUAL
                    {
                    root_0 = (PythonTree)adaptor.nil();

                    AMPEREQUAL75=(Token)match(input,AMPEREQUAL,FOLLOW_AMPEREQUAL_in_augassign2029); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    AMPEREQUAL75_tree = (PythonTree)adaptor.create(AMPEREQUAL75);
                    adaptor.addChild(root_0, AMPEREQUAL75_tree);
                    }
                    if ( state.backtracking==0 ) {

                                  retval.op = operatorType.BitAnd;
                              
                    }

                    }
                    break;
                case 7 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:681:7: VBAREQUAL
                    {
                    root_0 = (PythonTree)adaptor.nil();

                    VBAREQUAL76=(Token)match(input,VBAREQUAL,FOLLOW_VBAREQUAL_in_augassign2047); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    VBAREQUAL76_tree = (PythonTree)adaptor.create(VBAREQUAL76);
                    adaptor.addChild(root_0, VBAREQUAL76_tree);
                    }
                    if ( state.backtracking==0 ) {

                                  retval.op = operatorType.BitOr;
                              
                    }

                    }
                    break;
                case 8 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:685:7: CIRCUMFLEXEQUAL
                    {
                    root_0 = (PythonTree)adaptor.nil();

                    CIRCUMFLEXEQUAL77=(Token)match(input,CIRCUMFLEXEQUAL,FOLLOW_CIRCUMFLEXEQUAL_in_augassign2065); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    CIRCUMFLEXEQUAL77_tree = (PythonTree)adaptor.create(CIRCUMFLEXEQUAL77);
                    adaptor.addChild(root_0, CIRCUMFLEXEQUAL77_tree);
                    }
                    if ( state.backtracking==0 ) {

                                  retval.op = operatorType.BitXor;
                              
                    }

                    }
                    break;
                case 9 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:689:7: LEFTSHIFTEQUAL
                    {
                    root_0 = (PythonTree)adaptor.nil();

                    LEFTSHIFTEQUAL78=(Token)match(input,LEFTSHIFTEQUAL,FOLLOW_LEFTSHIFTEQUAL_in_augassign2083); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LEFTSHIFTEQUAL78_tree = (PythonTree)adaptor.create(LEFTSHIFTEQUAL78);
                    adaptor.addChild(root_0, LEFTSHIFTEQUAL78_tree);
                    }
                    if ( state.backtracking==0 ) {

                                  retval.op = operatorType.LShift;
                              
                    }

                    }
                    break;
                case 10 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:693:7: RIGHTSHIFTEQUAL
                    {
                    root_0 = (PythonTree)adaptor.nil();

                    RIGHTSHIFTEQUAL79=(Token)match(input,RIGHTSHIFTEQUAL,FOLLOW_RIGHTSHIFTEQUAL_in_augassign2101); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RIGHTSHIFTEQUAL79_tree = (PythonTree)adaptor.create(RIGHTSHIFTEQUAL79);
                    adaptor.addChild(root_0, RIGHTSHIFTEQUAL79_tree);
                    }
                    if ( state.backtracking==0 ) {

                                  retval.op = operatorType.RShift;
                              
                    }

                    }
                    break;
                case 11 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:697:7: DOUBLESTAREQUAL
                    {
                    root_0 = (PythonTree)adaptor.nil();

                    DOUBLESTAREQUAL80=(Token)match(input,DOUBLESTAREQUAL,FOLLOW_DOUBLESTAREQUAL_in_augassign2119); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DOUBLESTAREQUAL80_tree = (PythonTree)adaptor.create(DOUBLESTAREQUAL80);
                    adaptor.addChild(root_0, DOUBLESTAREQUAL80_tree);
                    }
                    if ( state.backtracking==0 ) {

                                  retval.op = operatorType.Pow;
                              
                    }

                    }
                    break;
                case 12 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:701:7: DOUBLESLASHEQUAL
                    {
                    root_0 = (PythonTree)adaptor.nil();

                    DOUBLESLASHEQUAL81=(Token)match(input,DOUBLESLASHEQUAL,FOLLOW_DOUBLESLASHEQUAL_in_augassign2137); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DOUBLESLASHEQUAL81_tree = (PythonTree)adaptor.create(DOUBLESLASHEQUAL81);
                    adaptor.addChild(root_0, DOUBLESLASHEQUAL81_tree);
                    }
                    if ( state.backtracking==0 ) {

                                  retval.op = operatorType.FloorDiv;
                              
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (PythonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException re) {
            errorHandler.reportError(this, re);
            errorHandler.recover(this, input,re);
            retval.tree = (PythonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "augassign"

    public static class print_stmt_return extends ParserRuleReturnScope {
        PythonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "print_stmt"
    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:709:1: print_stmt : PRINT (t1= printlist | RIGHTSHIFT t2= printlist2 | ) ;
    public final PythonParser.print_stmt_return print_stmt() throws RecognitionException {
        PythonParser.print_stmt_return retval = new PythonParser.print_stmt_return();
        retval.start = input.LT(1);

        PythonTree root_0 = null;

        Token PRINT82=null;
        Token RIGHTSHIFT83=null;
        PythonParser.printlist_return t1 = null;

        PythonParser.printlist2_return t2 = null;


        PythonTree PRINT82_tree=null;
        PythonTree RIGHTSHIFT83_tree=null;


            stmt stype = null;

        try {
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:717:5: ( PRINT (t1= printlist | RIGHTSHIFT t2= printlist2 | ) )
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:717:7: PRINT (t1= printlist | RIGHTSHIFT t2= printlist2 | )
            {
            root_0 = (PythonTree)adaptor.nil();

            PRINT82=(Token)match(input,PRINT,FOLLOW_PRINT_in_print_stmt2177); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            PRINT82_tree = (PythonTree)adaptor.create(PRINT82);
            adaptor.addChild(root_0, PRINT82_tree);
            }
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:718:7: (t1= printlist | RIGHTSHIFT t2= printlist2 | )
            int alt36=3;
            switch ( input.LA(1) ) {
            case NAME:
            case LAMBDA:
            case NOT:
            case LPAREN:
            case PLUS:
            case MINUS:
            case TILDE:
            case LBRACK:
            case LCURLY:
            case BACKQUOTE:
            case INT:
            case LONGINT:
            case FLOAT:
            case COMPLEX:
            case STRING:
            case PRO:
            case PRO_SELECT:
            case ASP:
            case ASP_SELECT:
            case ASP_PATH:
            case SELECT:
            case INSERT:
            case CREATE:
            case DROP:
            case UPDATE:
            case SQL_DELETE:
            case ALTER:
            case MAKECONNECT:
            case ASPSELECT:
            case RDFSELECT:
            case CAPSFROM:
            case MODIFY:
            case CAPSCLASS:
            case SUBCLASS:
                {
                alt36=1;
                }
                break;
            case RIGHTSHIFT:
                {
                alt36=2;
                }
                break;
            case NEWLINE:
            case SEMI:
                {
                alt36=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 36, 0, input);

                throw nvae;
            }

            switch (alt36) {
                case 1 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:718:8: t1= printlist
                    {
                    pushFollow(FOLLOW_printlist_in_print_stmt2188);
                    t1=printlist();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, t1.getTree());
                    if ( state.backtracking==0 ) {

                                 stype = new Print(PRINT82, null, actions.castExprs((t1!=null?t1.elts:null)), (t1!=null?t1.newline:false));
                             
                    }

                    }
                    break;
                case 2 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:722:9: RIGHTSHIFT t2= printlist2
                    {
                    RIGHTSHIFT83=(Token)match(input,RIGHTSHIFT,FOLLOW_RIGHTSHIFT_in_print_stmt2207); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RIGHTSHIFT83_tree = (PythonTree)adaptor.create(RIGHTSHIFT83);
                    adaptor.addChild(root_0, RIGHTSHIFT83_tree);
                    }
                    pushFollow(FOLLOW_printlist2_in_print_stmt2211);
                    t2=printlist2();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, t2.getTree());
                    if ( state.backtracking==0 ) {

                                 stype = new Print(PRINT82, actions.castExpr((t2!=null?t2.elts:null).get(0)), actions.castExprs((t2!=null?t2.elts:null), 1), (t2!=null?t2.newline:false));
                             
                    }

                    }
                    break;
                case 3 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:727:8: 
                    {
                    if ( state.backtracking==0 ) {

                                 stype = new Print(PRINT82, null, new ArrayList<expr>(), true);
                             
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (PythonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {

                  retval.tree = stype;

            }
        }

        catch (RecognitionException re) {
            errorHandler.reportError(this, re);
            errorHandler.recover(this, input,re);
            retval.tree = (PythonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "print_stmt"

    public static class printlist_return extends ParserRuleReturnScope {
        public boolean newline;
        public List elts;
        PythonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "printlist"
    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:734:1: printlist returns [boolean newline, List elts] : ( ( test[null] COMMA )=>t+= test[expr_contextType.Load] ( options {k=2; } : COMMA t+= test[expr_contextType.Load] )* (trailcomma= COMMA )? | t+= test[expr_contextType.Load] );
    public final PythonParser.printlist_return printlist() throws RecognitionException {
        PythonParser.printlist_return retval = new PythonParser.printlist_return();
        retval.start = input.LT(1);

        PythonTree root_0 = null;

        Token trailcomma=null;
        Token COMMA84=null;
        List list_t=null;
        PythonParser.test_return t = null;
         t = null;
        PythonTree trailcomma_tree=null;
        PythonTree COMMA84_tree=null;

        try {
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:736:5: ( ( test[null] COMMA )=>t+= test[expr_contextType.Load] ( options {k=2; } : COMMA t+= test[expr_contextType.Load] )* (trailcomma= COMMA )? | t+= test[expr_contextType.Load] )
            int alt39=2;
            alt39 = dfa39.predict(input);
            switch (alt39) {
                case 1 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:736:7: ( test[null] COMMA )=>t+= test[expr_contextType.Load] ( options {k=2; } : COMMA t+= test[expr_contextType.Load] )* (trailcomma= COMMA )?
                    {
                    root_0 = (PythonTree)adaptor.nil();

                    pushFollow(FOLLOW_test_in_printlist2291);
                    t=test(expr_contextType.Load);

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, t.getTree());
                    if (list_t==null) list_t=new ArrayList();
                    list_t.add(t.getTree());

                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:737:39: ( options {k=2; } : COMMA t+= test[expr_contextType.Load] )*
                    loop37:
                    do {
                        int alt37=2;
                        alt37 = dfa37.predict(input);
                        switch (alt37) {
                    	case 1 :
                    	    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:737:56: COMMA t+= test[expr_contextType.Load]
                    	    {
                    	    COMMA84=(Token)match(input,COMMA,FOLLOW_COMMA_in_printlist2303); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    COMMA84_tree = (PythonTree)adaptor.create(COMMA84);
                    	    adaptor.addChild(root_0, COMMA84_tree);
                    	    }
                    	    pushFollow(FOLLOW_test_in_printlist2307);
                    	    t=test(expr_contextType.Load);

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, t.getTree());
                    	    if (list_t==null) list_t=new ArrayList();
                    	    list_t.add(t.getTree());


                    	    }
                    	    break;

                    	default :
                    	    break loop37;
                        }
                    } while (true);

                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:737:95: (trailcomma= COMMA )?
                    int alt38=2;
                    int LA38_0 = input.LA(1);

                    if ( (LA38_0==COMMA) ) {
                        alt38=1;
                    }
                    switch (alt38) {
                        case 1 :
                            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:737:96: trailcomma= COMMA
                            {
                            trailcomma=(Token)match(input,COMMA,FOLLOW_COMMA_in_printlist2315); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            trailcomma_tree = (PythonTree)adaptor.create(trailcomma);
                            adaptor.addChild(root_0, trailcomma_tree);
                            }

                            }
                            break;

                    }

                    if ( state.backtracking==0 ) {

                                 retval.elts =list_t;
                                 if (trailcomma == null) {
                                     retval.newline = true;
                                 } else {
                                     retval.newline = false;
                                 }
                             
                    }

                    }
                    break;
                case 2 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:746:7: t+= test[expr_contextType.Load]
                    {
                    root_0 = (PythonTree)adaptor.nil();

                    pushFollow(FOLLOW_test_in_printlist2336);
                    t=test(expr_contextType.Load);

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, t.getTree());
                    if (list_t==null) list_t=new ArrayList();
                    list_t.add(t.getTree());

                    if ( state.backtracking==0 ) {

                                retval.elts =list_t;
                                retval.newline = true;
                            
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (PythonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException re) {
            errorHandler.reportError(this, re);
            errorHandler.recover(this, input,re);
            retval.tree = (PythonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "printlist"

    public static class printlist2_return extends ParserRuleReturnScope {
        public boolean newline;
        public List elts;
        PythonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "printlist2"
    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:755:1: printlist2 returns [boolean newline, List elts] : ( ( test[null] COMMA test[null] )=>t+= test[expr_contextType.Load] ( options {k=2; } : COMMA t+= test[expr_contextType.Load] )* (trailcomma= COMMA )? | t+= test[expr_contextType.Load] );
    public final PythonParser.printlist2_return printlist2() throws RecognitionException {
        PythonParser.printlist2_return retval = new PythonParser.printlist2_return();
        retval.start = input.LT(1);

        PythonTree root_0 = null;

        Token trailcomma=null;
        Token COMMA85=null;
        List list_t=null;
        PythonParser.test_return t = null;
         t = null;
        PythonTree trailcomma_tree=null;
        PythonTree COMMA85_tree=null;

        try {
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:757:5: ( ( test[null] COMMA test[null] )=>t+= test[expr_contextType.Load] ( options {k=2; } : COMMA t+= test[expr_contextType.Load] )* (trailcomma= COMMA )? | t+= test[expr_contextType.Load] )
            int alt42=2;
            alt42 = dfa42.predict(input);
            switch (alt42) {
                case 1 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:757:7: ( test[null] COMMA test[null] )=>t+= test[expr_contextType.Load] ( options {k=2; } : COMMA t+= test[expr_contextType.Load] )* (trailcomma= COMMA )?
                    {
                    root_0 = (PythonTree)adaptor.nil();

                    pushFollow(FOLLOW_test_in_printlist22393);
                    t=test(expr_contextType.Load);

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, t.getTree());
                    if (list_t==null) list_t=new ArrayList();
                    list_t.add(t.getTree());

                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:758:39: ( options {k=2; } : COMMA t+= test[expr_contextType.Load] )*
                    loop40:
                    do {
                        int alt40=2;
                        alt40 = dfa40.predict(input);
                        switch (alt40) {
                    	case 1 :
                    	    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:758:56: COMMA t+= test[expr_contextType.Load]
                    	    {
                    	    COMMA85=(Token)match(input,COMMA,FOLLOW_COMMA_in_printlist22405); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    COMMA85_tree = (PythonTree)adaptor.create(COMMA85);
                    	    adaptor.addChild(root_0, COMMA85_tree);
                    	    }
                    	    pushFollow(FOLLOW_test_in_printlist22409);
                    	    t=test(expr_contextType.Load);

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, t.getTree());
                    	    if (list_t==null) list_t=new ArrayList();
                    	    list_t.add(t.getTree());


                    	    }
                    	    break;

                    	default :
                    	    break loop40;
                        }
                    } while (true);

                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:758:95: (trailcomma= COMMA )?
                    int alt41=2;
                    int LA41_0 = input.LA(1);

                    if ( (LA41_0==COMMA) ) {
                        alt41=1;
                    }
                    switch (alt41) {
                        case 1 :
                            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:758:96: trailcomma= COMMA
                            {
                            trailcomma=(Token)match(input,COMMA,FOLLOW_COMMA_in_printlist22417); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            trailcomma_tree = (PythonTree)adaptor.create(trailcomma);
                            adaptor.addChild(root_0, trailcomma_tree);
                            }

                            }
                            break;

                    }

                    if ( state.backtracking==0 ) {
                       retval.elts =list_t;
                                 if (trailcomma == null) {
                                     retval.newline = true;
                                 } else {
                                     retval.newline = false;
                                 }
                             
                    }

                    }
                    break;
                case 2 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:766:7: t+= test[expr_contextType.Load]
                    {
                    root_0 = (PythonTree)adaptor.nil();

                    pushFollow(FOLLOW_test_in_printlist22438);
                    t=test(expr_contextType.Load);

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, t.getTree());
                    if (list_t==null) list_t=new ArrayList();
                    list_t.add(t.getTree());

                    if ( state.backtracking==0 ) {

                                retval.elts =list_t;
                                retval.newline = true;
                            
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (PythonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException re) {
            errorHandler.reportError(this, re);
            errorHandler.recover(this, input,re);
            retval.tree = (PythonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "printlist2"

    public static class del_stmt_return extends ParserRuleReturnScope {
        PythonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "del_stmt"
    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:774:1: del_stmt : DELETE del_list ;
    public final PythonParser.del_stmt_return del_stmt() throws RecognitionException {
        PythonParser.del_stmt_return retval = new PythonParser.del_stmt_return();
        retval.start = input.LT(1);

        PythonTree root_0 = null;

        Token DELETE86=null;
        PythonParser.del_list_return del_list87 = null;


        PythonTree DELETE86_tree=null;


            stmt stype = null;

        try {
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:781:5: ( DELETE del_list )
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:781:7: DELETE del_list
            {
            root_0 = (PythonTree)adaptor.nil();

            DELETE86=(Token)match(input,DELETE,FOLLOW_DELETE_in_del_stmt2475); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            DELETE86_tree = (PythonTree)adaptor.create(DELETE86);
            adaptor.addChild(root_0, DELETE86_tree);
            }
            pushFollow(FOLLOW_del_list_in_del_stmt2477);
            del_list87=del_list();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, del_list87.getTree());
            if ( state.backtracking==0 ) {

                        stype = new Delete(DELETE86, (del_list87!=null?del_list87.etypes:null));
                    
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (PythonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {

                 retval.tree = stype;

            }
        }

        catch (RecognitionException re) {
            errorHandler.reportError(this, re);
            errorHandler.recover(this, input,re);
            retval.tree = (PythonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "del_stmt"

    public static class pass_stmt_return extends ParserRuleReturnScope {
        PythonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pass_stmt"
    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:788:1: pass_stmt : PASS ;
    public final PythonParser.pass_stmt_return pass_stmt() throws RecognitionException {
        PythonParser.pass_stmt_return retval = new PythonParser.pass_stmt_return();
        retval.start = input.LT(1);

        PythonTree root_0 = null;

        Token PASS88=null;

        PythonTree PASS88_tree=null;


            stmt stype = null;

        try {
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:795:5: ( PASS )
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:795:7: PASS
            {
            root_0 = (PythonTree)adaptor.nil();

            PASS88=(Token)match(input,PASS,FOLLOW_PASS_in_pass_stmt2513); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            PASS88_tree = (PythonTree)adaptor.create(PASS88);
            adaptor.addChild(root_0, PASS88_tree);
            }
            if ( state.backtracking==0 ) {

                        stype = new Pass(PASS88);
                    
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (PythonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {

                 retval.tree = stype;

            }
        }

        catch (RecognitionException re) {
            errorHandler.reportError(this, re);
            errorHandler.recover(this, input,re);
            retval.tree = (PythonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "pass_stmt"

    public static class flow_stmt_return extends ParserRuleReturnScope {
        PythonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "flow_stmt"
    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:802:1: flow_stmt : ( break_stmt | continue_stmt | return_stmt | raise_stmt | yield_stmt );
    public final PythonParser.flow_stmt_return flow_stmt() throws RecognitionException {
        PythonParser.flow_stmt_return retval = new PythonParser.flow_stmt_return();
        retval.start = input.LT(1);

        PythonTree root_0 = null;

        PythonParser.break_stmt_return break_stmt89 = null;

        PythonParser.continue_stmt_return continue_stmt90 = null;

        PythonParser.return_stmt_return return_stmt91 = null;

        PythonParser.raise_stmt_return raise_stmt92 = null;

        PythonParser.yield_stmt_return yield_stmt93 = null;



        try {
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:803:5: ( break_stmt | continue_stmt | return_stmt | raise_stmt | yield_stmt )
            int alt43=5;
            switch ( input.LA(1) ) {
            case BREAK:
                {
                alt43=1;
                }
                break;
            case CONTINUE:
                {
                alt43=2;
                }
                break;
            case RETURN:
                {
                alt43=3;
                }
                break;
            case RAISE:
                {
                alt43=4;
                }
                break;
            case YIELD:
                {
                alt43=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 43, 0, input);

                throw nvae;
            }

            switch (alt43) {
                case 1 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:803:7: break_stmt
                    {
                    root_0 = (PythonTree)adaptor.nil();

                    pushFollow(FOLLOW_break_stmt_in_flow_stmt2539);
                    break_stmt89=break_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, break_stmt89.getTree());

                    }
                    break;
                case 2 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:804:7: continue_stmt
                    {
                    root_0 = (PythonTree)adaptor.nil();

                    pushFollow(FOLLOW_continue_stmt_in_flow_stmt2547);
                    continue_stmt90=continue_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, continue_stmt90.getTree());

                    }
                    break;
                case 3 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:805:7: return_stmt
                    {
                    root_0 = (PythonTree)adaptor.nil();

                    pushFollow(FOLLOW_return_stmt_in_flow_stmt2555);
                    return_stmt91=return_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, return_stmt91.getTree());

                    }
                    break;
                case 4 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:806:7: raise_stmt
                    {
                    root_0 = (PythonTree)adaptor.nil();

                    pushFollow(FOLLOW_raise_stmt_in_flow_stmt2563);
                    raise_stmt92=raise_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, raise_stmt92.getTree());

                    }
                    break;
                case 5 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:807:7: yield_stmt
                    {
                    root_0 = (PythonTree)adaptor.nil();

                    pushFollow(FOLLOW_yield_stmt_in_flow_stmt2571);
                    yield_stmt93=yield_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, yield_stmt93.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (PythonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException re) {
            errorHandler.reportError(this, re);
            errorHandler.recover(this, input,re);
            retval.tree = (PythonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "flow_stmt"

    public static class break_stmt_return extends ParserRuleReturnScope {
        PythonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "break_stmt"
    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:811:1: break_stmt : BREAK ;
    public final PythonParser.break_stmt_return break_stmt() throws RecognitionException {
        PythonParser.break_stmt_return retval = new PythonParser.break_stmt_return();
        retval.start = input.LT(1);

        PythonTree root_0 = null;

        Token BREAK94=null;

        PythonTree BREAK94_tree=null;


            stmt stype = null;

        try {
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:818:5: ( BREAK )
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:818:7: BREAK
            {
            root_0 = (PythonTree)adaptor.nil();

            BREAK94=(Token)match(input,BREAK,FOLLOW_BREAK_in_break_stmt2599); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            BREAK94_tree = (PythonTree)adaptor.create(BREAK94);
            adaptor.addChild(root_0, BREAK94_tree);
            }
            if ( state.backtracking==0 ) {

                        stype = new Break(BREAK94);
                    
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (PythonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {

                 retval.tree = stype;

            }
        }

        catch (RecognitionException re) {
            errorHandler.reportError(this, re);
            errorHandler.recover(this, input,re);
            retval.tree = (PythonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "break_stmt"

    public static class continue_stmt_return extends ParserRuleReturnScope {
        PythonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "continue_stmt"
    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:825:1: continue_stmt : CONTINUE ;
    public final PythonParser.continue_stmt_return continue_stmt() throws RecognitionException {
        PythonParser.continue_stmt_return retval = new PythonParser.continue_stmt_return();
        retval.start = input.LT(1);

        PythonTree root_0 = null;

        Token CONTINUE95=null;

        PythonTree CONTINUE95_tree=null;


            stmt stype = null;

        try {
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:832:5: ( CONTINUE )
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:832:7: CONTINUE
            {
            root_0 = (PythonTree)adaptor.nil();

            CONTINUE95=(Token)match(input,CONTINUE,FOLLOW_CONTINUE_in_continue_stmt2635); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            CONTINUE95_tree = (PythonTree)adaptor.create(CONTINUE95);
            adaptor.addChild(root_0, CONTINUE95_tree);
            }
            if ( state.backtracking==0 ) {

                        if (!suite_stack.isEmpty() && ((suite_scope)suite_stack.peek()).continueIllegal) {
                            errorHandler.error("'continue' not supported inside 'finally' clause", new PythonTree(((Token)retval.start)));
                        }
                        stype = new Continue(CONTINUE95);
                    
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (PythonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {

                 retval.tree = stype;

            }
        }

        catch (RecognitionException re) {
            errorHandler.reportError(this, re);
            errorHandler.recover(this, input,re);
            retval.tree = (PythonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "continue_stmt"

    public static class return_stmt_return extends ParserRuleReturnScope {
        PythonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "return_stmt"
    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:842:1: return_stmt : RETURN ( testlist[expr_contextType.Load] | ) ;
    public final PythonParser.return_stmt_return return_stmt() throws RecognitionException {
        PythonParser.return_stmt_return retval = new PythonParser.return_stmt_return();
        retval.start = input.LT(1);

        PythonTree root_0 = null;

        Token RETURN96=null;
        PythonParser.testlist_return testlist97 = null;


        PythonTree RETURN96_tree=null;


            stmt stype = null;

        try {
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:849:5: ( RETURN ( testlist[expr_contextType.Load] | ) )
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:849:7: RETURN ( testlist[expr_contextType.Load] | )
            {
            root_0 = (PythonTree)adaptor.nil();

            RETURN96=(Token)match(input,RETURN,FOLLOW_RETURN_in_return_stmt2671); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RETURN96_tree = (PythonTree)adaptor.create(RETURN96);
            adaptor.addChild(root_0, RETURN96_tree);
            }
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:850:7: ( testlist[expr_contextType.Load] | )
            int alt44=2;
            int LA44_0 = input.LA(1);

            if ( (LA44_0==NAME||(LA44_0>=LAMBDA && LA44_0<=NOT)||LA44_0==LPAREN||(LA44_0>=PLUS && LA44_0<=MINUS)||(LA44_0>=TILDE && LA44_0<=LBRACK)||LA44_0==LCURLY||(LA44_0>=BACKQUOTE && LA44_0<=PRO)||LA44_0==PRO_SELECT||LA44_0==ASP||LA44_0==ASP_SELECT||LA44_0==ASP_PATH||(LA44_0>=SELECT && LA44_0<=RDFSELECT)||LA44_0==CAPSFROM||(LA44_0>=MODIFY && LA44_0<=SUBCLASS)) ) {
                alt44=1;
            }
            else if ( (LA44_0==NEWLINE||LA44_0==SEMI) ) {
                alt44=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 44, 0, input);

                throw nvae;
            }
            switch (alt44) {
                case 1 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:850:8: testlist[expr_contextType.Load]
                    {
                    pushFollow(FOLLOW_testlist_in_return_stmt2680);
                    testlist97=testlist(expr_contextType.Load);

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, testlist97.getTree());
                    if ( state.backtracking==0 ) {

                                 stype = new Return(RETURN96, actions.castExpr((testlist97!=null?((PythonTree)testlist97.tree):null)));
                             
                    }

                    }
                    break;
                case 2 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:855:8: 
                    {
                    if ( state.backtracking==0 ) {

                                 stype = new Return(RETURN96, null);
                             
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (PythonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {

                 retval.tree = stype;

            }
        }

        catch (RecognitionException re) {
            errorHandler.reportError(this, re);
            errorHandler.recover(this, input,re);
            retval.tree = (PythonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "return_stmt"

    public static class yield_stmt_return extends ParserRuleReturnScope {
        PythonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "yield_stmt"
    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:862:1: yield_stmt : yield_expr ;
    public final PythonParser.yield_stmt_return yield_stmt() throws RecognitionException {
        PythonParser.yield_stmt_return retval = new PythonParser.yield_stmt_return();
        retval.start = input.LT(1);

        PythonTree root_0 = null;

        PythonParser.yield_expr_return yield_expr98 = null;




            stmt stype = null;

        try {
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:869:5: ( yield_expr )
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:869:7: yield_expr
            {
            root_0 = (PythonTree)adaptor.nil();

            pushFollow(FOLLOW_yield_expr_in_yield_stmt2745);
            yield_expr98=yield_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, yield_expr98.getTree());
            if ( state.backtracking==0 ) {

                      stype = new Expr((yield_expr98!=null?((Token)yield_expr98.start):null), actions.castExpr((yield_expr98!=null?yield_expr98.etype:null)));
                    
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (PythonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {

                 retval.tree = stype;

            }
        }

        catch (RecognitionException re) {
            errorHandler.reportError(this, re);
            errorHandler.recover(this, input,re);
            retval.tree = (PythonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "yield_stmt"

    public static class raise_stmt_return extends ParserRuleReturnScope {
        PythonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "raise_stmt"
    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:876:1: raise_stmt : RAISE (t1= test[expr_contextType.Load] ( COMMA t2= test[expr_contextType.Load] ( COMMA t3= test[expr_contextType.Load] )? )? )? ;
    public final PythonParser.raise_stmt_return raise_stmt() throws RecognitionException {
        PythonParser.raise_stmt_return retval = new PythonParser.raise_stmt_return();
        retval.start = input.LT(1);

        PythonTree root_0 = null;

        Token RAISE99=null;
        Token COMMA100=null;
        Token COMMA101=null;
        PythonParser.test_return t1 = null;

        PythonParser.test_return t2 = null;

        PythonParser.test_return t3 = null;


        PythonTree RAISE99_tree=null;
        PythonTree COMMA100_tree=null;
        PythonTree COMMA101_tree=null;


            stmt stype = null;

        try {
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:883:5: ( RAISE (t1= test[expr_contextType.Load] ( COMMA t2= test[expr_contextType.Load] ( COMMA t3= test[expr_contextType.Load] )? )? )? )
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:883:7: RAISE (t1= test[expr_contextType.Load] ( COMMA t2= test[expr_contextType.Load] ( COMMA t3= test[expr_contextType.Load] )? )? )?
            {
            root_0 = (PythonTree)adaptor.nil();

            RAISE99=(Token)match(input,RAISE,FOLLOW_RAISE_in_raise_stmt2781); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RAISE99_tree = (PythonTree)adaptor.create(RAISE99);
            adaptor.addChild(root_0, RAISE99_tree);
            }
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:883:13: (t1= test[expr_contextType.Load] ( COMMA t2= test[expr_contextType.Load] ( COMMA t3= test[expr_contextType.Load] )? )? )?
            int alt47=2;
            int LA47_0 = input.LA(1);

            if ( (LA47_0==NAME||(LA47_0>=LAMBDA && LA47_0<=NOT)||LA47_0==LPAREN||(LA47_0>=PLUS && LA47_0<=MINUS)||(LA47_0>=TILDE && LA47_0<=LBRACK)||LA47_0==LCURLY||(LA47_0>=BACKQUOTE && LA47_0<=PRO)||LA47_0==PRO_SELECT||LA47_0==ASP||LA47_0==ASP_SELECT||LA47_0==ASP_PATH||(LA47_0>=SELECT && LA47_0<=RDFSELECT)||LA47_0==CAPSFROM||(LA47_0>=MODIFY && LA47_0<=SUBCLASS)) ) {
                alt47=1;
            }
            switch (alt47) {
                case 1 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:883:14: t1= test[expr_contextType.Load] ( COMMA t2= test[expr_contextType.Load] ( COMMA t3= test[expr_contextType.Load] )? )?
                    {
                    pushFollow(FOLLOW_test_in_raise_stmt2786);
                    t1=test(expr_contextType.Load);

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, t1.getTree());
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:883:45: ( COMMA t2= test[expr_contextType.Load] ( COMMA t3= test[expr_contextType.Load] )? )?
                    int alt46=2;
                    int LA46_0 = input.LA(1);

                    if ( (LA46_0==COMMA) ) {
                        alt46=1;
                    }
                    switch (alt46) {
                        case 1 :
                            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:883:46: COMMA t2= test[expr_contextType.Load] ( COMMA t3= test[expr_contextType.Load] )?
                            {
                            COMMA100=(Token)match(input,COMMA,FOLLOW_COMMA_in_raise_stmt2790); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            COMMA100_tree = (PythonTree)adaptor.create(COMMA100);
                            adaptor.addChild(root_0, COMMA100_tree);
                            }
                            pushFollow(FOLLOW_test_in_raise_stmt2794);
                            t2=test(expr_contextType.Load);

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, t2.getTree());
                            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:884:9: ( COMMA t3= test[expr_contextType.Load] )?
                            int alt45=2;
                            int LA45_0 = input.LA(1);

                            if ( (LA45_0==COMMA) ) {
                                alt45=1;
                            }
                            switch (alt45) {
                                case 1 :
                                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:884:10: COMMA t3= test[expr_contextType.Load]
                                    {
                                    COMMA101=(Token)match(input,COMMA,FOLLOW_COMMA_in_raise_stmt2806); if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                    COMMA101_tree = (PythonTree)adaptor.create(COMMA101);
                                    adaptor.addChild(root_0, COMMA101_tree);
                                    }
                                    pushFollow(FOLLOW_test_in_raise_stmt2810);
                                    t3=test(expr_contextType.Load);

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) adaptor.addChild(root_0, t3.getTree());

                                    }
                                    break;

                            }


                            }
                            break;

                    }


                    }
                    break;

            }

            if ( state.backtracking==0 ) {

                        stype = new Raise(RAISE99, actions.castExpr((t1!=null?((PythonTree)t1.tree):null)), actions.castExpr((t2!=null?((PythonTree)t2.tree):null)), actions.castExpr((t3!=null?((PythonTree)t3.tree):null)));
                    
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (PythonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {

                 retval.tree = stype;

            }
        }

        catch (RecognitionException re) {
            errorHandler.reportError(this, re);
            errorHandler.recover(this, input,re);
            retval.tree = (PythonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "raise_stmt"

    public static class import_stmt_return extends ParserRuleReturnScope {
        PythonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "import_stmt"
    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:891:1: import_stmt : ( import_name | import_from );
    public final PythonParser.import_stmt_return import_stmt() throws RecognitionException {
        PythonParser.import_stmt_return retval = new PythonParser.import_stmt_return();
        retval.start = input.LT(1);

        PythonTree root_0 = null;

        PythonParser.import_name_return import_name102 = null;

        PythonParser.import_from_return import_from103 = null;



        try {
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:892:5: ( import_name | import_from )
            int alt48=2;
            int LA48_0 = input.LA(1);

            if ( (LA48_0==IMPORT) ) {
                alt48=1;
            }
            else if ( (LA48_0==FROM) ) {
                alt48=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 48, 0, input);

                throw nvae;
            }
            switch (alt48) {
                case 1 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:892:7: import_name
                    {
                    root_0 = (PythonTree)adaptor.nil();

                    pushFollow(FOLLOW_import_name_in_import_stmt2843);
                    import_name102=import_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, import_name102.getTree());

                    }
                    break;
                case 2 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:893:7: import_from
                    {
                    root_0 = (PythonTree)adaptor.nil();

                    pushFollow(FOLLOW_import_from_in_import_stmt2851);
                    import_from103=import_from();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, import_from103.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (PythonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException re) {
            errorHandler.reportError(this, re);
            errorHandler.recover(this, input,re);
            retval.tree = (PythonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "import_stmt"

    public static class import_name_return extends ParserRuleReturnScope {
        PythonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "import_name"
    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:897:1: import_name : IMPORT dotted_as_names ;
    public final PythonParser.import_name_return import_name() throws RecognitionException {
        PythonParser.import_name_return retval = new PythonParser.import_name_return();
        retval.start = input.LT(1);

        PythonTree root_0 = null;

        Token IMPORT104=null;
        PythonParser.dotted_as_names_return dotted_as_names105 = null;


        PythonTree IMPORT104_tree=null;


            stmt stype = null;

        try {
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:904:5: ( IMPORT dotted_as_names )
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:904:7: IMPORT dotted_as_names
            {
            root_0 = (PythonTree)adaptor.nil();

            IMPORT104=(Token)match(input,IMPORT,FOLLOW_IMPORT_in_import_name2879); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            IMPORT104_tree = (PythonTree)adaptor.create(IMPORT104);
            adaptor.addChild(root_0, IMPORT104_tree);
            }
            pushFollow(FOLLOW_dotted_as_names_in_import_name2881);
            dotted_as_names105=dotted_as_names();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, dotted_as_names105.getTree());
            if ( state.backtracking==0 ) {

                        stype = new Import(IMPORT104, (dotted_as_names105!=null?dotted_as_names105.atypes:null));
                    
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (PythonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {

                 retval.tree = stype;

            }
        }

        catch (RecognitionException re) {
            errorHandler.reportError(this, re);
            errorHandler.recover(this, input,re);
            retval.tree = (PythonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "import_name"

    public static class import_from_return extends ParserRuleReturnScope {
        PythonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "import_from"
    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:912:1: import_from : FROM ( (d+= DOT )* dotted_name | (d+= DOT )+ ) IMPORT ( STAR | i1= import_as_names | LPAREN i2= import_as_names ( COMMA )? RPAREN ) ;
    public final PythonParser.import_from_return import_from() throws RecognitionException {
        PythonParser.import_from_return retval = new PythonParser.import_from_return();
        retval.start = input.LT(1);

        PythonTree root_0 = null;

        Token FROM106=null;
        Token IMPORT108=null;
        Token STAR109=null;
        Token LPAREN110=null;
        Token COMMA111=null;
        Token RPAREN112=null;
        Token d=null;
        List list_d=null;
        PythonParser.import_as_names_return i1 = null;

        PythonParser.import_as_names_return i2 = null;

        PythonParser.dotted_name_return dotted_name107 = null;


        PythonTree FROM106_tree=null;
        PythonTree IMPORT108_tree=null;
        PythonTree STAR109_tree=null;
        PythonTree LPAREN110_tree=null;
        PythonTree COMMA111_tree=null;
        PythonTree RPAREN112_tree=null;
        PythonTree d_tree=null;


            stmt stype = null;

        try {
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:919:5: ( FROM ( (d+= DOT )* dotted_name | (d+= DOT )+ ) IMPORT ( STAR | i1= import_as_names | LPAREN i2= import_as_names ( COMMA )? RPAREN ) )
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:919:7: FROM ( (d+= DOT )* dotted_name | (d+= DOT )+ ) IMPORT ( STAR | i1= import_as_names | LPAREN i2= import_as_names ( COMMA )? RPAREN )
            {
            root_0 = (PythonTree)adaptor.nil();

            FROM106=(Token)match(input,FROM,FOLLOW_FROM_in_import_from2918); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            FROM106_tree = (PythonTree)adaptor.create(FROM106);
            adaptor.addChild(root_0, FROM106_tree);
            }
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:919:12: ( (d+= DOT )* dotted_name | (d+= DOT )+ )
            int alt51=2;
            alt51 = dfa51.predict(input);
            switch (alt51) {
                case 1 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:919:13: (d+= DOT )* dotted_name
                    {
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:919:14: (d+= DOT )*
                    loop49:
                    do {
                        int alt49=2;
                        int LA49_0 = input.LA(1);

                        if ( (LA49_0==DOT) ) {
                            alt49=1;
                        }


                        switch (alt49) {
                    	case 1 :
                    	    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:919:14: d+= DOT
                    	    {
                    	    d=(Token)match(input,DOT,FOLLOW_DOT_in_import_from2923); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    d_tree = (PythonTree)adaptor.create(d);
                    	    adaptor.addChild(root_0, d_tree);
                    	    }
                    	    if (list_d==null) list_d=new ArrayList();
                    	    list_d.add(d);


                    	    }
                    	    break;

                    	default :
                    	    break loop49;
                        }
                    } while (true);

                    pushFollow(FOLLOW_dotted_name_in_import_from2926);
                    dotted_name107=dotted_name();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dotted_name107.getTree());

                    }
                    break;
                case 2 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:919:35: (d+= DOT )+
                    {
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:919:36: (d+= DOT )+
                    int cnt50=0;
                    loop50:
                    do {
                        int alt50=2;
                        int LA50_0 = input.LA(1);

                        if ( (LA50_0==DOT) ) {
                            alt50=1;
                        }


                        switch (alt50) {
                    	case 1 :
                    	    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:919:36: d+= DOT
                    	    {
                    	    d=(Token)match(input,DOT,FOLLOW_DOT_in_import_from2932); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    d_tree = (PythonTree)adaptor.create(d);
                    	    adaptor.addChild(root_0, d_tree);
                    	    }
                    	    if (list_d==null) list_d=new ArrayList();
                    	    list_d.add(d);


                    	    }
                    	    break;

                    	default :
                    	    if ( cnt50 >= 1 ) break loop50;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(50, input);
                                throw eee;
                        }
                        cnt50++;
                    } while (true);


                    }
                    break;

            }

            IMPORT108=(Token)match(input,IMPORT,FOLLOW_IMPORT_in_import_from2936); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            IMPORT108_tree = (PythonTree)adaptor.create(IMPORT108);
            adaptor.addChild(root_0, IMPORT108_tree);
            }
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:920:9: ( STAR | i1= import_as_names | LPAREN i2= import_as_names ( COMMA )? RPAREN )
            int alt53=3;
            switch ( input.LA(1) ) {
            case STAR:
                {
                alt53=1;
                }
                break;
            case NAME:
                {
                alt53=2;
                }
                break;
            case LPAREN:
                {
                alt53=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 53, 0, input);

                throw nvae;
            }

            switch (alt53) {
                case 1 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:920:10: STAR
                    {
                    STAR109=(Token)match(input,STAR,FOLLOW_STAR_in_import_from2947); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STAR109_tree = (PythonTree)adaptor.create(STAR109);
                    adaptor.addChild(root_0, STAR109_tree);
                    }
                    if ( state.backtracking==0 ) {

                                   stype = new ImportFrom(FROM106, actions.makeFromText(list_d, (dotted_name107!=null?dotted_name107.names:null)),
                                       actions.makeModuleNameNode(list_d, (dotted_name107!=null?dotted_name107.names:null)),
                                       actions.makeStarAlias(STAR109), actions.makeLevel(list_d));
                               
                    }

                    }
                    break;
                case 2 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:926:11: i1= import_as_names
                    {
                    pushFollow(FOLLOW_import_as_names_in_import_from2972);
                    i1=import_as_names();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, i1.getTree());
                    if ( state.backtracking==0 ) {

                                   stype = new ImportFrom(FROM106, actions.makeFromText(list_d, (dotted_name107!=null?dotted_name107.names:null)),
                                       actions.makeModuleNameNode(list_d, (dotted_name107!=null?dotted_name107.names:null)),
                                       actions.makeAliases((i1!=null?i1.atypes:null)), actions.makeLevel(list_d));
                               
                    }

                    }
                    break;
                case 3 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:932:11: LPAREN i2= import_as_names ( COMMA )? RPAREN
                    {
                    LPAREN110=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_import_from2995); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LPAREN110_tree = (PythonTree)adaptor.create(LPAREN110);
                    adaptor.addChild(root_0, LPAREN110_tree);
                    }
                    pushFollow(FOLLOW_import_as_names_in_import_from2999);
                    i2=import_as_names();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, i2.getTree());
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:932:37: ( COMMA )?
                    int alt52=2;
                    int LA52_0 = input.LA(1);

                    if ( (LA52_0==COMMA) ) {
                        alt52=1;
                    }
                    switch (alt52) {
                        case 1 :
                            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:932:37: COMMA
                            {
                            COMMA111=(Token)match(input,COMMA,FOLLOW_COMMA_in_import_from3001); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            COMMA111_tree = (PythonTree)adaptor.create(COMMA111);
                            adaptor.addChild(root_0, COMMA111_tree);
                            }

                            }
                            break;

                    }

                    RPAREN112=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_import_from3004); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RPAREN112_tree = (PythonTree)adaptor.create(RPAREN112);
                    adaptor.addChild(root_0, RPAREN112_tree);
                    }
                    if ( state.backtracking==0 ) {

                                   stype = new ImportFrom(FROM106, actions.makeFromText(list_d, (dotted_name107!=null?dotted_name107.names:null)),
                                       actions.makeModuleNameNode(list_d, (dotted_name107!=null?dotted_name107.names:null)),
                                       actions.makeAliases((i2!=null?i2.atypes:null)), actions.makeLevel(list_d));
                               
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (PythonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {

                 retval.tree = stype;

            }
        }

        catch (RecognitionException re) {
            errorHandler.reportError(this, re);
            errorHandler.recover(this, input,re);
            retval.tree = (PythonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "import_from"

    public static class import_as_names_return extends ParserRuleReturnScope {
        public List<alias> atypes;
        PythonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "import_as_names"
    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:942:1: import_as_names returns [List<alias> atypes] : n+= import_as_name ( COMMA n+= import_as_name )* ;
    public final PythonParser.import_as_names_return import_as_names() throws RecognitionException {
        PythonParser.import_as_names_return retval = new PythonParser.import_as_names_return();
        retval.start = input.LT(1);

        PythonTree root_0 = null;

        Token COMMA113=null;
        List list_n=null;
        PythonParser.import_as_name_return n = null;
         n = null;
        PythonTree COMMA113_tree=null;

        try {
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:944:5: (n+= import_as_name ( COMMA n+= import_as_name )* )
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:944:7: n+= import_as_name ( COMMA n+= import_as_name )*
            {
            root_0 = (PythonTree)adaptor.nil();

            pushFollow(FOLLOW_import_as_name_in_import_as_names3053);
            n=import_as_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, n.getTree());
            if (list_n==null) list_n=new ArrayList();
            list_n.add(n.getTree());

            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:944:25: ( COMMA n+= import_as_name )*
            loop54:
            do {
                int alt54=2;
                int LA54_0 = input.LA(1);

                if ( (LA54_0==COMMA) ) {
                    int LA54_2 = input.LA(2);

                    if ( (LA54_2==NAME) ) {
                        alt54=1;
                    }


                }


                switch (alt54) {
            	case 1 :
            	    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:944:26: COMMA n+= import_as_name
            	    {
            	    COMMA113=(Token)match(input,COMMA,FOLLOW_COMMA_in_import_as_names3056); if (state.failed) return retval;
            	    pushFollow(FOLLOW_import_as_name_in_import_as_names3061);
            	    n=import_as_name();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, n.getTree());
            	    if (list_n==null) list_n=new ArrayList();
            	    list_n.add(n.getTree());


            	    }
            	    break;

            	default :
            	    break loop54;
                }
            } while (true);

            if ( state.backtracking==0 ) {

                      retval.atypes = list_n;
                  
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (PythonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException re) {
            errorHandler.reportError(this, re);
            errorHandler.recover(this, input,re);
            retval.tree = (PythonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "import_as_names"

    public static class import_as_name_return extends ParserRuleReturnScope {
        public alias atype;
        PythonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "import_as_name"
    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:951:1: import_as_name returns [alias atype] : name= NAME ( AS asname= NAME )? ;
    public final PythonParser.import_as_name_return import_as_name() throws RecognitionException {
        PythonParser.import_as_name_return retval = new PythonParser.import_as_name_return();
        retval.start = input.LT(1);

        PythonTree root_0 = null;

        Token name=null;
        Token asname=null;
        Token AS114=null;

        PythonTree name_tree=null;
        PythonTree asname_tree=null;
        PythonTree AS114_tree=null;

        try {
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:956:5: (name= NAME ( AS asname= NAME )? )
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:956:7: name= NAME ( AS asname= NAME )?
            {
            root_0 = (PythonTree)adaptor.nil();

            name=(Token)match(input,NAME,FOLLOW_NAME_in_import_as_name3102); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            name_tree = (PythonTree)adaptor.create(name);
            adaptor.addChild(root_0, name_tree);
            }
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:956:17: ( AS asname= NAME )?
            int alt55=2;
            int LA55_0 = input.LA(1);

            if ( (LA55_0==AS) ) {
                alt55=1;
            }
            switch (alt55) {
                case 1 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:956:18: AS asname= NAME
                    {
                    AS114=(Token)match(input,AS,FOLLOW_AS_in_import_as_name3105); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    AS114_tree = (PythonTree)adaptor.create(AS114);
                    adaptor.addChild(root_0, AS114_tree);
                    }
                    asname=(Token)match(input,NAME,FOLLOW_NAME_in_import_as_name3109); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    asname_tree = (PythonTree)adaptor.create(asname);
                    adaptor.addChild(root_0, asname_tree);
                    }

                    }
                    break;

            }

            if ( state.backtracking==0 ) {

                      retval.atype = new alias(actions.makeNameNode(name), actions.makeNameNode(asname));
                  
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (PythonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {

                  retval.tree = retval.atype;

            }
        }

        catch (RecognitionException re) {
            errorHandler.reportError(this, re);
            errorHandler.recover(this, input,re);
            retval.tree = (PythonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "import_as_name"

    public static class dotted_as_name_return extends ParserRuleReturnScope {
        public alias atype;
        PythonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dotted_as_name"
    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:964:1: dotted_as_name returns [alias atype] : dotted_name ( AS asname= NAME )? ;
    public final PythonParser.dotted_as_name_return dotted_as_name() throws RecognitionException {
        PythonParser.dotted_as_name_return retval = new PythonParser.dotted_as_name_return();
        retval.start = input.LT(1);

        PythonTree root_0 = null;

        Token asname=null;
        Token AS116=null;
        PythonParser.dotted_name_return dotted_name115 = null;


        PythonTree asname_tree=null;
        PythonTree AS116_tree=null;

        try {
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:969:5: ( dotted_name ( AS asname= NAME )? )
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:969:7: dotted_name ( AS asname= NAME )?
            {
            root_0 = (PythonTree)adaptor.nil();

            pushFollow(FOLLOW_dotted_name_in_dotted_as_name3149);
            dotted_name115=dotted_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, dotted_name115.getTree());
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:969:19: ( AS asname= NAME )?
            int alt56=2;
            int LA56_0 = input.LA(1);

            if ( (LA56_0==AS) ) {
                alt56=1;
            }
            switch (alt56) {
                case 1 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:969:20: AS asname= NAME
                    {
                    AS116=(Token)match(input,AS,FOLLOW_AS_in_dotted_as_name3152); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    AS116_tree = (PythonTree)adaptor.create(AS116);
                    adaptor.addChild(root_0, AS116_tree);
                    }
                    asname=(Token)match(input,NAME,FOLLOW_NAME_in_dotted_as_name3156); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    asname_tree = (PythonTree)adaptor.create(asname);
                    adaptor.addChild(root_0, asname_tree);
                    }

                    }
                    break;

            }

            if ( state.backtracking==0 ) {

                      retval.atype = new alias((dotted_name115!=null?dotted_name115.names:null), actions.makeNameNode(asname));
                  
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (PythonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {

                  retval.tree = retval.atype;

            }
        }

        catch (RecognitionException re) {
            errorHandler.reportError(this, re);
            errorHandler.recover(this, input,re);
            retval.tree = (PythonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "dotted_as_name"

    public static class dotted_as_names_return extends ParserRuleReturnScope {
        public List<alias> atypes;
        PythonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dotted_as_names"
    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:976:1: dotted_as_names returns [List<alias> atypes] : d+= dotted_as_name ( COMMA d+= dotted_as_name )* ;
    public final PythonParser.dotted_as_names_return dotted_as_names() throws RecognitionException {
        PythonParser.dotted_as_names_return retval = new PythonParser.dotted_as_names_return();
        retval.start = input.LT(1);

        PythonTree root_0 = null;

        Token COMMA117=null;
        List list_d=null;
        PythonParser.dotted_as_name_return d = null;
         d = null;
        PythonTree COMMA117_tree=null;

        try {
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:978:5: (d+= dotted_as_name ( COMMA d+= dotted_as_name )* )
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:978:7: d+= dotted_as_name ( COMMA d+= dotted_as_name )*
            {
            root_0 = (PythonTree)adaptor.nil();

            pushFollow(FOLLOW_dotted_as_name_in_dotted_as_names3192);
            d=dotted_as_name();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, d.getTree());
            if (list_d==null) list_d=new ArrayList();
            list_d.add(d.getTree());

            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:978:25: ( COMMA d+= dotted_as_name )*
            loop57:
            do {
                int alt57=2;
                int LA57_0 = input.LA(1);

                if ( (LA57_0==COMMA) ) {
                    alt57=1;
                }


                switch (alt57) {
            	case 1 :
            	    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:978:26: COMMA d+= dotted_as_name
            	    {
            	    COMMA117=(Token)match(input,COMMA,FOLLOW_COMMA_in_dotted_as_names3195); if (state.failed) return retval;
            	    pushFollow(FOLLOW_dotted_as_name_in_dotted_as_names3200);
            	    d=dotted_as_name();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, d.getTree());
            	    if (list_d==null) list_d=new ArrayList();
            	    list_d.add(d.getTree());


            	    }
            	    break;

            	default :
            	    break loop57;
                }
            } while (true);

            if ( state.backtracking==0 ) {

                      retval.atypes = list_d;
                  
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (PythonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException re) {
            errorHandler.reportError(this, re);
            errorHandler.recover(this, input,re);
            retval.tree = (PythonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "dotted_as_names"

    public static class dotted_name_return extends ParserRuleReturnScope {
        public List<Name> names;
        PythonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dotted_name"
    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:985:1: dotted_name returns [List<Name> names] : NAME ( DOT dn+= attr )* ;
    public final PythonParser.dotted_name_return dotted_name() throws RecognitionException {
        PythonParser.dotted_name_return retval = new PythonParser.dotted_name_return();
        retval.start = input.LT(1);

        PythonTree root_0 = null;

        Token NAME118=null;
        Token DOT119=null;
        List list_dn=null;
        PythonParser.attr_return dn = null;
         dn = null;
        PythonTree NAME118_tree=null;
        PythonTree DOT119_tree=null;

        try {
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:987:5: ( NAME ( DOT dn+= attr )* )
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:987:7: NAME ( DOT dn+= attr )*
            {
            root_0 = (PythonTree)adaptor.nil();

            NAME118=(Token)match(input,NAME,FOLLOW_NAME_in_dotted_name3234); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            NAME118_tree = (PythonTree)adaptor.create(NAME118);
            adaptor.addChild(root_0, NAME118_tree);
            }
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:987:12: ( DOT dn+= attr )*
            loop58:
            do {
                int alt58=2;
                int LA58_0 = input.LA(1);

                if ( (LA58_0==DOT) ) {
                    alt58=1;
                }


                switch (alt58) {
            	case 1 :
            	    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:987:13: DOT dn+= attr
            	    {
            	    DOT119=(Token)match(input,DOT,FOLLOW_DOT_in_dotted_name3237); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    DOT119_tree = (PythonTree)adaptor.create(DOT119);
            	    adaptor.addChild(root_0, DOT119_tree);
            	    }
            	    pushFollow(FOLLOW_attr_in_dotted_name3241);
            	    dn=attr();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, dn.getTree());
            	    if (list_dn==null) list_dn=new ArrayList();
            	    list_dn.add(dn.getTree());


            	    }
            	    break;

            	default :
            	    break loop58;
                }
            } while (true);

            if ( state.backtracking==0 ) {

                      retval.names = actions.makeDottedName(NAME118, list_dn);
                  
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (PythonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException re) {
            errorHandler.reportError(this, re);
            errorHandler.recover(this, input,re);
            retval.tree = (PythonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "dotted_name"

    public static class global_stmt_return extends ParserRuleReturnScope {
        PythonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "global_stmt"
    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:994:1: global_stmt : GLOBAL n+= NAME ( COMMA n+= NAME )* ;
    public final PythonParser.global_stmt_return global_stmt() throws RecognitionException {
        PythonParser.global_stmt_return retval = new PythonParser.global_stmt_return();
        retval.start = input.LT(1);

        PythonTree root_0 = null;

        Token GLOBAL120=null;
        Token COMMA121=null;
        Token n=null;
        List list_n=null;

        PythonTree GLOBAL120_tree=null;
        PythonTree COMMA121_tree=null;
        PythonTree n_tree=null;


            stmt stype = null;

        try {
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1001:5: ( GLOBAL n+= NAME ( COMMA n+= NAME )* )
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1001:7: GLOBAL n+= NAME ( COMMA n+= NAME )*
            {
            root_0 = (PythonTree)adaptor.nil();

            GLOBAL120=(Token)match(input,GLOBAL,FOLLOW_GLOBAL_in_global_stmt3277); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            GLOBAL120_tree = (PythonTree)adaptor.create(GLOBAL120);
            adaptor.addChild(root_0, GLOBAL120_tree);
            }
            n=(Token)match(input,NAME,FOLLOW_NAME_in_global_stmt3281); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            n_tree = (PythonTree)adaptor.create(n);
            adaptor.addChild(root_0, n_tree);
            }
            if (list_n==null) list_n=new ArrayList();
            list_n.add(n);

            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1001:22: ( COMMA n+= NAME )*
            loop59:
            do {
                int alt59=2;
                int LA59_0 = input.LA(1);

                if ( (LA59_0==COMMA) ) {
                    alt59=1;
                }


                switch (alt59) {
            	case 1 :
            	    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1001:23: COMMA n+= NAME
            	    {
            	    COMMA121=(Token)match(input,COMMA,FOLLOW_COMMA_in_global_stmt3284); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    COMMA121_tree = (PythonTree)adaptor.create(COMMA121);
            	    adaptor.addChild(root_0, COMMA121_tree);
            	    }
            	    n=(Token)match(input,NAME,FOLLOW_NAME_in_global_stmt3288); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    n_tree = (PythonTree)adaptor.create(n);
            	    adaptor.addChild(root_0, n_tree);
            	    }
            	    if (list_n==null) list_n=new ArrayList();
            	    list_n.add(n);


            	    }
            	    break;

            	default :
            	    break loop59;
                }
            } while (true);

            if ( state.backtracking==0 ) {

                        stype = new Global(GLOBAL120, actions.makeNames(list_n), actions.makeNameNodes(list_n));
                    
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (PythonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {

                 retval.tree = stype;

            }
        }

        catch (RecognitionException re) {
            errorHandler.reportError(this, re);
            errorHandler.recover(this, input,re);
            retval.tree = (PythonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "global_stmt"

    public static class exec_stmt_return extends ParserRuleReturnScope {
        PythonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "exec_stmt"
    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1008:1: exec_stmt : EXEC expr[expr_contextType.Load] ( IN t1= test[expr_contextType.Load] ( COMMA t2= test[expr_contextType.Load] )? )? ;
    public final PythonParser.exec_stmt_return exec_stmt() throws RecognitionException {
        PythonParser.exec_stmt_return retval = new PythonParser.exec_stmt_return();
        retval.start = input.LT(1);

        PythonTree root_0 = null;

        Token EXEC122=null;
        Token IN124=null;
        Token COMMA125=null;
        PythonParser.test_return t1 = null;

        PythonParser.test_return t2 = null;

        PythonParser.expr_return expr123 = null;


        PythonTree EXEC122_tree=null;
        PythonTree IN124_tree=null;
        PythonTree COMMA125_tree=null;


            stmt stype = null;

        try {
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1015:5: ( EXEC expr[expr_contextType.Load] ( IN t1= test[expr_contextType.Load] ( COMMA t2= test[expr_contextType.Load] )? )? )
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1015:7: EXEC expr[expr_contextType.Load] ( IN t1= test[expr_contextType.Load] ( COMMA t2= test[expr_contextType.Load] )? )?
            {
            root_0 = (PythonTree)adaptor.nil();

            EXEC122=(Token)match(input,EXEC,FOLLOW_EXEC_in_exec_stmt3326); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            EXEC122_tree = (PythonTree)adaptor.create(EXEC122);
            adaptor.addChild(root_0, EXEC122_tree);
            }
            pushFollow(FOLLOW_expr_in_exec_stmt3328);
            expr123=expr(expr_contextType.Load);

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expr123.getTree());
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1015:40: ( IN t1= test[expr_contextType.Load] ( COMMA t2= test[expr_contextType.Load] )? )?
            int alt61=2;
            int LA61_0 = input.LA(1);

            if ( (LA61_0==IN) ) {
                alt61=1;
            }
            switch (alt61) {
                case 1 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1015:41: IN t1= test[expr_contextType.Load] ( COMMA t2= test[expr_contextType.Load] )?
                    {
                    IN124=(Token)match(input,IN,FOLLOW_IN_in_exec_stmt3332); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    IN124_tree = (PythonTree)adaptor.create(IN124);
                    adaptor.addChild(root_0, IN124_tree);
                    }
                    pushFollow(FOLLOW_test_in_exec_stmt3336);
                    t1=test(expr_contextType.Load);

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, t1.getTree());
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1015:75: ( COMMA t2= test[expr_contextType.Load] )?
                    int alt60=2;
                    int LA60_0 = input.LA(1);

                    if ( (LA60_0==COMMA) ) {
                        alt60=1;
                    }
                    switch (alt60) {
                        case 1 :
                            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1015:76: COMMA t2= test[expr_contextType.Load]
                            {
                            COMMA125=(Token)match(input,COMMA,FOLLOW_COMMA_in_exec_stmt3340); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            COMMA125_tree = (PythonTree)adaptor.create(COMMA125);
                            adaptor.addChild(root_0, COMMA125_tree);
                            }
                            pushFollow(FOLLOW_test_in_exec_stmt3344);
                            t2=test(expr_contextType.Load);

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, t2.getTree());

                            }
                            break;

                    }


                    }
                    break;

            }

            if ( state.backtracking==0 ) {

                       stype = new Exec(EXEC122, actions.castExpr((expr123!=null?((PythonTree)expr123.tree):null)), actions.castExpr((t1!=null?((PythonTree)t1.tree):null)), actions.castExpr((t2!=null?((PythonTree)t2.tree):null)));
                    
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (PythonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {

                 retval.tree = stype;

            }
        }

        catch (RecognitionException re) {
            errorHandler.reportError(this, re);
            errorHandler.recover(this, input,re);
            retval.tree = (PythonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "exec_stmt"

    public static class assert_stmt_return extends ParserRuleReturnScope {
        PythonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "assert_stmt"
    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1022:1: assert_stmt : ASSERT t1= test[expr_contextType.Load] ( COMMA t2= test[expr_contextType.Load] )? ;
    public final PythonParser.assert_stmt_return assert_stmt() throws RecognitionException {
        PythonParser.assert_stmt_return retval = new PythonParser.assert_stmt_return();
        retval.start = input.LT(1);

        PythonTree root_0 = null;

        Token ASSERT126=null;
        Token COMMA127=null;
        PythonParser.test_return t1 = null;

        PythonParser.test_return t2 = null;


        PythonTree ASSERT126_tree=null;
        PythonTree COMMA127_tree=null;


            stmt stype = null;

        try {
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1029:5: ( ASSERT t1= test[expr_contextType.Load] ( COMMA t2= test[expr_contextType.Load] )? )
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1029:7: ASSERT t1= test[expr_contextType.Load] ( COMMA t2= test[expr_contextType.Load] )?
            {
            root_0 = (PythonTree)adaptor.nil();

            ASSERT126=(Token)match(input,ASSERT,FOLLOW_ASSERT_in_assert_stmt3385); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ASSERT126_tree = (PythonTree)adaptor.create(ASSERT126);
            adaptor.addChild(root_0, ASSERT126_tree);
            }
            pushFollow(FOLLOW_test_in_assert_stmt3389);
            t1=test(expr_contextType.Load);

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, t1.getTree());
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1029:45: ( COMMA t2= test[expr_contextType.Load] )?
            int alt62=2;
            int LA62_0 = input.LA(1);

            if ( (LA62_0==COMMA) ) {
                alt62=1;
            }
            switch (alt62) {
                case 1 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1029:46: COMMA t2= test[expr_contextType.Load]
                    {
                    COMMA127=(Token)match(input,COMMA,FOLLOW_COMMA_in_assert_stmt3393); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COMMA127_tree = (PythonTree)adaptor.create(COMMA127);
                    adaptor.addChild(root_0, COMMA127_tree);
                    }
                    pushFollow(FOLLOW_test_in_assert_stmt3397);
                    t2=test(expr_contextType.Load);

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, t2.getTree());

                    }
                    break;

            }

            if ( state.backtracking==0 ) {

                        stype = new Assert(ASSERT126, actions.castExpr((t1!=null?((PythonTree)t1.tree):null)), actions.castExpr((t2!=null?((PythonTree)t2.tree):null)));
                    
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (PythonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {

                 retval.tree = stype;

            }
        }

        catch (RecognitionException re) {
            errorHandler.reportError(this, re);
            errorHandler.recover(this, input,re);
            retval.tree = (PythonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "assert_stmt"

    public static class compound_stmt_return extends ParserRuleReturnScope {
        PythonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "compound_stmt"
    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1036:1: compound_stmt : ( if_stmt | while_stmt | for_stmt | try_stmt | with_stmt | ( ( decorators )? DEF )=> funcdef | classdef );
    public final PythonParser.compound_stmt_return compound_stmt() throws RecognitionException {
        PythonParser.compound_stmt_return retval = new PythonParser.compound_stmt_return();
        retval.start = input.LT(1);

        PythonTree root_0 = null;

        PythonParser.if_stmt_return if_stmt128 = null;

        PythonParser.while_stmt_return while_stmt129 = null;

        PythonParser.for_stmt_return for_stmt130 = null;

        PythonParser.try_stmt_return try_stmt131 = null;

        PythonParser.with_stmt_return with_stmt132 = null;

        PythonParser.funcdef_return funcdef133 = null;

        PythonParser.classdef_return classdef134 = null;



        try {
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1037:5: ( if_stmt | while_stmt | for_stmt | try_stmt | with_stmt | ( ( decorators )? DEF )=> funcdef | classdef )
            int alt63=7;
            int LA63_0 = input.LA(1);

            if ( (LA63_0==IF) ) {
                alt63=1;
            }
            else if ( (LA63_0==WHILE) ) {
                alt63=2;
            }
            else if ( (LA63_0==FOR) ) {
                alt63=3;
            }
            else if ( (LA63_0==TRY) ) {
                alt63=4;
            }
            else if ( (LA63_0==WITH) ) {
                alt63=5;
            }
            else if ( (LA63_0==AT) ) {
                int LA63_6 = input.LA(2);

                if ( (synpred6_Python()) ) {
                    alt63=6;
                }
                else if ( (true) ) {
                    alt63=7;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 63, 6, input);

                    throw nvae;
                }
            }
            else if ( (LA63_0==DEF) && (synpred6_Python())) {
                alt63=6;
            }
            else if ( (LA63_0==CLASS) ) {
                alt63=7;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 63, 0, input);

                throw nvae;
            }
            switch (alt63) {
                case 1 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1037:7: if_stmt
                    {
                    root_0 = (PythonTree)adaptor.nil();

                    pushFollow(FOLLOW_if_stmt_in_compound_stmt3426);
                    if_stmt128=if_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, if_stmt128.getTree());

                    }
                    break;
                case 2 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1038:7: while_stmt
                    {
                    root_0 = (PythonTree)adaptor.nil();

                    pushFollow(FOLLOW_while_stmt_in_compound_stmt3434);
                    while_stmt129=while_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, while_stmt129.getTree());

                    }
                    break;
                case 3 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1039:7: for_stmt
                    {
                    root_0 = (PythonTree)adaptor.nil();

                    pushFollow(FOLLOW_for_stmt_in_compound_stmt3442);
                    for_stmt130=for_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, for_stmt130.getTree());

                    }
                    break;
                case 4 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1040:7: try_stmt
                    {
                    root_0 = (PythonTree)adaptor.nil();

                    pushFollow(FOLLOW_try_stmt_in_compound_stmt3450);
                    try_stmt131=try_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, try_stmt131.getTree());

                    }
                    break;
                case 5 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1041:7: with_stmt
                    {
                    root_0 = (PythonTree)adaptor.nil();

                    pushFollow(FOLLOW_with_stmt_in_compound_stmt3458);
                    with_stmt132=with_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, with_stmt132.getTree());

                    }
                    break;
                case 6 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1042:7: ( ( decorators )? DEF )=> funcdef
                    {
                    root_0 = (PythonTree)adaptor.nil();

                    pushFollow(FOLLOW_funcdef_in_compound_stmt3475);
                    funcdef133=funcdef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, funcdef133.getTree());

                    }
                    break;
                case 7 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1043:7: classdef
                    {
                    root_0 = (PythonTree)adaptor.nil();

                    pushFollow(FOLLOW_classdef_in_compound_stmt3483);
                    classdef134=classdef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, classdef134.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (PythonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException re) {
            errorHandler.reportError(this, re);
            errorHandler.recover(this, input,re);
            retval.tree = (PythonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "compound_stmt"

    public static class if_stmt_return extends ParserRuleReturnScope {
        PythonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "if_stmt"
    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1047:1: if_stmt : IF test[expr_contextType.Load] COLON ifsuite= suite[false] ( elif_clause )? ;
    public final PythonParser.if_stmt_return if_stmt() throws RecognitionException {
        PythonParser.if_stmt_return retval = new PythonParser.if_stmt_return();
        retval.start = input.LT(1);

        PythonTree root_0 = null;

        Token IF135=null;
        Token COLON137=null;
        PythonParser.suite_return ifsuite = null;

        PythonParser.test_return test136 = null;

        PythonParser.elif_clause_return elif_clause138 = null;


        PythonTree IF135_tree=null;
        PythonTree COLON137_tree=null;


            stmt stype = null;

        try {
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1054:5: ( IF test[expr_contextType.Load] COLON ifsuite= suite[false] ( elif_clause )? )
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1054:7: IF test[expr_contextType.Load] COLON ifsuite= suite[false] ( elif_clause )?
            {
            root_0 = (PythonTree)adaptor.nil();

            IF135=(Token)match(input,IF,FOLLOW_IF_in_if_stmt3511); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            IF135_tree = (PythonTree)adaptor.create(IF135);
            adaptor.addChild(root_0, IF135_tree);
            }
            pushFollow(FOLLOW_test_in_if_stmt3513);
            test136=test(expr_contextType.Load);

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, test136.getTree());
            COLON137=(Token)match(input,COLON,FOLLOW_COLON_in_if_stmt3516); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            COLON137_tree = (PythonTree)adaptor.create(COLON137);
            adaptor.addChild(root_0, COLON137_tree);
            }
            pushFollow(FOLLOW_suite_in_if_stmt3520);
            ifsuite=suite(false);

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, ifsuite.getTree());
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1054:65: ( elif_clause )?
            int alt64=2;
            int LA64_0 = input.LA(1);

            if ( (LA64_0==ELIF||LA64_0==ORELSE) ) {
                alt64=1;
            }
            switch (alt64) {
                case 1 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1054:65: elif_clause
                    {
                    pushFollow(FOLLOW_elif_clause_in_if_stmt3523);
                    elif_clause138=elif_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, elif_clause138.getTree());

                    }
                    break;

            }

            if ( state.backtracking==0 ) {

                        stype = new If(IF135, actions.castExpr((test136!=null?((PythonTree)test136.tree):null)), actions.castStmts((ifsuite!=null?ifsuite.stypes:null)),
                            actions.makeElse((elif_clause138!=null?elif_clause138.stypes:null), (elif_clause138!=null?((PythonTree)elif_clause138.tree):null)));
                    
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (PythonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {

                 retval.tree = stype;

            }
        }

        catch (RecognitionException re) {
            errorHandler.reportError(this, re);
            errorHandler.recover(this, input,re);
            retval.tree = (PythonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "if_stmt"

    public static class elif_clause_return extends ParserRuleReturnScope {
        public List stypes;
        PythonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "elif_clause"
    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1062:1: elif_clause returns [List stypes] : ( else_clause | ELIF test[expr_contextType.Load] COLON suite[false] (e2= elif_clause | ) );
    public final PythonParser.elif_clause_return elif_clause() throws RecognitionException {
        PythonParser.elif_clause_return retval = new PythonParser.elif_clause_return();
        retval.start = input.LT(1);

        PythonTree root_0 = null;

        Token ELIF140=null;
        Token COLON142=null;
        PythonParser.elif_clause_return e2 = null;

        PythonParser.else_clause_return else_clause139 = null;

        PythonParser.test_return test141 = null;

        PythonParser.suite_return suite143 = null;


        PythonTree ELIF140_tree=null;
        PythonTree COLON142_tree=null;


            stmt stype = null;

        try {
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1072:5: ( else_clause | ELIF test[expr_contextType.Load] COLON suite[false] (e2= elif_clause | ) )
            int alt66=2;
            int LA66_0 = input.LA(1);

            if ( (LA66_0==ORELSE) ) {
                alt66=1;
            }
            else if ( (LA66_0==ELIF) ) {
                alt66=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 66, 0, input);

                throw nvae;
            }
            switch (alt66) {
                case 1 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1072:7: else_clause
                    {
                    root_0 = (PythonTree)adaptor.nil();

                    pushFollow(FOLLOW_else_clause_in_elif_clause3568);
                    else_clause139=else_clause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, else_clause139.getTree());
                    if ( state.backtracking==0 ) {

                                retval.stypes = (else_clause139!=null?else_clause139.stypes:null);
                            
                    }

                    }
                    break;
                case 2 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1076:7: ELIF test[expr_contextType.Load] COLON suite[false] (e2= elif_clause | )
                    {
                    root_0 = (PythonTree)adaptor.nil();

                    ELIF140=(Token)match(input,ELIF,FOLLOW_ELIF_in_elif_clause3584); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ELIF140_tree = (PythonTree)adaptor.create(ELIF140);
                    adaptor.addChild(root_0, ELIF140_tree);
                    }
                    pushFollow(FOLLOW_test_in_elif_clause3586);
                    test141=test(expr_contextType.Load);

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, test141.getTree());
                    COLON142=(Token)match(input,COLON,FOLLOW_COLON_in_elif_clause3589); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COLON142_tree = (PythonTree)adaptor.create(COLON142);
                    adaptor.addChild(root_0, COLON142_tree);
                    }
                    pushFollow(FOLLOW_suite_in_elif_clause3591);
                    suite143=suite(false);

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, suite143.getTree());
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1077:7: (e2= elif_clause | )
                    int alt65=2;
                    int LA65_0 = input.LA(1);

                    if ( (LA65_0==ELIF||LA65_0==ORELSE) ) {
                        alt65=1;
                    }
                    else if ( (LA65_0==EOF||LA65_0==DEDENT||LA65_0==NEWLINE||LA65_0==NAME||(LA65_0>=ASSERT && LA65_0<=DELETE)||LA65_0==EXEC||(LA65_0>=FROM && LA65_0<=IMPORT)||(LA65_0>=LAMBDA && LA65_0<=NOT)||(LA65_0>=PASS && LA65_0<=LPAREN)||(LA65_0>=PLUS && LA65_0<=MINUS)||(LA65_0>=TILDE && LA65_0<=LBRACK)||LA65_0==LCURLY||(LA65_0>=BACKQUOTE && LA65_0<=PRO)||LA65_0==PRO_SELECT||LA65_0==ASP||LA65_0==ASP_SELECT||LA65_0==ASP_PATH||(LA65_0>=SELECT && LA65_0<=RDFSELECT)||LA65_0==CAPSFROM||(LA65_0>=MODIFY && LA65_0<=SUBCLASS)) ) {
                        alt65=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 65, 0, input);

                        throw nvae;
                    }
                    switch (alt65) {
                        case 1 :
                            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1077:8: e2= elif_clause
                            {
                            pushFollow(FOLLOW_elif_clause_in_elif_clause3603);
                            e2=elif_clause();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, e2.getTree());
                            if ( state.backtracking==0 ) {

                                         stype = new If((test141!=null?((Token)test141.start):null), actions.castExpr((test141!=null?((PythonTree)test141.tree):null)), actions.castStmts((suite143!=null?suite143.stypes:null)), actions.makeElse((e2!=null?e2.stypes:null), (e2!=null?((PythonTree)e2.tree):null)));
                                     
                            }

                            }
                            break;
                        case 2 :
                            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1082:8: 
                            {
                            if ( state.backtracking==0 ) {

                                         stype = new If((test141!=null?((Token)test141.start):null), actions.castExpr((test141!=null?((PythonTree)test141.tree):null)), actions.castStmts((suite143!=null?suite143.stypes:null)), new ArrayList<stmt>());
                                     
                            }

                            }
                            break;

                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (PythonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {

                 if (stype != null) {
                     retval.tree = stype;
                 }

            }
        }

        catch (RecognitionException re) {
            errorHandler.reportError(this, re);
            errorHandler.recover(this, input,re);
            retval.tree = (PythonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "elif_clause"

    public static class else_clause_return extends ParserRuleReturnScope {
        public List stypes;
        PythonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "else_clause"
    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1089:1: else_clause returns [List stypes] : ORELSE COLON elsesuite= suite[false] ;
    public final PythonParser.else_clause_return else_clause() throws RecognitionException {
        PythonParser.else_clause_return retval = new PythonParser.else_clause_return();
        retval.start = input.LT(1);

        PythonTree root_0 = null;

        Token ORELSE144=null;
        Token COLON145=null;
        PythonParser.suite_return elsesuite = null;


        PythonTree ORELSE144_tree=null;
        PythonTree COLON145_tree=null;

        try {
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1091:5: ( ORELSE COLON elsesuite= suite[false] )
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1091:7: ORELSE COLON elsesuite= suite[false]
            {
            root_0 = (PythonTree)adaptor.nil();

            ORELSE144=(Token)match(input,ORELSE,FOLLOW_ORELSE_in_else_clause3663); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ORELSE144_tree = (PythonTree)adaptor.create(ORELSE144);
            adaptor.addChild(root_0, ORELSE144_tree);
            }
            COLON145=(Token)match(input,COLON,FOLLOW_COLON_in_else_clause3665); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            COLON145_tree = (PythonTree)adaptor.create(COLON145);
            adaptor.addChild(root_0, COLON145_tree);
            }
            pushFollow(FOLLOW_suite_in_else_clause3669);
            elsesuite=suite(false);

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, elsesuite.getTree());
            if ( state.backtracking==0 ) {

                        retval.stypes = (elsesuite!=null?elsesuite.stypes:null);
                    
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (PythonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException re) {
            errorHandler.reportError(this, re);
            errorHandler.recover(this, input,re);
            retval.tree = (PythonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "else_clause"

    public static class while_stmt_return extends ParserRuleReturnScope {
        PythonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "while_stmt"
    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1098:1: while_stmt : WHILE test[expr_contextType.Load] COLON s1= suite[false] ( ORELSE COLON s2= suite[false] )? ;
    public final PythonParser.while_stmt_return while_stmt() throws RecognitionException {
        PythonParser.while_stmt_return retval = new PythonParser.while_stmt_return();
        retval.start = input.LT(1);

        PythonTree root_0 = null;

        Token WHILE146=null;
        Token COLON148=null;
        Token ORELSE149=null;
        Token COLON150=null;
        PythonParser.suite_return s1 = null;

        PythonParser.suite_return s2 = null;

        PythonParser.test_return test147 = null;


        PythonTree WHILE146_tree=null;
        PythonTree COLON148_tree=null;
        PythonTree ORELSE149_tree=null;
        PythonTree COLON150_tree=null;


            stmt stype = null;

        try {
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1105:5: ( WHILE test[expr_contextType.Load] COLON s1= suite[false] ( ORELSE COLON s2= suite[false] )? )
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1105:7: WHILE test[expr_contextType.Load] COLON s1= suite[false] ( ORELSE COLON s2= suite[false] )?
            {
            root_0 = (PythonTree)adaptor.nil();

            WHILE146=(Token)match(input,WHILE,FOLLOW_WHILE_in_while_stmt3706); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            WHILE146_tree = (PythonTree)adaptor.create(WHILE146);
            adaptor.addChild(root_0, WHILE146_tree);
            }
            pushFollow(FOLLOW_test_in_while_stmt3708);
            test147=test(expr_contextType.Load);

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, test147.getTree());
            COLON148=(Token)match(input,COLON,FOLLOW_COLON_in_while_stmt3711); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            COLON148_tree = (PythonTree)adaptor.create(COLON148);
            adaptor.addChild(root_0, COLON148_tree);
            }
            pushFollow(FOLLOW_suite_in_while_stmt3715);
            s1=suite(false);

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, s1.getTree());
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1105:63: ( ORELSE COLON s2= suite[false] )?
            int alt67=2;
            int LA67_0 = input.LA(1);

            if ( (LA67_0==ORELSE) ) {
                alt67=1;
            }
            switch (alt67) {
                case 1 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1105:64: ORELSE COLON s2= suite[false]
                    {
                    ORELSE149=(Token)match(input,ORELSE,FOLLOW_ORELSE_in_while_stmt3719); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ORELSE149_tree = (PythonTree)adaptor.create(ORELSE149);
                    adaptor.addChild(root_0, ORELSE149_tree);
                    }
                    COLON150=(Token)match(input,COLON,FOLLOW_COLON_in_while_stmt3721); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COLON150_tree = (PythonTree)adaptor.create(COLON150);
                    adaptor.addChild(root_0, COLON150_tree);
                    }
                    pushFollow(FOLLOW_suite_in_while_stmt3725);
                    s2=suite(false);

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, s2.getTree());

                    }
                    break;

            }

            if ( state.backtracking==0 ) {

                        stype = actions.makeWhile(WHILE146, actions.castExpr((test147!=null?((PythonTree)test147.tree):null)), (s1!=null?s1.stypes:null), (s2!=null?s2.stypes:null));
                    
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (PythonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {

                 retval.tree = stype;

            }
        }

        catch (RecognitionException re) {
            errorHandler.reportError(this, re);
            errorHandler.recover(this, input,re);
            retval.tree = (PythonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "while_stmt"

    public static class for_stmt_return extends ParserRuleReturnScope {
        PythonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "for_stmt"
    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1112:1: for_stmt : FOR exprlist[expr_contextType.Store] IN testlist[expr_contextType.Load] COLON s1= suite[false] ( ORELSE COLON s2= suite[false] )? ;
    public final PythonParser.for_stmt_return for_stmt() throws RecognitionException {
        PythonParser.for_stmt_return retval = new PythonParser.for_stmt_return();
        retval.start = input.LT(1);

        PythonTree root_0 = null;

        Token FOR151=null;
        Token IN153=null;
        Token COLON155=null;
        Token ORELSE156=null;
        Token COLON157=null;
        PythonParser.suite_return s1 = null;

        PythonParser.suite_return s2 = null;

        PythonParser.exprlist_return exprlist152 = null;

        PythonParser.testlist_return testlist154 = null;


        PythonTree FOR151_tree=null;
        PythonTree IN153_tree=null;
        PythonTree COLON155_tree=null;
        PythonTree ORELSE156_tree=null;
        PythonTree COLON157_tree=null;


            stmt stype = null;

        try {
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1119:5: ( FOR exprlist[expr_contextType.Store] IN testlist[expr_contextType.Load] COLON s1= suite[false] ( ORELSE COLON s2= suite[false] )? )
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1119:7: FOR exprlist[expr_contextType.Store] IN testlist[expr_contextType.Load] COLON s1= suite[false] ( ORELSE COLON s2= suite[false] )?
            {
            root_0 = (PythonTree)adaptor.nil();

            FOR151=(Token)match(input,FOR,FOLLOW_FOR_in_for_stmt3764); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            FOR151_tree = (PythonTree)adaptor.create(FOR151);
            adaptor.addChild(root_0, FOR151_tree);
            }
            pushFollow(FOLLOW_exprlist_in_for_stmt3766);
            exprlist152=exprlist(expr_contextType.Store);

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, exprlist152.getTree());
            IN153=(Token)match(input,IN,FOLLOW_IN_in_for_stmt3769); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            IN153_tree = (PythonTree)adaptor.create(IN153);
            adaptor.addChild(root_0, IN153_tree);
            }
            pushFollow(FOLLOW_testlist_in_for_stmt3771);
            testlist154=testlist(expr_contextType.Load);

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, testlist154.getTree());
            COLON155=(Token)match(input,COLON,FOLLOW_COLON_in_for_stmt3774); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            COLON155_tree = (PythonTree)adaptor.create(COLON155);
            adaptor.addChild(root_0, COLON155_tree);
            }
            pushFollow(FOLLOW_suite_in_for_stmt3778);
            s1=suite(false);

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, s1.getTree());
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1120:9: ( ORELSE COLON s2= suite[false] )?
            int alt68=2;
            int LA68_0 = input.LA(1);

            if ( (LA68_0==ORELSE) ) {
                alt68=1;
            }
            switch (alt68) {
                case 1 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1120:10: ORELSE COLON s2= suite[false]
                    {
                    ORELSE156=(Token)match(input,ORELSE,FOLLOW_ORELSE_in_for_stmt3790); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ORELSE156_tree = (PythonTree)adaptor.create(ORELSE156);
                    adaptor.addChild(root_0, ORELSE156_tree);
                    }
                    COLON157=(Token)match(input,COLON,FOLLOW_COLON_in_for_stmt3792); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COLON157_tree = (PythonTree)adaptor.create(COLON157);
                    adaptor.addChild(root_0, COLON157_tree);
                    }
                    pushFollow(FOLLOW_suite_in_for_stmt3796);
                    s2=suite(false);

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, s2.getTree());

                    }
                    break;

            }

            if ( state.backtracking==0 ) {

                        stype = actions.makeFor(FOR151, (exprlist152!=null?exprlist152.etype:null), actions.castExpr((testlist154!=null?((PythonTree)testlist154.tree):null)), (s1!=null?s1.stypes:null), (s2!=null?s2.stypes:null));
                    
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (PythonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {

                 retval.tree = stype;

            }
        }

        catch (RecognitionException re) {
            errorHandler.reportError(this, re);
            errorHandler.recover(this, input,re);
            retval.tree = (PythonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "for_stmt"

    public static class try_stmt_return extends ParserRuleReturnScope {
        PythonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "try_stmt"
    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1131:1: try_stmt : TRY COLON trysuite= suite[!$suite.isEmpty() && $suite::continueIllegal] ( (e+= except_clause )+ ( ORELSE COLON elsesuite= suite[!$suite.isEmpty() && $suite::continueIllegal] )? ( FINALLY COLON finalsuite= suite[true] )? | FINALLY COLON finalsuite= suite[true] ) ;
    public final PythonParser.try_stmt_return try_stmt() throws RecognitionException {
        PythonParser.try_stmt_return retval = new PythonParser.try_stmt_return();
        retval.start = input.LT(1);

        PythonTree root_0 = null;

        Token TRY158=null;
        Token COLON159=null;
        Token ORELSE160=null;
        Token COLON161=null;
        Token FINALLY162=null;
        Token COLON163=null;
        Token FINALLY164=null;
        Token COLON165=null;
        List list_e=null;
        PythonParser.suite_return trysuite = null;

        PythonParser.suite_return elsesuite = null;

        PythonParser.suite_return finalsuite = null;

        PythonParser.except_clause_return e = null;
         e = null;
        PythonTree TRY158_tree=null;
        PythonTree COLON159_tree=null;
        PythonTree ORELSE160_tree=null;
        PythonTree COLON161_tree=null;
        PythonTree FINALLY162_tree=null;
        PythonTree COLON163_tree=null;
        PythonTree FINALLY164_tree=null;
        PythonTree COLON165_tree=null;


            stmt stype = null;

        try {
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1138:5: ( TRY COLON trysuite= suite[!$suite.isEmpty() && $suite::continueIllegal] ( (e+= except_clause )+ ( ORELSE COLON elsesuite= suite[!$suite.isEmpty() && $suite::continueIllegal] )? ( FINALLY COLON finalsuite= suite[true] )? | FINALLY COLON finalsuite= suite[true] ) )
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1138:7: TRY COLON trysuite= suite[!$suite.isEmpty() && $suite::continueIllegal] ( (e+= except_clause )+ ( ORELSE COLON elsesuite= suite[!$suite.isEmpty() && $suite::continueIllegal] )? ( FINALLY COLON finalsuite= suite[true] )? | FINALLY COLON finalsuite= suite[true] )
            {
            root_0 = (PythonTree)adaptor.nil();

            TRY158=(Token)match(input,TRY,FOLLOW_TRY_in_try_stmt3839); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TRY158_tree = (PythonTree)adaptor.create(TRY158);
            adaptor.addChild(root_0, TRY158_tree);
            }
            COLON159=(Token)match(input,COLON,FOLLOW_COLON_in_try_stmt3841); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            COLON159_tree = (PythonTree)adaptor.create(COLON159);
            adaptor.addChild(root_0, COLON159_tree);
            }
            pushFollow(FOLLOW_suite_in_try_stmt3845);
            trysuite=suite(!suite_stack.isEmpty() && ((suite_scope)suite_stack.peek()).continueIllegal);

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, trysuite.getTree());
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1139:7: ( (e+= except_clause )+ ( ORELSE COLON elsesuite= suite[!$suite.isEmpty() && $suite::continueIllegal] )? ( FINALLY COLON finalsuite= suite[true] )? | FINALLY COLON finalsuite= suite[true] )
            int alt72=2;
            int LA72_0 = input.LA(1);

            if ( (LA72_0==EXCEPT) ) {
                alt72=1;
            }
            else if ( (LA72_0==FINALLY) ) {
                alt72=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 72, 0, input);

                throw nvae;
            }
            switch (alt72) {
                case 1 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1139:9: (e+= except_clause )+ ( ORELSE COLON elsesuite= suite[!$suite.isEmpty() && $suite::continueIllegal] )? ( FINALLY COLON finalsuite= suite[true] )?
                    {
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1139:10: (e+= except_clause )+
                    int cnt69=0;
                    loop69:
                    do {
                        int alt69=2;
                        int LA69_0 = input.LA(1);

                        if ( (LA69_0==EXCEPT) ) {
                            alt69=1;
                        }


                        switch (alt69) {
                    	case 1 :
                    	    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1139:10: e+= except_clause
                    	    {
                    	    pushFollow(FOLLOW_except_clause_in_try_stmt3858);
                    	    e=except_clause();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, e.getTree());
                    	    if (list_e==null) list_e=new ArrayList();
                    	    list_e.add(e.getTree());


                    	    }
                    	    break;

                    	default :
                    	    if ( cnt69 >= 1 ) break loop69;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(69, input);
                                throw eee;
                        }
                        cnt69++;
                    } while (true);

                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1139:27: ( ORELSE COLON elsesuite= suite[!$suite.isEmpty() && $suite::continueIllegal] )?
                    int alt70=2;
                    int LA70_0 = input.LA(1);

                    if ( (LA70_0==ORELSE) ) {
                        alt70=1;
                    }
                    switch (alt70) {
                        case 1 :
                            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1139:28: ORELSE COLON elsesuite= suite[!$suite.isEmpty() && $suite::continueIllegal]
                            {
                            ORELSE160=(Token)match(input,ORELSE,FOLLOW_ORELSE_in_try_stmt3862); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            ORELSE160_tree = (PythonTree)adaptor.create(ORELSE160);
                            adaptor.addChild(root_0, ORELSE160_tree);
                            }
                            COLON161=(Token)match(input,COLON,FOLLOW_COLON_in_try_stmt3864); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            COLON161_tree = (PythonTree)adaptor.create(COLON161);
                            adaptor.addChild(root_0, COLON161_tree);
                            }
                            pushFollow(FOLLOW_suite_in_try_stmt3868);
                            elsesuite=suite(!suite_stack.isEmpty() && ((suite_scope)suite_stack.peek()).continueIllegal);

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, elsesuite.getTree());

                            }
                            break;

                    }

                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1139:105: ( FINALLY COLON finalsuite= suite[true] )?
                    int alt71=2;
                    int LA71_0 = input.LA(1);

                    if ( (LA71_0==FINALLY) ) {
                        alt71=1;
                    }
                    switch (alt71) {
                        case 1 :
                            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1139:106: FINALLY COLON finalsuite= suite[true]
                            {
                            FINALLY162=(Token)match(input,FINALLY,FOLLOW_FINALLY_in_try_stmt3874); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            FINALLY162_tree = (PythonTree)adaptor.create(FINALLY162);
                            adaptor.addChild(root_0, FINALLY162_tree);
                            }
                            COLON163=(Token)match(input,COLON,FOLLOW_COLON_in_try_stmt3876); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            COLON163_tree = (PythonTree)adaptor.create(COLON163);
                            adaptor.addChild(root_0, COLON163_tree);
                            }
                            pushFollow(FOLLOW_suite_in_try_stmt3880);
                            finalsuite=suite(true);

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, finalsuite.getTree());

                            }
                            break;

                    }

                    if ( state.backtracking==0 ) {

                                  stype = actions.makeTryExcept(TRY158, (trysuite!=null?trysuite.stypes:null), list_e, (elsesuite!=null?elsesuite.stypes:null), (finalsuite!=null?finalsuite.stypes:null));
                              
                    }

                    }
                    break;
                case 2 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1143:9: FINALLY COLON finalsuite= suite[true]
                    {
                    FINALLY164=(Token)match(input,FINALLY,FOLLOW_FINALLY_in_try_stmt3903); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    FINALLY164_tree = (PythonTree)adaptor.create(FINALLY164);
                    adaptor.addChild(root_0, FINALLY164_tree);
                    }
                    COLON165=(Token)match(input,COLON,FOLLOW_COLON_in_try_stmt3905); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COLON165_tree = (PythonTree)adaptor.create(COLON165);
                    adaptor.addChild(root_0, COLON165_tree);
                    }
                    pushFollow(FOLLOW_suite_in_try_stmt3909);
                    finalsuite=suite(true);

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, finalsuite.getTree());
                    if ( state.backtracking==0 ) {

                                  stype = actions.makeTryFinally(TRY158, (trysuite!=null?trysuite.stypes:null), (finalsuite!=null?finalsuite.stypes:null));
                              
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (PythonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {

                 retval.tree = stype;

            }
        }

        catch (RecognitionException re) {
            errorHandler.reportError(this, re);
            errorHandler.recover(this, input,re);
            retval.tree = (PythonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "try_stmt"

    public static class with_stmt_return extends ParserRuleReturnScope {
        PythonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "with_stmt"
    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1151:1: with_stmt : WITH test[expr_contextType.Load] ( with_var )? COLON suite[false] ;
    public final PythonParser.with_stmt_return with_stmt() throws RecognitionException {
        PythonParser.with_stmt_return retval = new PythonParser.with_stmt_return();
        retval.start = input.LT(1);

        PythonTree root_0 = null;

        Token WITH166=null;
        Token COLON169=null;
        PythonParser.test_return test167 = null;

        PythonParser.with_var_return with_var168 = null;

        PythonParser.suite_return suite170 = null;


        PythonTree WITH166_tree=null;
        PythonTree COLON169_tree=null;


            stmt stype = null;

        try {
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1158:5: ( WITH test[expr_contextType.Load] ( with_var )? COLON suite[false] )
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1158:7: WITH test[expr_contextType.Load] ( with_var )? COLON suite[false]
            {
            root_0 = (PythonTree)adaptor.nil();

            WITH166=(Token)match(input,WITH,FOLLOW_WITH_in_with_stmt3958); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            WITH166_tree = (PythonTree)adaptor.create(WITH166);
            adaptor.addChild(root_0, WITH166_tree);
            }
            pushFollow(FOLLOW_test_in_with_stmt3960);
            test167=test(expr_contextType.Load);

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, test167.getTree());
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1158:40: ( with_var )?
            int alt73=2;
            int LA73_0 = input.LA(1);

            if ( (LA73_0==NAME||LA73_0==AS) ) {
                alt73=1;
            }
            switch (alt73) {
                case 1 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1158:41: with_var
                    {
                    pushFollow(FOLLOW_with_var_in_with_stmt3964);
                    with_var168=with_var();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, with_var168.getTree());

                    }
                    break;

            }

            COLON169=(Token)match(input,COLON,FOLLOW_COLON_in_with_stmt3968); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            COLON169_tree = (PythonTree)adaptor.create(COLON169);
            adaptor.addChild(root_0, COLON169_tree);
            }
            pushFollow(FOLLOW_suite_in_with_stmt3970);
            suite170=suite(false);

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, suite170.getTree());
            if ( state.backtracking==0 ) {

                        stype = new With(WITH166, actions.castExpr((test167!=null?((PythonTree)test167.tree):null)), (with_var168!=null?with_var168.etype:null),
                            actions.castStmts((suite170!=null?suite170.stypes:null)));
                    
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (PythonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {

                 retval.tree = stype;

            }
        }

        catch (RecognitionException re) {
            errorHandler.reportError(this, re);
            errorHandler.recover(this, input,re);
            retval.tree = (PythonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "with_stmt"

    public static class with_var_return extends ParserRuleReturnScope {
        public expr etype;
        PythonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "with_var"
    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1166:1: with_var returns [expr etype] : ( AS | NAME ) expr[expr_contextType.Store] ;
    public final PythonParser.with_var_return with_var() throws RecognitionException {
        PythonParser.with_var_return retval = new PythonParser.with_var_return();
        retval.start = input.LT(1);

        PythonTree root_0 = null;

        Token set171=null;
        PythonParser.expr_return expr172 = null;


        PythonTree set171_tree=null;

        try {
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1168:5: ( ( AS | NAME ) expr[expr_contextType.Store] )
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1168:7: ( AS | NAME ) expr[expr_contextType.Store]
            {
            root_0 = (PythonTree)adaptor.nil();

            set171=(Token)input.LT(1);
            if ( input.LA(1)==NAME||input.LA(1)==AS ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (PythonTree)adaptor.create(set171));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }

            pushFollow(FOLLOW_expr_in_with_var4013);
            expr172=expr(expr_contextType.Store);

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expr172.getTree());
            if ( state.backtracking==0 ) {

                        retval.etype = actions.castExpr((expr172!=null?((PythonTree)expr172.tree):null));
                        actions.checkAssign(retval.etype);
                    
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (PythonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException re) {
            errorHandler.reportError(this, re);
            errorHandler.recover(this, input,re);
            retval.tree = (PythonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "with_var"

    public static class except_clause_return extends ParserRuleReturnScope {
        PythonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "except_clause"
    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1176:1: except_clause : EXCEPT (t1= test[expr_contextType.Load] ( ( COMMA | AS ) t2= test[expr_contextType.Store] )? )? COLON suite[!$suite.isEmpty() && $suite::continueIllegal] ;
    public final PythonParser.except_clause_return except_clause() throws RecognitionException {
        PythonParser.except_clause_return retval = new PythonParser.except_clause_return();
        retval.start = input.LT(1);

        PythonTree root_0 = null;

        Token EXCEPT173=null;
        Token set174=null;
        Token COLON175=null;
        PythonParser.test_return t1 = null;

        PythonParser.test_return t2 = null;

        PythonParser.suite_return suite176 = null;


        PythonTree EXCEPT173_tree=null;
        PythonTree set174_tree=null;
        PythonTree COLON175_tree=null;


            excepthandler extype = null;

        try {
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1183:5: ( EXCEPT (t1= test[expr_contextType.Load] ( ( COMMA | AS ) t2= test[expr_contextType.Store] )? )? COLON suite[!$suite.isEmpty() && $suite::continueIllegal] )
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1183:7: EXCEPT (t1= test[expr_contextType.Load] ( ( COMMA | AS ) t2= test[expr_contextType.Store] )? )? COLON suite[!$suite.isEmpty() && $suite::continueIllegal]
            {
            root_0 = (PythonTree)adaptor.nil();

            EXCEPT173=(Token)match(input,EXCEPT,FOLLOW_EXCEPT_in_except_clause4050); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            EXCEPT173_tree = (PythonTree)adaptor.create(EXCEPT173);
            adaptor.addChild(root_0, EXCEPT173_tree);
            }
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1183:14: (t1= test[expr_contextType.Load] ( ( COMMA | AS ) t2= test[expr_contextType.Store] )? )?
            int alt75=2;
            int LA75_0 = input.LA(1);

            if ( (LA75_0==NAME||(LA75_0>=LAMBDA && LA75_0<=NOT)||LA75_0==LPAREN||(LA75_0>=PLUS && LA75_0<=MINUS)||(LA75_0>=TILDE && LA75_0<=LBRACK)||LA75_0==LCURLY||(LA75_0>=BACKQUOTE && LA75_0<=PRO)||LA75_0==PRO_SELECT||LA75_0==ASP||LA75_0==ASP_SELECT||LA75_0==ASP_PATH||(LA75_0>=SELECT && LA75_0<=RDFSELECT)||LA75_0==CAPSFROM||(LA75_0>=MODIFY && LA75_0<=SUBCLASS)) ) {
                alt75=1;
            }
            switch (alt75) {
                case 1 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1183:15: t1= test[expr_contextType.Load] ( ( COMMA | AS ) t2= test[expr_contextType.Store] )?
                    {
                    pushFollow(FOLLOW_test_in_except_clause4055);
                    t1=test(expr_contextType.Load);

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, t1.getTree());
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1183:46: ( ( COMMA | AS ) t2= test[expr_contextType.Store] )?
                    int alt74=2;
                    int LA74_0 = input.LA(1);

                    if ( (LA74_0==AS||LA74_0==COMMA) ) {
                        alt74=1;
                    }
                    switch (alt74) {
                        case 1 :
                            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1183:47: ( COMMA | AS ) t2= test[expr_contextType.Store]
                            {
                            set174=(Token)input.LT(1);
                            if ( input.LA(1)==AS||input.LA(1)==COMMA ) {
                                input.consume();
                                if ( state.backtracking==0 ) adaptor.addChild(root_0, (PythonTree)adaptor.create(set174));
                                state.errorRecovery=false;state.failed=false;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                MismatchedSetException mse = new MismatchedSetException(null,input);
                                throw mse;
                            }

                            pushFollow(FOLLOW_test_in_except_clause4069);
                            t2=test(expr_contextType.Store);

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, t2.getTree());

                            }
                            break;

                    }


                    }
                    break;

            }

            COLON175=(Token)match(input,COLON,FOLLOW_COLON_in_except_clause4076); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            COLON175_tree = (PythonTree)adaptor.create(COLON175);
            adaptor.addChild(root_0, COLON175_tree);
            }
            pushFollow(FOLLOW_suite_in_except_clause4078);
            suite176=suite(!suite_stack.isEmpty() && ((suite_scope)suite_stack.peek()).continueIllegal);

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, suite176.getTree());
            if ( state.backtracking==0 ) {

                        extype = new ExceptHandler(EXCEPT173, actions.castExpr((t1!=null?((PythonTree)t1.tree):null)), actions.castExpr((t2!=null?((PythonTree)t2.tree):null)),
                            actions.castStmts((suite176!=null?suite176.stypes:null)));
                    
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (PythonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {

                 retval.tree = extype;

            }
        }

        catch (RecognitionException re) {
            errorHandler.reportError(this, re);
            errorHandler.recover(this, input,re);
            retval.tree = (PythonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "except_clause"

    protected static class suite_scope {
        boolean continueIllegal;
    }
    protected Stack suite_stack = new Stack();

    public static class suite_return extends ParserRuleReturnScope {
        public List stypes;
        PythonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "suite"
    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1191:1: suite[boolean fromFinally] returns [List stypes] : ( simple_stmt | NEWLINE INDENT ( stmt )+ DEDENT );
    public final PythonParser.suite_return suite(boolean fromFinally) throws RecognitionException {
        suite_stack.push(new suite_scope());
        PythonParser.suite_return retval = new PythonParser.suite_return();
        retval.start = input.LT(1);

        PythonTree root_0 = null;

        Token NEWLINE178=null;
        Token INDENT179=null;
        Token DEDENT181=null;
        PythonParser.simple_stmt_return simple_stmt177 = null;

        PythonParser.stmt_return stmt180 = null;


        PythonTree NEWLINE178_tree=null;
        PythonTree INDENT179_tree=null;
        PythonTree DEDENT181_tree=null;


            if (((suite_scope)suite_stack.peek()).continueIllegal || fromFinally) {
                ((suite_scope)suite_stack.peek()).continueIllegal = true;
            } else {
                ((suite_scope)suite_stack.peek()).continueIllegal = false;
            }
            retval.stypes = new ArrayList();

        try {
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1204:5: ( simple_stmt | NEWLINE INDENT ( stmt )+ DEDENT )
            int alt77=2;
            int LA77_0 = input.LA(1);

            if ( (LA77_0==NAME||(LA77_0>=ASSERT && LA77_0<=BREAK)||LA77_0==CONTINUE||LA77_0==DELETE||LA77_0==EXEC||LA77_0==FROM||LA77_0==GLOBAL||LA77_0==IMPORT||(LA77_0>=LAMBDA && LA77_0<=NOT)||(LA77_0>=PASS && LA77_0<=RETURN)||LA77_0==YIELD||LA77_0==LPAREN||(LA77_0>=PLUS && LA77_0<=MINUS)||(LA77_0>=TILDE && LA77_0<=LBRACK)||LA77_0==LCURLY||(LA77_0>=BACKQUOTE && LA77_0<=PRO)||LA77_0==PRO_SELECT||LA77_0==ASP||LA77_0==ASP_SELECT||LA77_0==ASP_PATH||(LA77_0>=SELECT && LA77_0<=RDFSELECT)||LA77_0==CAPSFROM||(LA77_0>=MODIFY && LA77_0<=SUBCLASS)) ) {
                alt77=1;
            }
            else if ( (LA77_0==NEWLINE) ) {
                alt77=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 77, 0, input);

                throw nvae;
            }
            switch (alt77) {
                case 1 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1204:7: simple_stmt
                    {
                    root_0 = (PythonTree)adaptor.nil();

                    pushFollow(FOLLOW_simple_stmt_in_suite4124);
                    simple_stmt177=simple_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, simple_stmt177.getTree());
                    if ( state.backtracking==0 ) {

                                retval.stypes = (simple_stmt177!=null?simple_stmt177.stypes:null);
                            
                    }

                    }
                    break;
                case 2 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1208:7: NEWLINE INDENT ( stmt )+ DEDENT
                    {
                    root_0 = (PythonTree)adaptor.nil();

                    NEWLINE178=(Token)match(input,NEWLINE,FOLLOW_NEWLINE_in_suite4140); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NEWLINE178_tree = (PythonTree)adaptor.create(NEWLINE178);
                    adaptor.addChild(root_0, NEWLINE178_tree);
                    }
                    INDENT179=(Token)match(input,INDENT,FOLLOW_INDENT_in_suite4142); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    INDENT179_tree = (PythonTree)adaptor.create(INDENT179);
                    adaptor.addChild(root_0, INDENT179_tree);
                    }
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1209:7: ( stmt )+
                    int cnt76=0;
                    loop76:
                    do {
                        int alt76=2;
                        int LA76_0 = input.LA(1);

                        if ( (LA76_0==NAME||(LA76_0>=ASSERT && LA76_0<=DELETE)||LA76_0==EXEC||(LA76_0>=FROM && LA76_0<=IMPORT)||(LA76_0>=LAMBDA && LA76_0<=NOT)||(LA76_0>=PASS && LA76_0<=LPAREN)||(LA76_0>=PLUS && LA76_0<=MINUS)||(LA76_0>=TILDE && LA76_0<=LBRACK)||LA76_0==LCURLY||(LA76_0>=BACKQUOTE && LA76_0<=PRO)||LA76_0==PRO_SELECT||LA76_0==ASP||LA76_0==ASP_SELECT||LA76_0==ASP_PATH||(LA76_0>=SELECT && LA76_0<=RDFSELECT)||LA76_0==CAPSFROM||(LA76_0>=MODIFY && LA76_0<=SUBCLASS)) ) {
                            alt76=1;
                        }


                        switch (alt76) {
                    	case 1 :
                    	    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1209:8: stmt
                    	    {
                    	    pushFollow(FOLLOW_stmt_in_suite4151);
                    	    stmt180=stmt();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, stmt180.getTree());
                    	    if ( state.backtracking==0 ) {

                    	                 if ((stmt180!=null?stmt180.stypes:null) != null) {
                    	                     retval.stypes.addAll((stmt180!=null?stmt180.stypes:null));
                    	                 }
                    	             
                    	    }

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt76 >= 1 ) break loop76;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(76, input);
                                throw eee;
                        }
                        cnt76++;
                    } while (true);

                    DEDENT181=(Token)match(input,DEDENT,FOLLOW_DEDENT_in_suite4171); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DEDENT181_tree = (PythonTree)adaptor.create(DEDENT181);
                    adaptor.addChild(root_0, DEDENT181_tree);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (PythonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException re) {
            errorHandler.reportError(this, re);
            errorHandler.recover(this, input,re);
            retval.tree = (PythonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
        }
        finally {
            suite_stack.pop();
        }
        return retval;
    }
    // $ANTLR end "suite"

    public static class test_return extends ParserRuleReturnScope {
        PythonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "test"
    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1219:1: test[expr_contextType ctype] : (o1= or_test[ctype] ( ( IF or_test[null] ORELSE )=> IF o2= or_test[ctype] ORELSE e= test[expr_contextType.Load] | -> or_test ) | lambdef );
    public final PythonParser.test_return test(expr_contextType ctype) throws RecognitionException {
        PythonParser.test_return retval = new PythonParser.test_return();
        retval.start = input.LT(1);

        PythonTree root_0 = null;

        Token IF182=null;
        Token ORELSE183=null;
        PythonParser.or_test_return o1 = null;

        PythonParser.or_test_return o2 = null;

        PythonParser.test_return e = null;

        PythonParser.lambdef_return lambdef184 = null;


        PythonTree IF182_tree=null;
        PythonTree ORELSE183_tree=null;
        RewriteRuleTokenStream stream_ORELSE=new RewriteRuleTokenStream(adaptor,"token ORELSE");
        RewriteRuleTokenStream stream_IF=new RewriteRuleTokenStream(adaptor,"token IF");
        RewriteRuleSubtreeStream stream_test=new RewriteRuleSubtreeStream(adaptor,"rule test");
        RewriteRuleSubtreeStream stream_or_test=new RewriteRuleSubtreeStream(adaptor,"rule or_test");

            expr etype = null;

        try {
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1228:5: (o1= or_test[ctype] ( ( IF or_test[null] ORELSE )=> IF o2= or_test[ctype] ORELSE e= test[expr_contextType.Load] | -> or_test ) | lambdef )
            int alt79=2;
            int LA79_0 = input.LA(1);

            if ( (LA79_0==NAME||LA79_0==NOT||LA79_0==LPAREN||(LA79_0>=PLUS && LA79_0<=MINUS)||(LA79_0>=TILDE && LA79_0<=LBRACK)||LA79_0==LCURLY||(LA79_0>=BACKQUOTE && LA79_0<=PRO)||LA79_0==PRO_SELECT||LA79_0==ASP||LA79_0==ASP_SELECT||LA79_0==ASP_PATH||(LA79_0>=SELECT && LA79_0<=RDFSELECT)||LA79_0==CAPSFROM||(LA79_0>=MODIFY && LA79_0<=SUBCLASS)) ) {
                alt79=1;
            }
            else if ( (LA79_0==LAMBDA) ) {
                alt79=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 79, 0, input);

                throw nvae;
            }
            switch (alt79) {
                case 1 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1228:6: o1= or_test[ctype] ( ( IF or_test[null] ORELSE )=> IF o2= or_test[ctype] ORELSE e= test[expr_contextType.Load] | -> or_test )
                    {
                    pushFollow(FOLLOW_or_test_in_test4201);
                    o1=or_test(ctype);

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_or_test.add(o1.getTree());
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1229:7: ( ( IF or_test[null] ORELSE )=> IF o2= or_test[ctype] ORELSE e= test[expr_contextType.Load] | -> or_test )
                    int alt78=2;
                    alt78 = dfa78.predict(input);
                    switch (alt78) {
                        case 1 :
                            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1229:9: ( IF or_test[null] ORELSE )=> IF o2= or_test[ctype] ORELSE e= test[expr_contextType.Load]
                            {
                            IF182=(Token)match(input,IF,FOLLOW_IF_in_test4223); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_IF.add(IF182);

                            pushFollow(FOLLOW_or_test_in_test4227);
                            o2=or_test(ctype);

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_or_test.add(o2.getTree());
                            ORELSE183=(Token)match(input,ORELSE,FOLLOW_ORELSE_in_test4230); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_ORELSE.add(ORELSE183);

                            pushFollow(FOLLOW_test_in_test4234);
                            e=test(expr_contextType.Load);

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_test.add(e.getTree());
                            if ( state.backtracking==0 ) {

                                           etype = new IfExp((o1!=null?((Token)o1.start):null), actions.castExpr((o2!=null?((PythonTree)o2.tree):null)), actions.castExpr((o1!=null?((PythonTree)o1.tree):null)), actions.castExpr((e!=null?((PythonTree)e.tree):null)));
                                       
                            }

                            }
                            break;
                        case 2 :
                            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1234:6: 
                            {

                            // AST REWRITE
                            // elements: or_test
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            // wildcard labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                            root_0 = (PythonTree)adaptor.nil();
                            // 1234:6: -> or_test
                            {
                                adaptor.addChild(root_0, stream_or_test.nextTree());

                            }

                            retval.tree = root_0;}
                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1236:7: lambdef
                    {
                    root_0 = (PythonTree)adaptor.nil();

                    pushFollow(FOLLOW_lambdef_in_test4279);
                    lambdef184=lambdef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lambdef184.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (PythonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {

                 if (etype != null) {
                     retval.tree = etype;
                 }

            }
        }

        catch (RecognitionException re) {
            errorHandler.reportError(this, re);
            errorHandler.recover(this, input,re);
            retval.tree = (PythonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "test"

    public static class or_test_return extends ParserRuleReturnScope {
        public Token leftTok;
        PythonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "or_test"
    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1240:1: or_test[expr_contextType ctype] returns [Token leftTok] : left= and_test[ctype] ( (or= OR right+= and_test[ctype] )+ | -> $left) ;
    public final PythonParser.or_test_return or_test(expr_contextType ctype) throws RecognitionException {
        PythonParser.or_test_return retval = new PythonParser.or_test_return();
        retval.start = input.LT(1);

        PythonTree root_0 = null;

        Token or=null;
        List list_right=null;
        PythonParser.and_test_return left = null;

        PythonParser.and_test_return right = null;
         right = null;
        PythonTree or_tree=null;
        RewriteRuleTokenStream stream_OR=new RewriteRuleTokenStream(adaptor,"token OR");
        RewriteRuleSubtreeStream stream_and_test=new RewriteRuleSubtreeStream(adaptor,"rule and_test");
        try {
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1251:5: (left= and_test[ctype] ( (or= OR right+= and_test[ctype] )+ | -> $left) )
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1251:7: left= and_test[ctype] ( (or= OR right+= and_test[ctype] )+ | -> $left)
            {
            pushFollow(FOLLOW_and_test_in_or_test4314);
            left=and_test(ctype);

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_and_test.add(left.getTree());
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1252:9: ( (or= OR right+= and_test[ctype] )+ | -> $left)
            int alt81=2;
            int LA81_0 = input.LA(1);

            if ( (LA81_0==OR) ) {
                alt81=1;
            }
            else if ( (LA81_0==EOF||LA81_0==NEWLINE||LA81_0==NAME||LA81_0==AS||LA81_0==FOR||LA81_0==IF||LA81_0==ORELSE||(LA81_0>=RPAREN && LA81_0<=COMMA)||(LA81_0>=SEMI && LA81_0<=DOUBLESLASHEQUAL)||LA81_0==RBRACK||(LA81_0>=RCURLY && LA81_0<=BACKQUOTE)) ) {
                alt81=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 81, 0, input);

                throw nvae;
            }
            switch (alt81) {
                case 1 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1252:11: (or= OR right+= and_test[ctype] )+
                    {
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1252:11: (or= OR right+= and_test[ctype] )+
                    int cnt80=0;
                    loop80:
                    do {
                        int alt80=2;
                        int LA80_0 = input.LA(1);

                        if ( (LA80_0==OR) ) {
                            alt80=1;
                        }


                        switch (alt80) {
                    	case 1 :
                    	    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1252:12: or= OR right+= and_test[ctype]
                    	    {
                    	    or=(Token)match(input,OR,FOLLOW_OR_in_or_test4330); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_OR.add(or);

                    	    pushFollow(FOLLOW_and_test_in_or_test4334);
                    	    right=and_test(ctype);

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_and_test.add(right.getTree());
                    	    if (list_right==null) list_right=new ArrayList();
                    	    list_right.add(right.getTree());


                    	    }
                    	    break;

                    	default :
                    	    if ( cnt80 >= 1 ) break loop80;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(80, input);
                                throw eee;
                        }
                        cnt80++;
                    } while (true);


                    }
                    break;
                case 2 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1255:8: 
                    {

                    // AST REWRITE
                    // elements: left
                    // token labels: 
                    // rule labels: retval, left
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    RewriteRuleSubtreeStream stream_left=new RewriteRuleSubtreeStream(adaptor,"rule left",left!=null?left.tree:null);

                    root_0 = (PythonTree)adaptor.nil();
                    // 1255:8: -> $left
                    {
                        adaptor.addChild(root_0, stream_left.nextTree());

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (PythonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {

                  if (or != null) {
                      Token tok = (left!=null?((Token)left.start):null);
                      if ((left!=null?left.leftTok:null) != null) {
                          tok = (left!=null?left.leftTok:null);
                      }
                      retval.tree = actions.makeBoolOp(tok, (left!=null?((PythonTree)left.tree):null), boolopType.Or, list_right);
                  }

            }
        }

        catch (RecognitionException re) {
            errorHandler.reportError(this, re);
            errorHandler.recover(this, input,re);
            retval.tree = (PythonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "or_test"

    public static class and_test_return extends ParserRuleReturnScope {
        public Token leftTok;
        PythonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "and_test"
    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1260:1: and_test[expr_contextType ctype] returns [Token leftTok] : left= not_test[ctype] ( (and= AND right+= not_test[ctype] )+ | -> $left) ;
    public final PythonParser.and_test_return and_test(expr_contextType ctype) throws RecognitionException {
        PythonParser.and_test_return retval = new PythonParser.and_test_return();
        retval.start = input.LT(1);

        PythonTree root_0 = null;

        Token and=null;
        List list_right=null;
        PythonParser.not_test_return left = null;

        PythonParser.not_test_return right = null;
         right = null;
        PythonTree and_tree=null;
        RewriteRuleTokenStream stream_AND=new RewriteRuleTokenStream(adaptor,"token AND");
        RewriteRuleSubtreeStream stream_not_test=new RewriteRuleSubtreeStream(adaptor,"rule not_test");
        try {
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1271:5: (left= not_test[ctype] ( (and= AND right+= not_test[ctype] )+ | -> $left) )
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1271:7: left= not_test[ctype] ( (and= AND right+= not_test[ctype] )+ | -> $left)
            {
            pushFollow(FOLLOW_not_test_in_and_test4415);
            left=not_test(ctype);

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_not_test.add(left.getTree());
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1272:9: ( (and= AND right+= not_test[ctype] )+ | -> $left)
            int alt83=2;
            int LA83_0 = input.LA(1);

            if ( (LA83_0==AND) ) {
                alt83=1;
            }
            else if ( (LA83_0==EOF||LA83_0==NEWLINE||LA83_0==NAME||LA83_0==AS||LA83_0==FOR||LA83_0==IF||(LA83_0>=OR && LA83_0<=ORELSE)||(LA83_0>=RPAREN && LA83_0<=COMMA)||(LA83_0>=SEMI && LA83_0<=DOUBLESLASHEQUAL)||LA83_0==RBRACK||(LA83_0>=RCURLY && LA83_0<=BACKQUOTE)) ) {
                alt83=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 83, 0, input);

                throw nvae;
            }
            switch (alt83) {
                case 1 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1272:11: (and= AND right+= not_test[ctype] )+
                    {
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1272:11: (and= AND right+= not_test[ctype] )+
                    int cnt82=0;
                    loop82:
                    do {
                        int alt82=2;
                        int LA82_0 = input.LA(1);

                        if ( (LA82_0==AND) ) {
                            alt82=1;
                        }


                        switch (alt82) {
                    	case 1 :
                    	    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1272:12: and= AND right+= not_test[ctype]
                    	    {
                    	    and=(Token)match(input,AND,FOLLOW_AND_in_and_test4431); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_AND.add(and);

                    	    pushFollow(FOLLOW_not_test_in_and_test4435);
                    	    right=not_test(ctype);

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_not_test.add(right.getTree());
                    	    if (list_right==null) list_right=new ArrayList();
                    	    list_right.add(right.getTree());


                    	    }
                    	    break;

                    	default :
                    	    if ( cnt82 >= 1 ) break loop82;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(82, input);
                                throw eee;
                        }
                        cnt82++;
                    } while (true);


                    }
                    break;
                case 2 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1275:8: 
                    {

                    // AST REWRITE
                    // elements: left
                    // token labels: 
                    // rule labels: retval, left
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    RewriteRuleSubtreeStream stream_left=new RewriteRuleSubtreeStream(adaptor,"rule left",left!=null?left.tree:null);

                    root_0 = (PythonTree)adaptor.nil();
                    // 1275:8: -> $left
                    {
                        adaptor.addChild(root_0, stream_left.nextTree());

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (PythonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {

                  if (and != null) {
                      Token tok = (left!=null?((Token)left.start):null);
                      if ((left!=null?left.leftTok:null) != null) {
                          tok = (left!=null?left.leftTok:null);
                      }
                      retval.tree = actions.makeBoolOp(tok, (left!=null?((PythonTree)left.tree):null), boolopType.And, list_right);
                  }

            }
        }

        catch (RecognitionException re) {
            errorHandler.reportError(this, re);
            errorHandler.recover(this, input,re);
            retval.tree = (PythonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "and_test"

    public static class not_test_return extends ParserRuleReturnScope {
        public Token leftTok;
        PythonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "not_test"
    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1280:1: not_test[expr_contextType ctype] returns [Token leftTok] : ( NOT nt= not_test[ctype] | comparison[ctype] );
    public final PythonParser.not_test_return not_test(expr_contextType ctype) throws RecognitionException {
        PythonParser.not_test_return retval = new PythonParser.not_test_return();
        retval.start = input.LT(1);

        PythonTree root_0 = null;

        Token NOT185=null;
        PythonParser.not_test_return nt = null;

        PythonParser.comparison_return comparison186 = null;


        PythonTree NOT185_tree=null;


            expr etype = null;

        try {
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1290:5: ( NOT nt= not_test[ctype] | comparison[ctype] )
            int alt84=2;
            int LA84_0 = input.LA(1);

            if ( (LA84_0==NOT) ) {
                alt84=1;
            }
            else if ( (LA84_0==NAME||LA84_0==LPAREN||(LA84_0>=PLUS && LA84_0<=MINUS)||(LA84_0>=TILDE && LA84_0<=LBRACK)||LA84_0==LCURLY||(LA84_0>=BACKQUOTE && LA84_0<=PRO)||LA84_0==PRO_SELECT||LA84_0==ASP||LA84_0==ASP_SELECT||LA84_0==ASP_PATH||(LA84_0>=SELECT && LA84_0<=RDFSELECT)||LA84_0==CAPSFROM||(LA84_0>=MODIFY && LA84_0<=SUBCLASS)) ) {
                alt84=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 84, 0, input);

                throw nvae;
            }
            switch (alt84) {
                case 1 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1290:7: NOT nt= not_test[ctype]
                    {
                    root_0 = (PythonTree)adaptor.nil();

                    NOT185=(Token)match(input,NOT,FOLLOW_NOT_in_not_test4519); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NOT185_tree = (PythonTree)adaptor.create(NOT185);
                    adaptor.addChild(root_0, NOT185_tree);
                    }
                    pushFollow(FOLLOW_not_test_in_not_test4523);
                    nt=not_test(ctype);

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, nt.getTree());
                    if ( state.backtracking==0 ) {

                                etype = new UnaryOp(NOT185, unaryopType.Not, actions.castExpr((nt!=null?((PythonTree)nt.tree):null)));
                            
                    }

                    }
                    break;
                case 2 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1294:7: comparison[ctype]
                    {
                    root_0 = (PythonTree)adaptor.nil();

                    pushFollow(FOLLOW_comparison_in_not_test4540);
                    comparison186=comparison(ctype);

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, comparison186.getTree());
                    if ( state.backtracking==0 ) {

                                retval.leftTok = (comparison186!=null?comparison186.leftTok:null);
                            
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (PythonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {

                 if (etype != null) {
                     retval.tree = etype;
                 }

            }
        }

        catch (RecognitionException re) {
            errorHandler.reportError(this, re);
            errorHandler.recover(this, input,re);
            retval.tree = (PythonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "not_test"

    public static class comparison_return extends ParserRuleReturnScope {
        public Token leftTok;
        PythonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "comparison"
    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1301:1: comparison[expr_contextType ctype] returns [Token leftTok] : left= expr[ctype] ( ( comp_op right+= expr[ctype] )+ | -> $left) ;
    public final PythonParser.comparison_return comparison(expr_contextType ctype) throws RecognitionException {
        PythonParser.comparison_return retval = new PythonParser.comparison_return();
        retval.start = input.LT(1);

        PythonTree root_0 = null;

        List list_right=null;
        PythonParser.expr_return left = null;

        PythonParser.comp_op_return comp_op187 = null;

        PythonParser.expr_return right = null;
         right = null;
        RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
        RewriteRuleSubtreeStream stream_comp_op=new RewriteRuleSubtreeStream(adaptor,"rule comp_op");

            List cmps = new ArrayList();

        try {
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1313:5: (left= expr[ctype] ( ( comp_op right+= expr[ctype] )+ | -> $left) )
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1313:7: left= expr[ctype] ( ( comp_op right+= expr[ctype] )+ | -> $left)
            {
            pushFollow(FOLLOW_expr_in_comparison4589);
            left=expr(ctype);

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expr.add(left.getTree());
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1314:8: ( ( comp_op right+= expr[ctype] )+ | -> $left)
            int alt86=2;
            int LA86_0 = input.LA(1);

            if ( ((LA86_0>=IN && LA86_0<=IS)||LA86_0==NOT||(LA86_0>=LESS && LA86_0<=NOTEQUAL)) ) {
                alt86=1;
            }
            else if ( (LA86_0==EOF||LA86_0==NEWLINE||LA86_0==NAME||(LA86_0>=AND && LA86_0<=AS)||LA86_0==FOR||LA86_0==IF||(LA86_0>=OR && LA86_0<=ORELSE)||(LA86_0>=RPAREN && LA86_0<=COMMA)||(LA86_0>=SEMI && LA86_0<=DOUBLESLASHEQUAL)||LA86_0==RBRACK||(LA86_0>=RCURLY && LA86_0<=BACKQUOTE)) ) {
                alt86=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 86, 0, input);

                throw nvae;
            }
            switch (alt86) {
                case 1 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1314:10: ( comp_op right+= expr[ctype] )+
                    {
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1314:10: ( comp_op right+= expr[ctype] )+
                    int cnt85=0;
                    loop85:
                    do {
                        int alt85=2;
                        int LA85_0 = input.LA(1);

                        if ( ((LA85_0>=IN && LA85_0<=IS)||LA85_0==NOT||(LA85_0>=LESS && LA85_0<=NOTEQUAL)) ) {
                            alt85=1;
                        }


                        switch (alt85) {
                    	case 1 :
                    	    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1314:12: comp_op right+= expr[ctype]
                    	    {
                    	    pushFollow(FOLLOW_comp_op_in_comparison4603);
                    	    comp_op187=comp_op();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_comp_op.add(comp_op187.getTree());
                    	    pushFollow(FOLLOW_expr_in_comparison4607);
                    	    right=expr(ctype);

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_expr.add(right.getTree());
                    	    if (list_right==null) list_right=new ArrayList();
                    	    list_right.add(right.getTree());

                    	    if ( state.backtracking==0 ) {

                    	                     cmps.add((comp_op187!=null?comp_op187.op:null));
                    	                 
                    	    }

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt85 >= 1 ) break loop85;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(85, input);
                                throw eee;
                        }
                        cnt85++;
                    } while (true);


                    }
                    break;
                case 2 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1320:7: 
                    {

                    // AST REWRITE
                    // elements: left
                    // token labels: 
                    // rule labels: retval, left
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    RewriteRuleSubtreeStream stream_left=new RewriteRuleSubtreeStream(adaptor,"rule left",left!=null?left.tree:null);

                    root_0 = (PythonTree)adaptor.nil();
                    // 1320:7: -> $left
                    {
                        adaptor.addChild(root_0, stream_left.nextTree());

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (PythonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {

                  retval.leftTok = (left!=null?left.leftTok:null);
                  if (!cmps.isEmpty()) {
                      retval.tree = new Compare((left!=null?((Token)left.start):null), actions.castExpr((left!=null?((PythonTree)left.tree):null)), actions.makeCmpOps(cmps),
                          actions.castExprs(list_right));
                  }

            }
        }

        catch (RecognitionException re) {
            errorHandler.reportError(this, re);
            errorHandler.recover(this, input,re);
            retval.tree = (PythonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "comparison"

    public static class comp_op_return extends ParserRuleReturnScope {
        public cmpopType op;
        PythonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "comp_op"
    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1325:1: comp_op returns [cmpopType op] : ( LESS | GREATER | EQUAL | GREATEREQUAL | LESSEQUAL | ALT_NOTEQUAL | NOTEQUAL | IN | NOT IN | IS | IS NOT );
    public final PythonParser.comp_op_return comp_op() throws RecognitionException {
        PythonParser.comp_op_return retval = new PythonParser.comp_op_return();
        retval.start = input.LT(1);

        PythonTree root_0 = null;

        Token LESS188=null;
        Token GREATER189=null;
        Token EQUAL190=null;
        Token GREATEREQUAL191=null;
        Token LESSEQUAL192=null;
        Token ALT_NOTEQUAL193=null;
        Token NOTEQUAL194=null;
        Token IN195=null;
        Token NOT196=null;
        Token IN197=null;
        Token IS198=null;
        Token IS199=null;
        Token NOT200=null;

        PythonTree LESS188_tree=null;
        PythonTree GREATER189_tree=null;
        PythonTree EQUAL190_tree=null;
        PythonTree GREATEREQUAL191_tree=null;
        PythonTree LESSEQUAL192_tree=null;
        PythonTree ALT_NOTEQUAL193_tree=null;
        PythonTree NOTEQUAL194_tree=null;
        PythonTree IN195_tree=null;
        PythonTree NOT196_tree=null;
        PythonTree IN197_tree=null;
        PythonTree IS198_tree=null;
        PythonTree IS199_tree=null;
        PythonTree NOT200_tree=null;

        try {
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1327:5: ( LESS | GREATER | EQUAL | GREATEREQUAL | LESSEQUAL | ALT_NOTEQUAL | NOTEQUAL | IN | NOT IN | IS | IS NOT )
            int alt87=11;
            alt87 = dfa87.predict(input);
            switch (alt87) {
                case 1 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1327:7: LESS
                    {
                    root_0 = (PythonTree)adaptor.nil();

                    LESS188=(Token)match(input,LESS,FOLLOW_LESS_in_comp_op4688); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LESS188_tree = (PythonTree)adaptor.create(LESS188);
                    adaptor.addChild(root_0, LESS188_tree);
                    }
                    if ( state.backtracking==0 ) {

                                retval.op = cmpopType.Lt;
                            
                    }

                    }
                    break;
                case 2 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1331:7: GREATER
                    {
                    root_0 = (PythonTree)adaptor.nil();

                    GREATER189=(Token)match(input,GREATER,FOLLOW_GREATER_in_comp_op4704); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    GREATER189_tree = (PythonTree)adaptor.create(GREATER189);
                    adaptor.addChild(root_0, GREATER189_tree);
                    }
                    if ( state.backtracking==0 ) {

                                retval.op = cmpopType.Gt;
                            
                    }

                    }
                    break;
                case 3 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1335:7: EQUAL
                    {
                    root_0 = (PythonTree)adaptor.nil();

                    EQUAL190=(Token)match(input,EQUAL,FOLLOW_EQUAL_in_comp_op4720); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    EQUAL190_tree = (PythonTree)adaptor.create(EQUAL190);
                    adaptor.addChild(root_0, EQUAL190_tree);
                    }
                    if ( state.backtracking==0 ) {

                                retval.op = cmpopType.Eq;
                            
                    }

                    }
                    break;
                case 4 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1339:7: GREATEREQUAL
                    {
                    root_0 = (PythonTree)adaptor.nil();

                    GREATEREQUAL191=(Token)match(input,GREATEREQUAL,FOLLOW_GREATEREQUAL_in_comp_op4736); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    GREATEREQUAL191_tree = (PythonTree)adaptor.create(GREATEREQUAL191);
                    adaptor.addChild(root_0, GREATEREQUAL191_tree);
                    }
                    if ( state.backtracking==0 ) {

                                retval.op = cmpopType.GtE;
                            
                    }

                    }
                    break;
                case 5 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1343:7: LESSEQUAL
                    {
                    root_0 = (PythonTree)adaptor.nil();

                    LESSEQUAL192=(Token)match(input,LESSEQUAL,FOLLOW_LESSEQUAL_in_comp_op4752); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LESSEQUAL192_tree = (PythonTree)adaptor.create(LESSEQUAL192);
                    adaptor.addChild(root_0, LESSEQUAL192_tree);
                    }
                    if ( state.backtracking==0 ) {

                                retval.op = cmpopType.LtE;
                            
                    }

                    }
                    break;
                case 6 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1347:7: ALT_NOTEQUAL
                    {
                    root_0 = (PythonTree)adaptor.nil();

                    ALT_NOTEQUAL193=(Token)match(input,ALT_NOTEQUAL,FOLLOW_ALT_NOTEQUAL_in_comp_op4768); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ALT_NOTEQUAL193_tree = (PythonTree)adaptor.create(ALT_NOTEQUAL193);
                    adaptor.addChild(root_0, ALT_NOTEQUAL193_tree);
                    }
                    if ( state.backtracking==0 ) {

                                retval.op = cmpopType.NotEq;
                            
                    }

                    }
                    break;
                case 7 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1351:7: NOTEQUAL
                    {
                    root_0 = (PythonTree)adaptor.nil();

                    NOTEQUAL194=(Token)match(input,NOTEQUAL,FOLLOW_NOTEQUAL_in_comp_op4784); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NOTEQUAL194_tree = (PythonTree)adaptor.create(NOTEQUAL194);
                    adaptor.addChild(root_0, NOTEQUAL194_tree);
                    }
                    if ( state.backtracking==0 ) {

                                retval.op = cmpopType.NotEq;
                            
                    }

                    }
                    break;
                case 8 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1355:7: IN
                    {
                    root_0 = (PythonTree)adaptor.nil();

                    IN195=(Token)match(input,IN,FOLLOW_IN_in_comp_op4800); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    IN195_tree = (PythonTree)adaptor.create(IN195);
                    adaptor.addChild(root_0, IN195_tree);
                    }
                    if ( state.backtracking==0 ) {

                                retval.op = cmpopType.In;
                            
                    }

                    }
                    break;
                case 9 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1359:7: NOT IN
                    {
                    root_0 = (PythonTree)adaptor.nil();

                    NOT196=(Token)match(input,NOT,FOLLOW_NOT_in_comp_op4816); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NOT196_tree = (PythonTree)adaptor.create(NOT196);
                    adaptor.addChild(root_0, NOT196_tree);
                    }
                    IN197=(Token)match(input,IN,FOLLOW_IN_in_comp_op4818); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    IN197_tree = (PythonTree)adaptor.create(IN197);
                    adaptor.addChild(root_0, IN197_tree);
                    }
                    if ( state.backtracking==0 ) {

                                retval.op = cmpopType.NotIn;
                            
                    }

                    }
                    break;
                case 10 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1363:7: IS
                    {
                    root_0 = (PythonTree)adaptor.nil();

                    IS198=(Token)match(input,IS,FOLLOW_IS_in_comp_op4834); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    IS198_tree = (PythonTree)adaptor.create(IS198);
                    adaptor.addChild(root_0, IS198_tree);
                    }
                    if ( state.backtracking==0 ) {

                                retval.op = cmpopType.Is;
                            
                    }

                    }
                    break;
                case 11 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1367:7: IS NOT
                    {
                    root_0 = (PythonTree)adaptor.nil();

                    IS199=(Token)match(input,IS,FOLLOW_IS_in_comp_op4850); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    IS199_tree = (PythonTree)adaptor.create(IS199);
                    adaptor.addChild(root_0, IS199_tree);
                    }
                    NOT200=(Token)match(input,NOT,FOLLOW_NOT_in_comp_op4852); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NOT200_tree = (PythonTree)adaptor.create(NOT200);
                    adaptor.addChild(root_0, NOT200_tree);
                    }
                    if ( state.backtracking==0 ) {

                                retval.op = cmpopType.IsNot;
                            
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (PythonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException re) {
            errorHandler.reportError(this, re);
            errorHandler.recover(this, input,re);
            retval.tree = (PythonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "comp_op"

    protected static class expr_scope {
        expr_contextType ctype;
    }
    protected Stack expr_stack = new Stack();

    public static class expr_return extends ParserRuleReturnScope {
        public Token leftTok;
        PythonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "expr"
    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1374:1: expr[expr_contextType ect] returns [Token leftTok] : left= xor_expr ( (op= VBAR right+= xor_expr )+ | -> $left) ;
    public final PythonParser.expr_return expr(expr_contextType ect) throws RecognitionException {
        expr_stack.push(new expr_scope());
        PythonParser.expr_return retval = new PythonParser.expr_return();
        retval.start = input.LT(1);

        PythonTree root_0 = null;

        Token op=null;
        List list_right=null;
        PythonParser.xor_expr_return left = null;

        PythonParser.xor_expr_return right = null;
         right = null;
        PythonTree op_tree=null;
        RewriteRuleTokenStream stream_VBAR=new RewriteRuleTokenStream(adaptor,"token VBAR");
        RewriteRuleSubtreeStream stream_xor_expr=new RewriteRuleSubtreeStream(adaptor,"rule xor_expr");

            ((expr_scope)expr_stack.peek()).ctype = ect;

        try {
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1392:5: (left= xor_expr ( (op= VBAR right+= xor_expr )+ | -> $left) )
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1392:7: left= xor_expr ( (op= VBAR right+= xor_expr )+ | -> $left)
            {
            pushFollow(FOLLOW_xor_expr_in_expr4904);
            left=xor_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_xor_expr.add(left.getTree());
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1393:9: ( (op= VBAR right+= xor_expr )+ | -> $left)
            int alt89=2;
            int LA89_0 = input.LA(1);

            if ( (LA89_0==VBAR) ) {
                alt89=1;
            }
            else if ( (LA89_0==EOF||LA89_0==NEWLINE||LA89_0==NAME||(LA89_0>=AND && LA89_0<=AS)||LA89_0==FOR||LA89_0==IF||(LA89_0>=IN && LA89_0<=IS)||(LA89_0>=NOT && LA89_0<=ORELSE)||(LA89_0>=LPAREN && LA89_0<=COMMA)||(LA89_0>=SEMI && LA89_0<=DOUBLESLASHEQUAL)||(LA89_0>=LESS && LA89_0<=NOTEQUAL)||LA89_0==RBRACK||(LA89_0>=RCURLY && LA89_0<=BACKQUOTE)||LA89_0==ORDER||(LA89_0>=WHERE && LA89_0<=CAPSOR)||(LA89_0>=REQD && LA89_0<=INITVAL)) ) {
                alt89=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 89, 0, input);

                throw nvae;
            }
            switch (alt89) {
                case 1 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1393:11: (op= VBAR right+= xor_expr )+
                    {
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1393:11: (op= VBAR right+= xor_expr )+
                    int cnt88=0;
                    loop88:
                    do {
                        int alt88=2;
                        int LA88_0 = input.LA(1);

                        if ( (LA88_0==VBAR) ) {
                            alt88=1;
                        }


                        switch (alt88) {
                    	case 1 :
                    	    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1393:12: op= VBAR right+= xor_expr
                    	    {
                    	    op=(Token)match(input,VBAR,FOLLOW_VBAR_in_expr4919); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_VBAR.add(op);

                    	    pushFollow(FOLLOW_xor_expr_in_expr4923);
                    	    right=xor_expr();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_xor_expr.add(right.getTree());
                    	    if (list_right==null) list_right=new ArrayList();
                    	    list_right.add(right.getTree());


                    	    }
                    	    break;

                    	default :
                    	    if ( cnt88 >= 1 ) break loop88;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(88, input);
                                throw eee;
                        }
                        cnt88++;
                    } while (true);


                    }
                    break;
                case 2 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1396:8: 
                    {

                    // AST REWRITE
                    // elements: left
                    // token labels: 
                    // rule labels: retval, left
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    RewriteRuleSubtreeStream stream_left=new RewriteRuleSubtreeStream(adaptor,"rule left",left!=null?left.tree:null);

                    root_0 = (PythonTree)adaptor.nil();
                    // 1396:8: -> $left
                    {
                        adaptor.addChild(root_0, stream_left.nextTree());

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (PythonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {

                  retval.leftTok = (left!=null?left.lparen:null);
                  if (op != null) {
                      Token tok = (left!=null?((Token)left.start):null);
                      if ((left!=null?left.lparen:null) != null) {
                          tok = (left!=null?left.lparen:null);
                      }
                      retval.tree = actions.makeBinOp(tok, (left!=null?((PythonTree)left.tree):null), operatorType.BitOr, list_right);
                  }

            }
        }

        catch (RecognitionException re) {
            errorHandler.reportError(this, re);
            errorHandler.recover(this, input,re);
            retval.tree = (PythonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
        }
        finally {
            expr_stack.pop();
        }
        return retval;
    }
    // $ANTLR end "expr"

    public static class xor_expr_return extends ParserRuleReturnScope {
        public Token lparen = null;
        PythonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "xor_expr"
    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1402:1: xor_expr returns [Token lparen = null] : left= and_expr ( (op= CIRCUMFLEX right+= and_expr )+ | -> $left) ;
    public final PythonParser.xor_expr_return xor_expr() throws RecognitionException {
        PythonParser.xor_expr_return retval = new PythonParser.xor_expr_return();
        retval.start = input.LT(1);

        PythonTree root_0 = null;

        Token op=null;
        List list_right=null;
        PythonParser.and_expr_return left = null;

        PythonParser.and_expr_return right = null;
         right = null;
        PythonTree op_tree=null;
        RewriteRuleTokenStream stream_CIRCUMFLEX=new RewriteRuleTokenStream(adaptor,"token CIRCUMFLEX");
        RewriteRuleSubtreeStream stream_and_expr=new RewriteRuleSubtreeStream(adaptor,"rule and_expr");
        try {
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1414:5: (left= and_expr ( (op= CIRCUMFLEX right+= and_expr )+ | -> $left) )
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1414:7: left= and_expr ( (op= CIRCUMFLEX right+= and_expr )+ | -> $left)
            {
            pushFollow(FOLLOW_and_expr_in_xor_expr5002);
            left=and_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_and_expr.add(left.getTree());
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1415:9: ( (op= CIRCUMFLEX right+= and_expr )+ | -> $left)
            int alt91=2;
            int LA91_0 = input.LA(1);

            if ( (LA91_0==CIRCUMFLEX) ) {
                alt91=1;
            }
            else if ( (LA91_0==EOF||LA91_0==NEWLINE||LA91_0==NAME||(LA91_0>=AND && LA91_0<=AS)||LA91_0==FOR||LA91_0==IF||(LA91_0>=IN && LA91_0<=IS)||(LA91_0>=NOT && LA91_0<=ORELSE)||(LA91_0>=LPAREN && LA91_0<=COMMA)||(LA91_0>=SEMI && LA91_0<=DOUBLESLASHEQUAL)||(LA91_0>=LESS && LA91_0<=VBAR)||LA91_0==RBRACK||(LA91_0>=RCURLY && LA91_0<=BACKQUOTE)||LA91_0==ORDER||(LA91_0>=WHERE && LA91_0<=CAPSOR)||(LA91_0>=REQD && LA91_0<=INITVAL)) ) {
                alt91=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 91, 0, input);

                throw nvae;
            }
            switch (alt91) {
                case 1 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1415:11: (op= CIRCUMFLEX right+= and_expr )+
                    {
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1415:11: (op= CIRCUMFLEX right+= and_expr )+
                    int cnt90=0;
                    loop90:
                    do {
                        int alt90=2;
                        int LA90_0 = input.LA(1);

                        if ( (LA90_0==CIRCUMFLEX) ) {
                            alt90=1;
                        }


                        switch (alt90) {
                    	case 1 :
                    	    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1415:12: op= CIRCUMFLEX right+= and_expr
                    	    {
                    	    op=(Token)match(input,CIRCUMFLEX,FOLLOW_CIRCUMFLEX_in_xor_expr5017); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_CIRCUMFLEX.add(op);

                    	    pushFollow(FOLLOW_and_expr_in_xor_expr5021);
                    	    right=and_expr();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_and_expr.add(right.getTree());
                    	    if (list_right==null) list_right=new ArrayList();
                    	    list_right.add(right.getTree());


                    	    }
                    	    break;

                    	default :
                    	    if ( cnt90 >= 1 ) break loop90;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(90, input);
                                throw eee;
                        }
                        cnt90++;
                    } while (true);


                    }
                    break;
                case 2 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1418:8: 
                    {

                    // AST REWRITE
                    // elements: left
                    // token labels: 
                    // rule labels: retval, left
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    RewriteRuleSubtreeStream stream_left=new RewriteRuleSubtreeStream(adaptor,"rule left",left!=null?left.tree:null);

                    root_0 = (PythonTree)adaptor.nil();
                    // 1418:8: -> $left
                    {
                        adaptor.addChild(root_0, stream_left.nextTree());

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (PythonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {

                  if (op != null) {
                      Token tok = (left!=null?((Token)left.start):null);
                      if ((left!=null?left.lparen:null) != null) {
                          tok = (left!=null?left.lparen:null);
                      }
                      retval.tree = actions.makeBinOp(tok, (left!=null?((PythonTree)left.tree):null), operatorType.BitXor, list_right);
                  }
                  retval.lparen = (left!=null?left.lparen:null);

            }
        }

        catch (RecognitionException re) {
            errorHandler.reportError(this, re);
            errorHandler.recover(this, input,re);
            retval.tree = (PythonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "xor_expr"

    public static class and_expr_return extends ParserRuleReturnScope {
        public Token lparen = null;
        PythonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "and_expr"
    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1423:1: and_expr returns [Token lparen = null] : left= shift_expr ( (op= AMPER right+= shift_expr )+ | -> $left) ;
    public final PythonParser.and_expr_return and_expr() throws RecognitionException {
        PythonParser.and_expr_return retval = new PythonParser.and_expr_return();
        retval.start = input.LT(1);

        PythonTree root_0 = null;

        Token op=null;
        List list_right=null;
        PythonParser.shift_expr_return left = null;

        PythonParser.shift_expr_return right = null;
         right = null;
        PythonTree op_tree=null;
        RewriteRuleTokenStream stream_AMPER=new RewriteRuleTokenStream(adaptor,"token AMPER");
        RewriteRuleSubtreeStream stream_shift_expr=new RewriteRuleSubtreeStream(adaptor,"rule shift_expr");
        try {
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1435:5: (left= shift_expr ( (op= AMPER right+= shift_expr )+ | -> $left) )
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1435:7: left= shift_expr ( (op= AMPER right+= shift_expr )+ | -> $left)
            {
            pushFollow(FOLLOW_shift_expr_in_and_expr5099);
            left=shift_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_shift_expr.add(left.getTree());
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1436:9: ( (op= AMPER right+= shift_expr )+ | -> $left)
            int alt93=2;
            int LA93_0 = input.LA(1);

            if ( (LA93_0==AMPER) ) {
                alt93=1;
            }
            else if ( (LA93_0==EOF||LA93_0==NEWLINE||LA93_0==NAME||(LA93_0>=AND && LA93_0<=AS)||LA93_0==FOR||LA93_0==IF||(LA93_0>=IN && LA93_0<=IS)||(LA93_0>=NOT && LA93_0<=ORELSE)||(LA93_0>=LPAREN && LA93_0<=COMMA)||(LA93_0>=SEMI && LA93_0<=DOUBLESLASHEQUAL)||(LA93_0>=LESS && LA93_0<=CIRCUMFLEX)||LA93_0==RBRACK||(LA93_0>=RCURLY && LA93_0<=BACKQUOTE)||LA93_0==ORDER||(LA93_0>=WHERE && LA93_0<=CAPSOR)||(LA93_0>=REQD && LA93_0<=INITVAL)) ) {
                alt93=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 93, 0, input);

                throw nvae;
            }
            switch (alt93) {
                case 1 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1436:11: (op= AMPER right+= shift_expr )+
                    {
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1436:11: (op= AMPER right+= shift_expr )+
                    int cnt92=0;
                    loop92:
                    do {
                        int alt92=2;
                        int LA92_0 = input.LA(1);

                        if ( (LA92_0==AMPER) ) {
                            alt92=1;
                        }


                        switch (alt92) {
                    	case 1 :
                    	    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1436:12: op= AMPER right+= shift_expr
                    	    {
                    	    op=(Token)match(input,AMPER,FOLLOW_AMPER_in_and_expr5114); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_AMPER.add(op);

                    	    pushFollow(FOLLOW_shift_expr_in_and_expr5118);
                    	    right=shift_expr();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_shift_expr.add(right.getTree());
                    	    if (list_right==null) list_right=new ArrayList();
                    	    list_right.add(right.getTree());


                    	    }
                    	    break;

                    	default :
                    	    if ( cnt92 >= 1 ) break loop92;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(92, input);
                                throw eee;
                        }
                        cnt92++;
                    } while (true);


                    }
                    break;
                case 2 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1439:8: 
                    {

                    // AST REWRITE
                    // elements: left
                    // token labels: 
                    // rule labels: retval, left
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    RewriteRuleSubtreeStream stream_left=new RewriteRuleSubtreeStream(adaptor,"rule left",left!=null?left.tree:null);

                    root_0 = (PythonTree)adaptor.nil();
                    // 1439:8: -> $left
                    {
                        adaptor.addChild(root_0, stream_left.nextTree());

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (PythonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {

                  if (op != null) {
                      Token tok = (left!=null?((Token)left.start):null);
                      if ((left!=null?left.lparen:null) != null) {
                          tok = (left!=null?left.lparen:null);
                      }
                      retval.tree = actions.makeBinOp(tok, (left!=null?((PythonTree)left.tree):null), operatorType.BitAnd, list_right);
                  }
                  retval.lparen = (left!=null?left.lparen:null);

            }
        }

        catch (RecognitionException re) {
            errorHandler.reportError(this, re);
            errorHandler.recover(this, input,re);
            retval.tree = (PythonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "and_expr"

    public static class shift_expr_return extends ParserRuleReturnScope {
        public Token lparen = null;
        PythonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "shift_expr"
    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1444:1: shift_expr returns [Token lparen = null] : left= arith_expr ( ( shift_op right+= arith_expr )+ | -> $left) ;
    public final PythonParser.shift_expr_return shift_expr() throws RecognitionException {
        PythonParser.shift_expr_return retval = new PythonParser.shift_expr_return();
        retval.start = input.LT(1);

        PythonTree root_0 = null;

        List list_right=null;
        PythonParser.arith_expr_return left = null;

        PythonParser.shift_op_return shift_op201 = null;

        PythonParser.arith_expr_return right = null;
         right = null;
        RewriteRuleSubtreeStream stream_arith_expr=new RewriteRuleSubtreeStream(adaptor,"rule arith_expr");
        RewriteRuleSubtreeStream stream_shift_op=new RewriteRuleSubtreeStream(adaptor,"rule shift_op");

            List ops = new ArrayList();
            List toks = new ArrayList();

        try {
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1460:5: (left= arith_expr ( ( shift_op right+= arith_expr )+ | -> $left) )
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1460:7: left= arith_expr ( ( shift_op right+= arith_expr )+ | -> $left)
            {
            pushFollow(FOLLOW_arith_expr_in_shift_expr5201);
            left=arith_expr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_arith_expr.add(left.getTree());
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1461:9: ( ( shift_op right+= arith_expr )+ | -> $left)
            int alt95=2;
            int LA95_0 = input.LA(1);

            if ( (LA95_0==RIGHTSHIFT||LA95_0==LEFTSHIFT) ) {
                alt95=1;
            }
            else if ( (LA95_0==EOF||LA95_0==NEWLINE||LA95_0==NAME||(LA95_0>=AND && LA95_0<=AS)||LA95_0==FOR||LA95_0==IF||(LA95_0>=IN && LA95_0<=IS)||(LA95_0>=NOT && LA95_0<=ORELSE)||(LA95_0>=LPAREN && LA95_0<=COMMA)||(LA95_0>=SEMI && LA95_0<=DOUBLESLASHEQUAL)||(LA95_0>=LESS && LA95_0<=AMPER)||LA95_0==RBRACK||(LA95_0>=RCURLY && LA95_0<=BACKQUOTE)||LA95_0==ORDER||(LA95_0>=WHERE && LA95_0<=CAPSOR)||(LA95_0>=REQD && LA95_0<=INITVAL)) ) {
                alt95=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 95, 0, input);

                throw nvae;
            }
            switch (alt95) {
                case 1 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1461:11: ( shift_op right+= arith_expr )+
                    {
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1461:11: ( shift_op right+= arith_expr )+
                    int cnt94=0;
                    loop94:
                    do {
                        int alt94=2;
                        int LA94_0 = input.LA(1);

                        if ( (LA94_0==RIGHTSHIFT||LA94_0==LEFTSHIFT) ) {
                            alt94=1;
                        }


                        switch (alt94) {
                    	case 1 :
                    	    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1461:13: shift_op right+= arith_expr
                    	    {
                    	    pushFollow(FOLLOW_shift_op_in_shift_expr5215);
                    	    shift_op201=shift_op();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_shift_op.add(shift_op201.getTree());
                    	    pushFollow(FOLLOW_arith_expr_in_shift_expr5219);
                    	    right=arith_expr();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_arith_expr.add(right.getTree());
                    	    if (list_right==null) list_right=new ArrayList();
                    	    list_right.add(right.getTree());

                    	    if ( state.backtracking==0 ) {

                    	                      ops.add((shift_op201!=null?shift_op201.op:null));
                    	                      toks.add((shift_op201!=null?((Token)shift_op201.start):null));
                    	                  
                    	    }

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt94 >= 1 ) break loop94;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(94, input);
                                throw eee;
                        }
                        cnt94++;
                    } while (true);


                    }
                    break;
                case 2 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1468:8: 
                    {

                    // AST REWRITE
                    // elements: left
                    // token labels: 
                    // rule labels: retval, left
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    RewriteRuleSubtreeStream stream_left=new RewriteRuleSubtreeStream(adaptor,"rule left",left!=null?left.tree:null);

                    root_0 = (PythonTree)adaptor.nil();
                    // 1468:8: -> $left
                    {
                        adaptor.addChild(root_0, stream_left.nextTree());

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (PythonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {

                  if (!ops.isEmpty()) {
                      Token tok = (left!=null?((Token)left.start):null);
                      if ((left!=null?left.lparen:null) != null) {
                          tok = (left!=null?left.lparen:null);
                      }
                      retval.tree = actions.makeBinOp(tok, (left!=null?((PythonTree)left.tree):null), ops, list_right, toks);
                  }
                  retval.lparen = (left!=null?left.lparen:null);

            }
        }

        catch (RecognitionException re) {
            errorHandler.reportError(this, re);
            errorHandler.recover(this, input,re);
            retval.tree = (PythonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "shift_expr"

    public static class shift_op_return extends ParserRuleReturnScope {
        public operatorType op;
        PythonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "shift_op"
    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1472:1: shift_op returns [operatorType op] : ( LEFTSHIFT | RIGHTSHIFT );
    public final PythonParser.shift_op_return shift_op() throws RecognitionException {
        PythonParser.shift_op_return retval = new PythonParser.shift_op_return();
        retval.start = input.LT(1);

        PythonTree root_0 = null;

        Token LEFTSHIFT202=null;
        Token RIGHTSHIFT203=null;

        PythonTree LEFTSHIFT202_tree=null;
        PythonTree RIGHTSHIFT203_tree=null;

        try {
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1474:5: ( LEFTSHIFT | RIGHTSHIFT )
            int alt96=2;
            int LA96_0 = input.LA(1);

            if ( (LA96_0==LEFTSHIFT) ) {
                alt96=1;
            }
            else if ( (LA96_0==RIGHTSHIFT) ) {
                alt96=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 96, 0, input);

                throw nvae;
            }
            switch (alt96) {
                case 1 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1474:7: LEFTSHIFT
                    {
                    root_0 = (PythonTree)adaptor.nil();

                    LEFTSHIFT202=(Token)match(input,LEFTSHIFT,FOLLOW_LEFTSHIFT_in_shift_op5303); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LEFTSHIFT202_tree = (PythonTree)adaptor.create(LEFTSHIFT202);
                    adaptor.addChild(root_0, LEFTSHIFT202_tree);
                    }
                    if ( state.backtracking==0 ) {

                                retval.op = operatorType.LShift;
                            
                    }

                    }
                    break;
                case 2 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1478:7: RIGHTSHIFT
                    {
                    root_0 = (PythonTree)adaptor.nil();

                    RIGHTSHIFT203=(Token)match(input,RIGHTSHIFT,FOLLOW_RIGHTSHIFT_in_shift_op5319); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RIGHTSHIFT203_tree = (PythonTree)adaptor.create(RIGHTSHIFT203);
                    adaptor.addChild(root_0, RIGHTSHIFT203_tree);
                    }
                    if ( state.backtracking==0 ) {

                                retval.op = operatorType.RShift;
                            
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (PythonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException re) {
            errorHandler.reportError(this, re);
            errorHandler.recover(this, input,re);
            retval.tree = (PythonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "shift_op"

    public static class arith_expr_return extends ParserRuleReturnScope {
        public Token lparen = null;
        PythonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "arith_expr"
    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1485:1: arith_expr returns [Token lparen = null] : left= term ( ( arith_op right+= term )+ | -> $left) ;
    public final PythonParser.arith_expr_return arith_expr() throws RecognitionException {
        PythonParser.arith_expr_return retval = new PythonParser.arith_expr_return();
        retval.start = input.LT(1);

        PythonTree root_0 = null;

        List list_right=null;
        PythonParser.term_return left = null;

        PythonParser.arith_op_return arith_op204 = null;

        PythonParser.term_return right = null;
         right = null;
        RewriteRuleSubtreeStream stream_arith_op=new RewriteRuleSubtreeStream(adaptor,"rule arith_op");
        RewriteRuleSubtreeStream stream_term=new RewriteRuleSubtreeStream(adaptor,"rule term");

            List ops = new ArrayList();
            List toks = new ArrayList();

        try {
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1501:5: (left= term ( ( arith_op right+= term )+ | -> $left) )
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1501:7: left= term ( ( arith_op right+= term )+ | -> $left)
            {
            pushFollow(FOLLOW_term_in_arith_expr5365);
            left=term();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_term.add(left.getTree());
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1502:9: ( ( arith_op right+= term )+ | -> $left)
            int alt98=2;
            int LA98_0 = input.LA(1);

            if ( ((LA98_0>=PLUS && LA98_0<=MINUS)) ) {
                alt98=1;
            }
            else if ( (LA98_0==EOF||LA98_0==NEWLINE||LA98_0==NAME||(LA98_0>=AND && LA98_0<=AS)||LA98_0==FOR||LA98_0==IF||(LA98_0>=IN && LA98_0<=IS)||(LA98_0>=NOT && LA98_0<=ORELSE)||(LA98_0>=LPAREN && LA98_0<=COMMA)||(LA98_0>=SEMI && LA98_0<=LEFTSHIFT)||LA98_0==RBRACK||(LA98_0>=RCURLY && LA98_0<=BACKQUOTE)||LA98_0==ORDER||(LA98_0>=WHERE && LA98_0<=CAPSOR)||(LA98_0>=REQD && LA98_0<=INITVAL)) ) {
                alt98=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 98, 0, input);

                throw nvae;
            }
            switch (alt98) {
                case 1 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1502:11: ( arith_op right+= term )+
                    {
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1502:11: ( arith_op right+= term )+
                    int cnt97=0;
                    loop97:
                    do {
                        int alt97=2;
                        int LA97_0 = input.LA(1);

                        if ( ((LA97_0>=PLUS && LA97_0<=MINUS)) ) {
                            alt97=1;
                        }


                        switch (alt97) {
                    	case 1 :
                    	    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1502:12: arith_op right+= term
                    	    {
                    	    pushFollow(FOLLOW_arith_op_in_arith_expr5378);
                    	    arith_op204=arith_op();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_arith_op.add(arith_op204.getTree());
                    	    pushFollow(FOLLOW_term_in_arith_expr5382);
                    	    right=term();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_term.add(right.getTree());
                    	    if (list_right==null) list_right=new ArrayList();
                    	    list_right.add(right.getTree());

                    	    if ( state.backtracking==0 ) {

                    	                     ops.add((arith_op204!=null?arith_op204.op:null));
                    	                     toks.add((arith_op204!=null?((Token)arith_op204.start):null));
                    	                 
                    	    }

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt97 >= 1 ) break loop97;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(97, input);
                                throw eee;
                        }
                        cnt97++;
                    } while (true);


                    }
                    break;
                case 2 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1509:8: 
                    {

                    // AST REWRITE
                    // elements: left
                    // token labels: 
                    // rule labels: retval, left
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    RewriteRuleSubtreeStream stream_left=new RewriteRuleSubtreeStream(adaptor,"rule left",left!=null?left.tree:null);

                    root_0 = (PythonTree)adaptor.nil();
                    // 1509:8: -> $left
                    {
                        adaptor.addChild(root_0, stream_left.nextTree());

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (PythonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {

                  if (!ops.isEmpty()) {
                      Token tok = (left!=null?((Token)left.start):null);
                      if ((left!=null?left.lparen:null) != null) {
                          tok = (left!=null?left.lparen:null);
                      }
                      retval.tree = actions.makeBinOp(tok, (left!=null?((PythonTree)left.tree):null), ops, list_right, toks);
                  }
                  retval.lparen = (left!=null?left.lparen:null);

            }
        }
        catch (RewriteCardinalityException rce) {

                    PythonTree badNode = (PythonTree)adaptor.errorNode(input, retval.start, input.LT(-1), null);
                    retval.tree = badNode;
                    errorHandler.error("Internal Parser Error", badNode);
                
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "arith_expr"

    public static class arith_op_return extends ParserRuleReturnScope {
        public operatorType op;
        PythonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "arith_op"
    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1521:1: arith_op returns [operatorType op] : ( PLUS | MINUS );
    public final PythonParser.arith_op_return arith_op() throws RecognitionException {
        PythonParser.arith_op_return retval = new PythonParser.arith_op_return();
        retval.start = input.LT(1);

        PythonTree root_0 = null;

        Token PLUS205=null;
        Token MINUS206=null;

        PythonTree PLUS205_tree=null;
        PythonTree MINUS206_tree=null;

        try {
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1523:5: ( PLUS | MINUS )
            int alt99=2;
            int LA99_0 = input.LA(1);

            if ( (LA99_0==PLUS) ) {
                alt99=1;
            }
            else if ( (LA99_0==MINUS) ) {
                alt99=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 99, 0, input);

                throw nvae;
            }
            switch (alt99) {
                case 1 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1523:7: PLUS
                    {
                    root_0 = (PythonTree)adaptor.nil();

                    PLUS205=(Token)match(input,PLUS,FOLLOW_PLUS_in_arith_op5490); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PLUS205_tree = (PythonTree)adaptor.create(PLUS205);
                    adaptor.addChild(root_0, PLUS205_tree);
                    }
                    if ( state.backtracking==0 ) {

                                retval.op = operatorType.Add;
                            
                    }

                    }
                    break;
                case 2 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1527:7: MINUS
                    {
                    root_0 = (PythonTree)adaptor.nil();

                    MINUS206=(Token)match(input,MINUS,FOLLOW_MINUS_in_arith_op5506); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MINUS206_tree = (PythonTree)adaptor.create(MINUS206);
                    adaptor.addChild(root_0, MINUS206_tree);
                    }
                    if ( state.backtracking==0 ) {

                                retval.op = operatorType.Sub;
                            
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (PythonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException re) {
            errorHandler.reportError(this, re);
            errorHandler.recover(this, input,re);
            retval.tree = (PythonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "arith_op"

    public static class term_return extends ParserRuleReturnScope {
        public Token lparen = null;
        PythonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "term"
    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1534:1: term returns [Token lparen = null] : left= factor ( ( term_op right+= factor )+ | -> $left) ;
    public final PythonParser.term_return term() throws RecognitionException {
        PythonParser.term_return retval = new PythonParser.term_return();
        retval.start = input.LT(1);

        PythonTree root_0 = null;

        List list_right=null;
        PythonParser.factor_return left = null;

        PythonParser.term_op_return term_op207 = null;

        PythonParser.factor_return right = null;
         right = null;
        RewriteRuleSubtreeStream stream_term_op=new RewriteRuleSubtreeStream(adaptor,"rule term_op");
        RewriteRuleSubtreeStream stream_factor=new RewriteRuleSubtreeStream(adaptor,"rule factor");

            List ops = new ArrayList();
            List toks = new ArrayList();

        try {
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1550:5: (left= factor ( ( term_op right+= factor )+ | -> $left) )
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1550:7: left= factor ( ( term_op right+= factor )+ | -> $left)
            {
            pushFollow(FOLLOW_factor_in_term5552);
            left=factor();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_factor.add(left.getTree());
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1551:9: ( ( term_op right+= factor )+ | -> $left)
            int alt101=2;
            int LA101_0 = input.LA(1);

            if ( (LA101_0==STAR||(LA101_0>=SLASH && LA101_0<=DOUBLESLASH)) ) {
                alt101=1;
            }
            else if ( (LA101_0==EOF||LA101_0==NEWLINE||LA101_0==NAME||(LA101_0>=AND && LA101_0<=AS)||LA101_0==FOR||LA101_0==IF||(LA101_0>=IN && LA101_0<=IS)||(LA101_0>=NOT && LA101_0<=ORELSE)||(LA101_0>=LPAREN && LA101_0<=COMMA)||(LA101_0>=SEMI && LA101_0<=MINUS)||LA101_0==RBRACK||(LA101_0>=RCURLY && LA101_0<=BACKQUOTE)||LA101_0==ORDER||(LA101_0>=WHERE && LA101_0<=CAPSOR)||(LA101_0>=REQD && LA101_0<=INITVAL)) ) {
                alt101=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 101, 0, input);

                throw nvae;
            }
            switch (alt101) {
                case 1 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1551:11: ( term_op right+= factor )+
                    {
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1551:11: ( term_op right+= factor )+
                    int cnt100=0;
                    loop100:
                    do {
                        int alt100=2;
                        int LA100_0 = input.LA(1);

                        if ( (LA100_0==STAR||(LA100_0>=SLASH && LA100_0<=DOUBLESLASH)) ) {
                            alt100=1;
                        }


                        switch (alt100) {
                    	case 1 :
                    	    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1551:12: term_op right+= factor
                    	    {
                    	    pushFollow(FOLLOW_term_op_in_term5565);
                    	    term_op207=term_op();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_term_op.add(term_op207.getTree());
                    	    pushFollow(FOLLOW_factor_in_term5569);
                    	    right=factor();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_factor.add(right.getTree());
                    	    if (list_right==null) list_right=new ArrayList();
                    	    list_right.add(right.getTree());

                    	    if ( state.backtracking==0 ) {

                    	                    ops.add((term_op207!=null?term_op207.op:null));
                    	                    toks.add((term_op207!=null?((Token)term_op207.start):null));
                    	                
                    	    }

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt100 >= 1 ) break loop100;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(100, input);
                                throw eee;
                        }
                        cnt100++;
                    } while (true);


                    }
                    break;
                case 2 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1558:8: 
                    {

                    // AST REWRITE
                    // elements: left
                    // token labels: 
                    // rule labels: retval, left
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    RewriteRuleSubtreeStream stream_left=new RewriteRuleSubtreeStream(adaptor,"rule left",left!=null?left.tree:null);

                    root_0 = (PythonTree)adaptor.nil();
                    // 1558:8: -> $left
                    {
                        adaptor.addChild(root_0, stream_left.nextTree());

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (PythonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {

                  retval.lparen = (left!=null?left.lparen:null);
                  if (!ops.isEmpty()) {
                      Token tok = (left!=null?((Token)left.start):null);
                      if ((left!=null?left.lparen:null) != null) {
                          tok = (left!=null?left.lparen:null);
                      }
                      retval.tree = actions.makeBinOp(tok, (left!=null?((PythonTree)left.tree):null), ops, list_right, toks);
                  }

            }
        }

        catch (RecognitionException re) {
            errorHandler.reportError(this, re);
            errorHandler.recover(this, input,re);
            retval.tree = (PythonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "term"

    public static class term_op_return extends ParserRuleReturnScope {
        public operatorType op;
        PythonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "term_op"
    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1562:1: term_op returns [operatorType op] : ( STAR | SLASH | PERCENT | DOUBLESLASH );
    public final PythonParser.term_op_return term_op() throws RecognitionException {
        PythonParser.term_op_return retval = new PythonParser.term_op_return();
        retval.start = input.LT(1);

        PythonTree root_0 = null;

        Token STAR208=null;
        Token SLASH209=null;
        Token PERCENT210=null;
        Token DOUBLESLASH211=null;

        PythonTree STAR208_tree=null;
        PythonTree SLASH209_tree=null;
        PythonTree PERCENT210_tree=null;
        PythonTree DOUBLESLASH211_tree=null;

        try {
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1564:5: ( STAR | SLASH | PERCENT | DOUBLESLASH )
            int alt102=4;
            switch ( input.LA(1) ) {
            case STAR:
                {
                alt102=1;
                }
                break;
            case SLASH:
                {
                alt102=2;
                }
                break;
            case PERCENT:
                {
                alt102=3;
                }
                break;
            case DOUBLESLASH:
                {
                alt102=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 102, 0, input);

                throw nvae;
            }

            switch (alt102) {
                case 1 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1564:7: STAR
                    {
                    root_0 = (PythonTree)adaptor.nil();

                    STAR208=(Token)match(input,STAR,FOLLOW_STAR_in_term_op5651); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STAR208_tree = (PythonTree)adaptor.create(STAR208);
                    adaptor.addChild(root_0, STAR208_tree);
                    }
                    if ( state.backtracking==0 ) {

                                retval.op = operatorType.Mult;
                            
                    }

                    }
                    break;
                case 2 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1568:7: SLASH
                    {
                    root_0 = (PythonTree)adaptor.nil();

                    SLASH209=(Token)match(input,SLASH,FOLLOW_SLASH_in_term_op5667); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SLASH209_tree = (PythonTree)adaptor.create(SLASH209);
                    adaptor.addChild(root_0, SLASH209_tree);
                    }
                    if ( state.backtracking==0 ) {

                                retval.op = operatorType.Div;
                            
                    }

                    }
                    break;
                case 3 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1572:7: PERCENT
                    {
                    root_0 = (PythonTree)adaptor.nil();

                    PERCENT210=(Token)match(input,PERCENT,FOLLOW_PERCENT_in_term_op5683); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PERCENT210_tree = (PythonTree)adaptor.create(PERCENT210);
                    adaptor.addChild(root_0, PERCENT210_tree);
                    }
                    if ( state.backtracking==0 ) {

                                retval.op = operatorType.Mod;
                            
                    }

                    }
                    break;
                case 4 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1576:7: DOUBLESLASH
                    {
                    root_0 = (PythonTree)adaptor.nil();

                    DOUBLESLASH211=(Token)match(input,DOUBLESLASH,FOLLOW_DOUBLESLASH_in_term_op5699); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DOUBLESLASH211_tree = (PythonTree)adaptor.create(DOUBLESLASH211);
                    adaptor.addChild(root_0, DOUBLESLASH211_tree);
                    }
                    if ( state.backtracking==0 ) {

                                retval.op = operatorType.FloorDiv;
                            
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (PythonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException re) {
            errorHandler.reportError(this, re);
            errorHandler.recover(this, input,re);
            retval.tree = (PythonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "term_op"

    public static class factor_return extends ParserRuleReturnScope {
        public expr etype;
        public Token lparen = null;
        PythonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "factor"
    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1583:1: factor returns [expr etype, Token lparen = null] : ( PLUS p= factor | MINUS m= factor | TILDE t= factor | power );
    public final PythonParser.factor_return factor() throws RecognitionException {
        PythonParser.factor_return retval = new PythonParser.factor_return();
        retval.start = input.LT(1);

        PythonTree root_0 = null;

        Token PLUS212=null;
        Token MINUS213=null;
        Token TILDE214=null;
        PythonParser.factor_return p = null;

        PythonParser.factor_return m = null;

        PythonParser.factor_return t = null;

        PythonParser.power_return power215 = null;


        PythonTree PLUS212_tree=null;
        PythonTree MINUS213_tree=null;
        PythonTree TILDE214_tree=null;

        try {
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1588:5: ( PLUS p= factor | MINUS m= factor | TILDE t= factor | power )
            int alt103=4;
            switch ( input.LA(1) ) {
            case PLUS:
                {
                alt103=1;
                }
                break;
            case MINUS:
                {
                alt103=2;
                }
                break;
            case TILDE:
                {
                alt103=3;
                }
                break;
            case NAME:
            case LPAREN:
            case LBRACK:
            case LCURLY:
            case BACKQUOTE:
            case INT:
            case LONGINT:
            case FLOAT:
            case COMPLEX:
            case STRING:
            case PRO:
            case PRO_SELECT:
            case ASP:
            case ASP_SELECT:
            case ASP_PATH:
            case SELECT:
            case INSERT:
            case CREATE:
            case DROP:
            case UPDATE:
            case SQL_DELETE:
            case ALTER:
            case MAKECONNECT:
            case ASPSELECT:
            case RDFSELECT:
            case CAPSFROM:
            case MODIFY:
            case CAPSCLASS:
            case SUBCLASS:
                {
                alt103=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 103, 0, input);

                throw nvae;
            }

            switch (alt103) {
                case 1 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1588:7: PLUS p= factor
                    {
                    root_0 = (PythonTree)adaptor.nil();

                    PLUS212=(Token)match(input,PLUS,FOLLOW_PLUS_in_factor5738); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PLUS212_tree = (PythonTree)adaptor.create(PLUS212);
                    adaptor.addChild(root_0, PLUS212_tree);
                    }
                    pushFollow(FOLLOW_factor_in_factor5742);
                    p=factor();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, p.getTree());
                    if ( state.backtracking==0 ) {

                                retval.etype = new UnaryOp(PLUS212, unaryopType.UAdd, (p!=null?p.etype:null));
                            
                    }

                    }
                    break;
                case 2 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1592:7: MINUS m= factor
                    {
                    root_0 = (PythonTree)adaptor.nil();

                    MINUS213=(Token)match(input,MINUS,FOLLOW_MINUS_in_factor5758); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MINUS213_tree = (PythonTree)adaptor.create(MINUS213);
                    adaptor.addChild(root_0, MINUS213_tree);
                    }
                    pushFollow(FOLLOW_factor_in_factor5762);
                    m=factor();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, m.getTree());
                    if ( state.backtracking==0 ) {

                                retval.etype = actions.negate(MINUS213, (m!=null?m.etype:null));
                            
                    }

                    }
                    break;
                case 3 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1596:7: TILDE t= factor
                    {
                    root_0 = (PythonTree)adaptor.nil();

                    TILDE214=(Token)match(input,TILDE,FOLLOW_TILDE_in_factor5778); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    TILDE214_tree = (PythonTree)adaptor.create(TILDE214);
                    adaptor.addChild(root_0, TILDE214_tree);
                    }
                    pushFollow(FOLLOW_factor_in_factor5782);
                    t=factor();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, t.getTree());
                    if ( state.backtracking==0 ) {

                                retval.etype = new UnaryOp(TILDE214, unaryopType.Invert, (t!=null?t.etype:null));
                            
                    }

                    }
                    break;
                case 4 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1600:7: power
                    {
                    root_0 = (PythonTree)adaptor.nil();

                    pushFollow(FOLLOW_power_in_factor5798);
                    power215=power();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, power215.getTree());
                    if ( state.backtracking==0 ) {

                                retval.etype = actions.castExpr((power215!=null?((PythonTree)power215.tree):null));
                                retval.lparen = (power215!=null?power215.lparen:null);
                            
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (PythonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {

                  retval.tree = retval.etype;

            }
        }

        catch (RecognitionException re) {
            errorHandler.reportError(this, re);
            errorHandler.recover(this, input,re);
            retval.tree = (PythonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "factor"

    public static class power_return extends ParserRuleReturnScope {
        public expr etype;
        public Token lparen = null;
        PythonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "power"
    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1608:1: power returns [expr etype, Token lparen = null] : atom (t+= trailer[$atom.start, $atom.tree] )* ( options {greedy=true; } : d= DOUBLESTAR factor )? ;
    public final PythonParser.power_return power() throws RecognitionException {
        PythonParser.power_return retval = new PythonParser.power_return();
        retval.start = input.LT(1);

        PythonTree root_0 = null;

        Token d=null;
        List list_t=null;
        PythonParser.atom_return atom216 = null;

        PythonParser.factor_return factor217 = null;

        PythonParser.trailer_return t = null;
         t = null;
        PythonTree d_tree=null;

        try {
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1613:5: ( atom (t+= trailer[$atom.start, $atom.tree] )* ( options {greedy=true; } : d= DOUBLESTAR factor )? )
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1613:7: atom (t+= trailer[$atom.start, $atom.tree] )* ( options {greedy=true; } : d= DOUBLESTAR factor )?
            {
            root_0 = (PythonTree)adaptor.nil();

            pushFollow(FOLLOW_atom_in_power5837);
            atom216=atom();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, atom216.getTree());
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1613:12: (t+= trailer[$atom.start, $atom.tree] )*
            loop104:
            do {
                int alt104=2;
                int LA104_0 = input.LA(1);

                if ( (LA104_0==LPAREN) ) {
                    int LA104_2 = input.LA(2);

                    if ( (LA104_2==NAME) ) {
                        int LA104_4 = input.LA(3);

                        if ( ((LA104_4>=DOT && LA104_4<=AND)||LA104_4==FOR||LA104_4==IF||(LA104_4>=IN && LA104_4<=IS)||(LA104_4>=NOT && LA104_4<=OR)||(LA104_4>=LPAREN && LA104_4<=RPAREN)||(LA104_4>=ASSIGN && LA104_4<=DOUBLESTAR)||(LA104_4>=RIGHTSHIFT && LA104_4<=DOUBLESLASH)||LA104_4==LBRACK) ) {
                            alt104=1;
                        }


                    }
                    else if ( ((LA104_2>=LAMBDA && LA104_2<=NOT)||(LA104_2>=LPAREN && LA104_2<=RPAREN)||(LA104_2>=STAR && LA104_2<=DOUBLESTAR)||(LA104_2>=PLUS && LA104_2<=MINUS)||(LA104_2>=TILDE && LA104_2<=LBRACK)||LA104_2==LCURLY||(LA104_2>=BACKQUOTE && LA104_2<=PRO)||LA104_2==PRO_SELECT||LA104_2==ASP||LA104_2==ASP_SELECT||LA104_2==ASP_PATH||(LA104_2>=SELECT && LA104_2<=RDFSELECT)||LA104_2==CAPSFROM||(LA104_2>=MODIFY && LA104_2<=SUBCLASS)) ) {
                        alt104=1;
                    }


                }
                else if ( (LA104_0==DOT||LA104_0==LBRACK) ) {
                    alt104=1;
                }


                switch (alt104) {
            	case 1 :
            	    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1613:13: t+= trailer[$atom.start, $atom.tree]
            	    {
            	    pushFollow(FOLLOW_trailer_in_power5842);
            	    t=trailer((atom216!=null?((Token)atom216.start):null), (atom216!=null?((PythonTree)atom216.tree):null));

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, t.getTree());
            	    if (list_t==null) list_t=new ArrayList();
            	    list_t.add(t.getTree());


            	    }
            	    break;

            	default :
            	    break loop104;
                }
            } while (true);

            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1613:51: ( options {greedy=true; } : d= DOUBLESTAR factor )?
            int alt105=2;
            int LA105_0 = input.LA(1);

            if ( (LA105_0==DOUBLESTAR) ) {
                alt105=1;
            }
            switch (alt105) {
                case 1 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1613:75: d= DOUBLESTAR factor
                    {
                    d=(Token)match(input,DOUBLESTAR,FOLLOW_DOUBLESTAR_in_power5857); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    d_tree = (PythonTree)adaptor.create(d);
                    adaptor.addChild(root_0, d_tree);
                    }
                    pushFollow(FOLLOW_factor_in_power5859);
                    factor217=factor();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, factor217.getTree());

                    }
                    break;

            }

            if ( state.backtracking==0 ) {

                        retval.lparen = (atom216!=null?atom216.lparen:null);
                        //XXX: This could be better.
                        retval.etype = actions.castExpr((atom216!=null?((PythonTree)atom216.tree):null));
                        if (list_t != null) {
                            for(Object o : list_t) {
                                if (retval.etype instanceof Context) {
                                    ((Context)retval.etype).setContext(expr_contextType.Load);
                                }
                                if (o instanceof Call) {
                                    Call c = (Call)o;
                                    c.setFunc((PyObject)retval.etype);
                                    retval.etype = c;
                                } else if (o instanceof Subscript) {
                                    Subscript c = (Subscript)o;
                                    c.setValue((PyObject)retval.etype);
                                    retval.etype = c;
                                } else if (o instanceof Attribute) {
                                    Attribute c = (Attribute)o;
                                    c.setCharStartIndex(retval.etype.getCharStartIndex());
                                    c.setValue((PyObject)retval.etype);
                                    retval.etype = c;
                                }
                            }
                        }
                        if (d != null) {
                            List right = new ArrayList();
                            right.add((factor217!=null?((PythonTree)factor217.tree):null));
                            retval.etype = actions.makeBinOp((atom216!=null?((Token)atom216.start):null), retval.etype, operatorType.Pow, right);
                        }
                    
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (PythonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {

                  retval.tree = retval.etype;

            }
        }

        catch (RecognitionException re) {
            errorHandler.reportError(this, re);
            errorHandler.recover(this, input,re);
            retval.tree = (PythonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "power"

    public static class atom_return extends ParserRuleReturnScope {
        public Token lparen = null;
        PythonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "atom"
    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1652:1: atom returns [Token lparen = null] : ( LPAREN ( yield_expr | testlist_gexp -> testlist_gexp | ) RPAREN | LBRACK ( listmaker[$LBRACK] -> listmaker | ) RBRACK | LCURLY ( dictmaker | ) RCURLY | lb= BACKQUOTE testlist[expr_contextType.Load] rb= BACKQUOTE | NAME | INT | LONGINT | FLOAT | COMPLEX | (S+= STRING )+ | sql_stmt -> sql_stmt | prolog_stmt -> prolog_stmt | asp_stmt -> asp_stmt | sim_stmt -> sim_stmt );
    public final PythonParser.atom_return atom() throws RecognitionException {
        PythonParser.atom_return retval = new PythonParser.atom_return();
        retval.start = input.LT(1);

        PythonTree root_0 = null;

        Token lb=null;
        Token rb=null;
        Token LPAREN218=null;
        Token RPAREN221=null;
        Token LBRACK222=null;
        Token RBRACK224=null;
        Token LCURLY225=null;
        Token RCURLY227=null;
        Token NAME229=null;
        Token INT230=null;
        Token LONGINT231=null;
        Token FLOAT232=null;
        Token COMPLEX233=null;
        Token S=null;
        List list_S=null;
        PythonParser.yield_expr_return yield_expr219 = null;

        PythonParser.testlist_gexp_return testlist_gexp220 = null;

        PythonParser.listmaker_return listmaker223 = null;

        PythonParser.dictmaker_return dictmaker226 = null;

        PythonParser.testlist_return testlist228 = null;

        PythonParser.sql_stmt_return sql_stmt234 = null;

        PythonParser.prolog_stmt_return prolog_stmt235 = null;

        PythonParser.asp_stmt_return asp_stmt236 = null;

        PythonParser.sim_stmt_return sim_stmt237 = null;


        PythonTree lb_tree=null;
        PythonTree rb_tree=null;
        PythonTree LPAREN218_tree=null;
        PythonTree RPAREN221_tree=null;
        PythonTree LBRACK222_tree=null;
        PythonTree RBRACK224_tree=null;
        PythonTree LCURLY225_tree=null;
        PythonTree RCURLY227_tree=null;
        PythonTree NAME229_tree=null;
        PythonTree INT230_tree=null;
        PythonTree LONGINT231_tree=null;
        PythonTree FLOAT232_tree=null;
        PythonTree COMPLEX233_tree=null;
        PythonTree S_tree=null;
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_sql_stmt=new RewriteRuleSubtreeStream(adaptor,"rule sql_stmt");
        RewriteRuleSubtreeStream stream_prolog_stmt=new RewriteRuleSubtreeStream(adaptor,"rule prolog_stmt");
        RewriteRuleSubtreeStream stream_asp_stmt=new RewriteRuleSubtreeStream(adaptor,"rule asp_stmt");
        RewriteRuleSubtreeStream stream_sim_stmt=new RewriteRuleSubtreeStream(adaptor,"rule sim_stmt");
        RewriteRuleSubtreeStream stream_testlist_gexp=new RewriteRuleSubtreeStream(adaptor,"rule testlist_gexp");
        RewriteRuleSubtreeStream stream_yield_expr=new RewriteRuleSubtreeStream(adaptor,"rule yield_expr");
        RewriteRuleSubtreeStream stream_listmaker=new RewriteRuleSubtreeStream(adaptor,"rule listmaker");

            expr etype = null;

        try {
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1662:5: ( LPAREN ( yield_expr | testlist_gexp -> testlist_gexp | ) RPAREN | LBRACK ( listmaker[$LBRACK] -> listmaker | ) RBRACK | LCURLY ( dictmaker | ) RCURLY | lb= BACKQUOTE testlist[expr_contextType.Load] rb= BACKQUOTE | NAME | INT | LONGINT | FLOAT | COMPLEX | (S+= STRING )+ | sql_stmt -> sql_stmt | prolog_stmt -> prolog_stmt | asp_stmt -> asp_stmt | sim_stmt -> sim_stmt )
            int alt110=14;
            alt110 = dfa110.predict(input);
            switch (alt110) {
                case 1 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1662:7: LPAREN ( yield_expr | testlist_gexp -> testlist_gexp | ) RPAREN
                    {
                    LPAREN218=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_atom5909); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN218);

                    if ( state.backtracking==0 ) {

                                retval.lparen = LPAREN218;
                            
                    }
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1666:7: ( yield_expr | testlist_gexp -> testlist_gexp | )
                    int alt106=3;
                    switch ( input.LA(1) ) {
                    case YIELD:
                        {
                        alt106=1;
                        }
                        break;
                    case NAME:
                    case LAMBDA:
                    case NOT:
                    case LPAREN:
                    case PLUS:
                    case MINUS:
                    case TILDE:
                    case LBRACK:
                    case LCURLY:
                    case BACKQUOTE:
                    case INT:
                    case LONGINT:
                    case FLOAT:
                    case COMPLEX:
                    case STRING:
                    case PRO:
                    case PRO_SELECT:
                    case ASP:
                    case ASP_SELECT:
                    case ASP_PATH:
                    case SELECT:
                    case INSERT:
                    case CREATE:
                    case DROP:
                    case UPDATE:
                    case SQL_DELETE:
                    case ALTER:
                    case MAKECONNECT:
                    case ASPSELECT:
                    case RDFSELECT:
                    case CAPSFROM:
                    case MODIFY:
                    case CAPSCLASS:
                    case SUBCLASS:
                        {
                        alt106=2;
                        }
                        break;
                    case RPAREN:
                        {
                        alt106=3;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 106, 0, input);

                        throw nvae;
                    }

                    switch (alt106) {
                        case 1 :
                            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1666:9: yield_expr
                            {
                            pushFollow(FOLLOW_yield_expr_in_atom5927);
                            yield_expr219=yield_expr();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_yield_expr.add(yield_expr219.getTree());
                            if ( state.backtracking==0 ) {

                                          etype = (yield_expr219!=null?yield_expr219.etype:null);
                                      
                            }

                            }
                            break;
                        case 2 :
                            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1670:9: testlist_gexp
                            {
                            pushFollow(FOLLOW_testlist_gexp_in_atom5947);
                            testlist_gexp220=testlist_gexp();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_testlist_gexp.add(testlist_gexp220.getTree());


                            // AST REWRITE
                            // elements: testlist_gexp
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            // wildcard labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                            root_0 = (PythonTree)adaptor.nil();
                            // 1671:6: -> testlist_gexp
                            {
                                adaptor.addChild(root_0, stream_testlist_gexp.nextTree());

                            }

                            retval.tree = root_0;}
                            }
                            break;
                        case 3 :
                            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1673:9: 
                            {
                            if ( state.backtracking==0 ) {

                                          etype = new Tuple(LPAREN218, new ArrayList<expr>(), ((expr_scope)expr_stack.peek()).ctype);
                                      
                            }

                            }
                            break;

                    }

                    RPAREN221=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_atom5990); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN221);


                    }
                    break;
                case 2 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1678:7: LBRACK ( listmaker[$LBRACK] -> listmaker | ) RBRACK
                    {
                    LBRACK222=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_atom5998); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LBRACK.add(LBRACK222);

                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1679:7: ( listmaker[$LBRACK] -> listmaker | )
                    int alt107=2;
                    int LA107_0 = input.LA(1);

                    if ( (LA107_0==NAME||(LA107_0>=LAMBDA && LA107_0<=NOT)||LA107_0==LPAREN||(LA107_0>=PLUS && LA107_0<=MINUS)||(LA107_0>=TILDE && LA107_0<=LBRACK)||LA107_0==LCURLY||(LA107_0>=BACKQUOTE && LA107_0<=PRO)||LA107_0==PRO_SELECT||LA107_0==ASP||LA107_0==ASP_SELECT||LA107_0==ASP_PATH||(LA107_0>=SELECT && LA107_0<=RDFSELECT)||LA107_0==CAPSFROM||(LA107_0>=MODIFY && LA107_0<=SUBCLASS)) ) {
                        alt107=1;
                    }
                    else if ( (LA107_0==RBRACK) ) {
                        alt107=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 107, 0, input);

                        throw nvae;
                    }
                    switch (alt107) {
                        case 1 :
                            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1679:8: listmaker[$LBRACK]
                            {
                            pushFollow(FOLLOW_listmaker_in_atom6007);
                            listmaker223=listmaker(LBRACK222);

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_listmaker.add(listmaker223.getTree());


                            // AST REWRITE
                            // elements: listmaker
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            // wildcard labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                            root_0 = (PythonTree)adaptor.nil();
                            // 1680:6: -> listmaker
                            {
                                adaptor.addChild(root_0, stream_listmaker.nextTree());

                            }

                            retval.tree = root_0;}
                            }
                            break;
                        case 2 :
                            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1682:8: 
                            {
                            if ( state.backtracking==0 ) {

                                         etype = new org.python.antlr.ast.List(LBRACK222, new ArrayList<expr>(), ((expr_scope)expr_stack.peek()).ctype);
                                     
                            }

                            }
                            break;

                    }

                    RBRACK224=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_atom6050); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RBRACK.add(RBRACK224);


                    }
                    break;
                case 3 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1687:7: LCURLY ( dictmaker | ) RCURLY
                    {
                    root_0 = (PythonTree)adaptor.nil();

                    LCURLY225=(Token)match(input,LCURLY,FOLLOW_LCURLY_in_atom6058); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LCURLY225_tree = (PythonTree)adaptor.create(LCURLY225);
                    adaptor.addChild(root_0, LCURLY225_tree);
                    }
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1688:8: ( dictmaker | )
                    int alt108=2;
                    int LA108_0 = input.LA(1);

                    if ( (LA108_0==NAME||(LA108_0>=LAMBDA && LA108_0<=NOT)||LA108_0==LPAREN||(LA108_0>=PLUS && LA108_0<=MINUS)||(LA108_0>=TILDE && LA108_0<=LBRACK)||LA108_0==LCURLY||(LA108_0>=BACKQUOTE && LA108_0<=PRO)||LA108_0==PRO_SELECT||LA108_0==ASP||LA108_0==ASP_SELECT||LA108_0==ASP_PATH||(LA108_0>=SELECT && LA108_0<=RDFSELECT)||LA108_0==CAPSFROM||(LA108_0>=MODIFY && LA108_0<=SUBCLASS)) ) {
                        alt108=1;
                    }
                    else if ( (LA108_0==RCURLY) ) {
                        alt108=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 108, 0, input);

                        throw nvae;
                    }
                    switch (alt108) {
                        case 1 :
                            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1688:9: dictmaker
                            {
                            pushFollow(FOLLOW_dictmaker_in_atom6068);
                            dictmaker226=dictmaker();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, dictmaker226.getTree());
                            if ( state.backtracking==0 ) {

                                          etype = new Dict(LCURLY225, actions.castExprs((dictmaker226!=null?dictmaker226.keys:null)),
                                            actions.castExprs((dictmaker226!=null?dictmaker226.values:null)));
                                      
                            }

                            }
                            break;
                        case 2 :
                            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1694:9: 
                            {
                            if ( state.backtracking==0 ) {

                                          etype = new Dict(LCURLY225, new ArrayList<expr>(), new ArrayList<expr>());
                                      
                            }

                            }
                            break;

                    }

                    RCURLY227=(Token)match(input,RCURLY,FOLLOW_RCURLY_in_atom6115); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RCURLY227_tree = (PythonTree)adaptor.create(RCURLY227);
                    adaptor.addChild(root_0, RCURLY227_tree);
                    }

                    }
                    break;
                case 4 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1699:8: lb= BACKQUOTE testlist[expr_contextType.Load] rb= BACKQUOTE
                    {
                    root_0 = (PythonTree)adaptor.nil();

                    lb=(Token)match(input,BACKQUOTE,FOLLOW_BACKQUOTE_in_atom6126); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    lb_tree = (PythonTree)adaptor.create(lb);
                    adaptor.addChild(root_0, lb_tree);
                    }
                    pushFollow(FOLLOW_testlist_in_atom6128);
                    testlist228=testlist(expr_contextType.Load);

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, testlist228.getTree());
                    rb=(Token)match(input,BACKQUOTE,FOLLOW_BACKQUOTE_in_atom6133); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    rb_tree = (PythonTree)adaptor.create(rb);
                    adaptor.addChild(root_0, rb_tree);
                    }
                    if ( state.backtracking==0 ) {

                                 etype = new Repr(lb, actions.castExpr((testlist228!=null?((PythonTree)testlist228.tree):null)));
                             
                    }

                    }
                    break;
                case 5 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1703:8: NAME
                    {
                    root_0 = (PythonTree)adaptor.nil();

                    NAME229=(Token)match(input,NAME,FOLLOW_NAME_in_atom6151); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NAME229_tree = (PythonTree)adaptor.create(NAME229);
                    adaptor.addChild(root_0, NAME229_tree);
                    }
                    if ( state.backtracking==0 ) {

                                 etype = new Name(NAME229, (NAME229!=null?NAME229.getText():null), ((expr_scope)expr_stack.peek()).ctype);
                             
                    }

                    }
                    break;
                case 6 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1707:8: INT
                    {
                    root_0 = (PythonTree)adaptor.nil();

                    INT230=(Token)match(input,INT,FOLLOW_INT_in_atom6169); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    INT230_tree = (PythonTree)adaptor.create(INT230);
                    adaptor.addChild(root_0, INT230_tree);
                    }
                    if ( state.backtracking==0 ) {

                                 etype = new Num(INT230, actions.makeInt(INT230));
                             
                    }

                    }
                    break;
                case 7 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1711:8: LONGINT
                    {
                    root_0 = (PythonTree)adaptor.nil();

                    LONGINT231=(Token)match(input,LONGINT,FOLLOW_LONGINT_in_atom6187); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LONGINT231_tree = (PythonTree)adaptor.create(LONGINT231);
                    adaptor.addChild(root_0, LONGINT231_tree);
                    }
                    if ( state.backtracking==0 ) {

                                 etype = new Num(LONGINT231, actions.makeInt(LONGINT231));
                             
                    }

                    }
                    break;
                case 8 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1715:8: FLOAT
                    {
                    root_0 = (PythonTree)adaptor.nil();

                    FLOAT232=(Token)match(input,FLOAT,FOLLOW_FLOAT_in_atom6205); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    FLOAT232_tree = (PythonTree)adaptor.create(FLOAT232);
                    adaptor.addChild(root_0, FLOAT232_tree);
                    }
                    if ( state.backtracking==0 ) {

                                 etype = new Num(FLOAT232, actions.makeFloat(FLOAT232));
                             
                    }

                    }
                    break;
                case 9 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1719:8: COMPLEX
                    {
                    root_0 = (PythonTree)adaptor.nil();

                    COMPLEX233=(Token)match(input,COMPLEX,FOLLOW_COMPLEX_in_atom6223); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COMPLEX233_tree = (PythonTree)adaptor.create(COMPLEX233);
                    adaptor.addChild(root_0, COMPLEX233_tree);
                    }
                    if ( state.backtracking==0 ) {

                                 etype = new Num(COMPLEX233, actions.makeComplex(COMPLEX233));
                             
                    }

                    }
                    break;
                case 10 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1723:8: (S+= STRING )+
                    {
                    root_0 = (PythonTree)adaptor.nil();

                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1723:8: (S+= STRING )+
                    int cnt109=0;
                    loop109:
                    do {
                        int alt109=2;
                        int LA109_0 = input.LA(1);

                        if ( (LA109_0==STRING) ) {
                            alt109=1;
                        }


                        switch (alt109) {
                    	case 1 :
                    	    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1723:9: S+= STRING
                    	    {
                    	    S=(Token)match(input,STRING,FOLLOW_STRING_in_atom6244); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    S_tree = (PythonTree)adaptor.create(S);
                    	    adaptor.addChild(root_0, S_tree);
                    	    }
                    	    if (list_S==null) list_S=new ArrayList();
                    	    list_S.add(S);


                    	    }
                    	    break;

                    	default :
                    	    if ( cnt109 >= 1 ) break loop109;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(109, input);
                                throw eee;
                        }
                        cnt109++;
                    } while (true);

                    if ( state.backtracking==0 ) {

                                 etype = new Str(actions.extractStringToken(list_S), actions.extractStrings(list_S, encoding));
                             
                    }

                    }
                    break;
                case 11 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1730:7: sql_stmt
                    {
                    pushFollow(FOLLOW_sql_stmt_in_atom6279);
                    sql_stmt234=sql_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_sql_stmt.add(sql_stmt234.getTree());


                    // AST REWRITE
                    // elements: sql_stmt
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (PythonTree)adaptor.nil();
                    // 1731:5: -> sql_stmt
                    {
                        adaptor.addChild(root_0, stream_sql_stmt.nextTree());

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 12 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1733:4: prolog_stmt
                    {
                    pushFollow(FOLLOW_prolog_stmt_in_atom6293);
                    prolog_stmt235=prolog_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_prolog_stmt.add(prolog_stmt235.getTree());


                    // AST REWRITE
                    // elements: prolog_stmt
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (PythonTree)adaptor.nil();
                    // 1734:2: -> prolog_stmt
                    {
                        adaptor.addChild(root_0, stream_prolog_stmt.nextTree());

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 13 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1736:4: asp_stmt
                    {
                    pushFollow(FOLLOW_asp_stmt_in_atom6304);
                    asp_stmt236=asp_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_asp_stmt.add(asp_stmt236.getTree());


                    // AST REWRITE
                    // elements: asp_stmt
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (PythonTree)adaptor.nil();
                    // 1737:2: -> asp_stmt
                    {
                        adaptor.addChild(root_0, stream_asp_stmt.nextTree());

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 14 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1738:7: sim_stmt
                    {
                    pushFollow(FOLLOW_sim_stmt_in_atom6316);
                    sim_stmt237=sim_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_sim_stmt.add(sim_stmt237.getTree());


                    // AST REWRITE
                    // elements: sim_stmt
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (PythonTree)adaptor.nil();
                    // 1739:5: -> sim_stmt
                    {
                        adaptor.addChild(root_0, stream_sim_stmt.nextTree());

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (PythonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {

                 if (etype != null) {
                     retval.tree = etype;
                 }

            }
        }

        catch (RecognitionException re) {
            errorHandler.reportError(this, re);
            errorHandler.recover(this, input,re);
            retval.tree = (PythonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "atom"

    protected static class prolog_stmt_scope {
        Boolean append;
        List exprs;
        List strings;
        String temp;
    }
    protected Stack prolog_stmt_stack = new Stack();

    public static class prolog_stmt_return extends ParserRuleReturnScope {
        PythonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prolog_stmt"
    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1742:1: prolog_stmt : ( ( PRO PRLO prologload RBRACK ( PLUS )? DOT -> ^( PRLO[$prolog_stmt.start,actions.castExprs($prolog_stmt::exprs), $expr::ctype, $prolog_stmt::strings, $prolog_stmt::append, false,\"\"] ) ) | ( PRO ASPPRINTDB -> ^( ASPPRINTDB[$prolog_stmt.start,actions.castExprs($prolog_stmt::exprs), $expr::ctype, $prolog_stmt::strings, $prolog_stmt::append, false,\"\"] ) ) | ( PRO PRQO prologquery DOT -> ^( PRQO[$prolog_stmt.start, actions.castExprs($prolog_stmt::exprs), $expr::ctype, $prolog_stmt::strings, $prolog_stmt::append, false,\"\"] ) ) | ( PRO PRIO prologinsert s2= DOT -> ^( PRIO[$prolog_stmt.start, actions.castExprs($prolog_stmt::exprs), $expr::ctype, $prolog_stmt::strings, $prolog_stmt::append, false,\"\"] ) ) | ( PRO PRSO prologsave RBRACK ( PLUS )? DOT -> ^( PRSO[$prolog_stmt.start, actions.castExprs($prolog_stmt::exprs), $expr::ctype, $prolog_stmt::strings, $prolog_stmt::append, false,\"\"] ) ) | ( PRO_SELECT NAME -> ^( PRO_SELECT[$prolog_stmt.start, actions.castExprs($prolog_stmt::exprs), $expr::ctype, $prolog_stmt::strings, $prolog_stmt::append, false,\"\"] ) ) ) ;
    public final PythonParser.prolog_stmt_return prolog_stmt() throws RecognitionException {
        prolog_stmt_stack.push(new prolog_stmt_scope());
        PythonParser.prolog_stmt_return retval = new PythonParser.prolog_stmt_return();
        retval.start = input.LT(1);

        PythonTree root_0 = null;

        Token s2=null;
        Token PRO238=null;
        Token PRLO239=null;
        Token RBRACK241=null;
        Token PLUS242=null;
        Token DOT243=null;
        Token PRO244=null;
        Token ASPPRINTDB245=null;
        Token PRO246=null;
        Token PRQO247=null;
        Token DOT249=null;
        Token PRO250=null;
        Token PRIO251=null;
        Token PRO253=null;
        Token PRSO254=null;
        Token RBRACK256=null;
        Token PLUS257=null;
        Token DOT258=null;
        Token PRO_SELECT259=null;
        Token NAME260=null;
        PythonParser.prologload_return prologload240 = null;

        PythonParser.prologquery_return prologquery248 = null;

        PythonParser.prologinsert_return prologinsert252 = null;

        PythonParser.prologsave_return prologsave255 = null;


        PythonTree s2_tree=null;
        PythonTree PRO238_tree=null;
        PythonTree PRLO239_tree=null;
        PythonTree RBRACK241_tree=null;
        PythonTree PLUS242_tree=null;
        PythonTree DOT243_tree=null;
        PythonTree PRO244_tree=null;
        PythonTree ASPPRINTDB245_tree=null;
        PythonTree PRO246_tree=null;
        PythonTree PRQO247_tree=null;
        PythonTree DOT249_tree=null;
        PythonTree PRO250_tree=null;
        PythonTree PRIO251_tree=null;
        PythonTree PRO253_tree=null;
        PythonTree PRSO254_tree=null;
        PythonTree RBRACK256_tree=null;
        PythonTree PLUS257_tree=null;
        PythonTree DOT258_tree=null;
        PythonTree PRO_SELECT259_tree=null;
        PythonTree NAME260_tree=null;
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_ASPPRINTDB=new RewriteRuleTokenStream(adaptor,"token ASPPRINTDB");
        RewriteRuleTokenStream stream_PLUS=new RewriteRuleTokenStream(adaptor,"token PLUS");
        RewriteRuleTokenStream stream_NAME=new RewriteRuleTokenStream(adaptor,"token NAME");
        RewriteRuleTokenStream stream_PRO_SELECT=new RewriteRuleTokenStream(adaptor,"token PRO_SELECT");
        RewriteRuleTokenStream stream_PRQO=new RewriteRuleTokenStream(adaptor,"token PRQO");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleTokenStream stream_PRLO=new RewriteRuleTokenStream(adaptor,"token PRLO");
        RewriteRuleTokenStream stream_PRO=new RewriteRuleTokenStream(adaptor,"token PRO");
        RewriteRuleTokenStream stream_PRIO=new RewriteRuleTokenStream(adaptor,"token PRIO");
        RewriteRuleTokenStream stream_PRSO=new RewriteRuleTokenStream(adaptor,"token PRSO");
        RewriteRuleSubtreeStream stream_prologload=new RewriteRuleSubtreeStream(adaptor,"rule prologload");
        RewriteRuleSubtreeStream stream_prologquery=new RewriteRuleSubtreeStream(adaptor,"rule prologquery");
        RewriteRuleSubtreeStream stream_prologinsert=new RewriteRuleSubtreeStream(adaptor,"rule prologinsert");
        RewriteRuleSubtreeStream stream_prologsave=new RewriteRuleSubtreeStream(adaptor,"rule prologsave");

        	expr etype = null;

        try {
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1765:2: ( ( ( PRO PRLO prologload RBRACK ( PLUS )? DOT -> ^( PRLO[$prolog_stmt.start,actions.castExprs($prolog_stmt::exprs), $expr::ctype, $prolog_stmt::strings, $prolog_stmt::append, false,\"\"] ) ) | ( PRO ASPPRINTDB -> ^( ASPPRINTDB[$prolog_stmt.start,actions.castExprs($prolog_stmt::exprs), $expr::ctype, $prolog_stmt::strings, $prolog_stmt::append, false,\"\"] ) ) | ( PRO PRQO prologquery DOT -> ^( PRQO[$prolog_stmt.start, actions.castExprs($prolog_stmt::exprs), $expr::ctype, $prolog_stmt::strings, $prolog_stmt::append, false,\"\"] ) ) | ( PRO PRIO prologinsert s2= DOT -> ^( PRIO[$prolog_stmt.start, actions.castExprs($prolog_stmt::exprs), $expr::ctype, $prolog_stmt::strings, $prolog_stmt::append, false,\"\"] ) ) | ( PRO PRSO prologsave RBRACK ( PLUS )? DOT -> ^( PRSO[$prolog_stmt.start, actions.castExprs($prolog_stmt::exprs), $expr::ctype, $prolog_stmt::strings, $prolog_stmt::append, false,\"\"] ) ) | ( PRO_SELECT NAME -> ^( PRO_SELECT[$prolog_stmt.start, actions.castExprs($prolog_stmt::exprs), $expr::ctype, $prolog_stmt::strings, $prolog_stmt::append, false,\"\"] ) ) ) )
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1766:2: ( ( PRO PRLO prologload RBRACK ( PLUS )? DOT -> ^( PRLO[$prolog_stmt.start,actions.castExprs($prolog_stmt::exprs), $expr::ctype, $prolog_stmt::strings, $prolog_stmt::append, false,\"\"] ) ) | ( PRO ASPPRINTDB -> ^( ASPPRINTDB[$prolog_stmt.start,actions.castExprs($prolog_stmt::exprs), $expr::ctype, $prolog_stmt::strings, $prolog_stmt::append, false,\"\"] ) ) | ( PRO PRQO prologquery DOT -> ^( PRQO[$prolog_stmt.start, actions.castExprs($prolog_stmt::exprs), $expr::ctype, $prolog_stmt::strings, $prolog_stmt::append, false,\"\"] ) ) | ( PRO PRIO prologinsert s2= DOT -> ^( PRIO[$prolog_stmt.start, actions.castExprs($prolog_stmt::exprs), $expr::ctype, $prolog_stmt::strings, $prolog_stmt::append, false,\"\"] ) ) | ( PRO PRSO prologsave RBRACK ( PLUS )? DOT -> ^( PRSO[$prolog_stmt.start, actions.castExprs($prolog_stmt::exprs), $expr::ctype, $prolog_stmt::strings, $prolog_stmt::append, false,\"\"] ) ) | ( PRO_SELECT NAME -> ^( PRO_SELECT[$prolog_stmt.start, actions.castExprs($prolog_stmt::exprs), $expr::ctype, $prolog_stmt::strings, $prolog_stmt::append, false,\"\"] ) ) )
            {
            if ( state.backtracking==0 ) {

              		((prolog_stmt_scope)prolog_stmt_stack.peek()).append = false;
              		((prolog_stmt_scope)prolog_stmt_stack.peek()).exprs = new ArrayList<expr>();
              		((prolog_stmt_scope)prolog_stmt_stack.peek()).strings = new ArrayList<String>();
              		((prolog_stmt_scope)prolog_stmt_stack.peek()).temp = "";
              	
            }
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1772:6: ( ( PRO PRLO prologload RBRACK ( PLUS )? DOT -> ^( PRLO[$prolog_stmt.start,actions.castExprs($prolog_stmt::exprs), $expr::ctype, $prolog_stmt::strings, $prolog_stmt::append, false,\"\"] ) ) | ( PRO ASPPRINTDB -> ^( ASPPRINTDB[$prolog_stmt.start,actions.castExprs($prolog_stmt::exprs), $expr::ctype, $prolog_stmt::strings, $prolog_stmt::append, false,\"\"] ) ) | ( PRO PRQO prologquery DOT -> ^( PRQO[$prolog_stmt.start, actions.castExprs($prolog_stmt::exprs), $expr::ctype, $prolog_stmt::strings, $prolog_stmt::append, false,\"\"] ) ) | ( PRO PRIO prologinsert s2= DOT -> ^( PRIO[$prolog_stmt.start, actions.castExprs($prolog_stmt::exprs), $expr::ctype, $prolog_stmt::strings, $prolog_stmt::append, false,\"\"] ) ) | ( PRO PRSO prologsave RBRACK ( PLUS )? DOT -> ^( PRSO[$prolog_stmt.start, actions.castExprs($prolog_stmt::exprs), $expr::ctype, $prolog_stmt::strings, $prolog_stmt::append, false,\"\"] ) ) | ( PRO_SELECT NAME -> ^( PRO_SELECT[$prolog_stmt.start, actions.castExprs($prolog_stmt::exprs), $expr::ctype, $prolog_stmt::strings, $prolog_stmt::append, false,\"\"] ) ) )
            int alt113=6;
            int LA113_0 = input.LA(1);

            if ( (LA113_0==PRO) ) {
                switch ( input.LA(2) ) {
                case PRLO:
                    {
                    alt113=1;
                    }
                    break;
                case ASPPRINTDB:
                    {
                    alt113=2;
                    }
                    break;
                case PRQO:
                    {
                    alt113=3;
                    }
                    break;
                case PRIO:
                    {
                    alt113=4;
                    }
                    break;
                case PRSO:
                    {
                    alt113=5;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 113, 1, input);

                    throw nvae;
                }

            }
            else if ( (LA113_0==PRO_SELECT) ) {
                alt113=6;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 113, 0, input);

                throw nvae;
            }
            switch (alt113) {
                case 1 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1773:6: ( PRO PRLO prologload RBRACK ( PLUS )? DOT -> ^( PRLO[$prolog_stmt.start,actions.castExprs($prolog_stmt::exprs), $expr::ctype, $prolog_stmt::strings, $prolog_stmt::append, false,\"\"] ) )
                    {
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1773:6: ( PRO PRLO prologload RBRACK ( PLUS )? DOT -> ^( PRLO[$prolog_stmt.start,actions.castExprs($prolog_stmt::exprs), $expr::ctype, $prolog_stmt::strings, $prolog_stmt::append, false,\"\"] ) )
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1773:7: PRO PRLO prologload RBRACK ( PLUS )? DOT
                    {
                    PRO238=(Token)match(input,PRO,FOLLOW_PRO_in_prolog_stmt6365); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_PRO.add(PRO238);

                    PRLO239=(Token)match(input,PRLO,FOLLOW_PRLO_in_prolog_stmt6367); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_PRLO.add(PRLO239);

                    if ( state.backtracking==0 ) {
                      ((prolog_stmt_scope)prolog_stmt_stack.peek()).strings.add((PRLO239!=null?PRLO239.getText():null));
                    }
                    pushFollow(FOLLOW_prologload_in_prolog_stmt6370);
                    prologload240=prologload();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_prologload.add(prologload240.getTree());
                    RBRACK241=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_prolog_stmt6372); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RBRACK.add(RBRACK241);

                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1773:74: ( PLUS )?
                    int alt111=2;
                    int LA111_0 = input.LA(1);

                    if ( (LA111_0==PLUS) ) {
                        alt111=1;
                    }
                    switch (alt111) {
                        case 1 :
                            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1773:75: PLUS
                            {
                            PLUS242=(Token)match(input,PLUS,FOLLOW_PLUS_in_prolog_stmt6375); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_PLUS.add(PLUS242);

                            if ( state.backtracking==0 ) {
                              ((prolog_stmt_scope)prolog_stmt_stack.peek()).append =true;
                            }

                            }
                            break;

                    }

                    DOT243=(Token)match(input,DOT,FOLLOW_DOT_in_prolog_stmt6381); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOT.add(DOT243);

                    if ( state.backtracking==0 ) {
                      ((prolog_stmt_scope)prolog_stmt_stack.peek()).strings.add(((prolog_stmt_scope)prolog_stmt_stack.peek()).temp);
                    }


                    // AST REWRITE
                    // elements: PRLO
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (PythonTree)adaptor.nil();
                    // 1775:2: -> ^( PRLO[$prolog_stmt.start,actions.castExprs($prolog_stmt::exprs), $expr::ctype, $prolog_stmt::strings, $prolog_stmt::append, false,\"\"] )
                    {
                        // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1775:5: ^( PRLO[$prolog_stmt.start,actions.castExprs($prolog_stmt::exprs), $expr::ctype, $prolog_stmt::strings, $prolog_stmt::append, false,\"\"] )
                        {
                        PythonTree root_1 = (PythonTree)adaptor.nil();
                        root_1 = (PythonTree)adaptor.becomeRoot(new Tuple(PRLO, ((Token)retval.start), actions.castExprs(((prolog_stmt_scope)prolog_stmt_stack.peek()).exprs), ((expr_scope)expr_stack.peek()).ctype, ((prolog_stmt_scope)prolog_stmt_stack.peek()).strings, ((prolog_stmt_scope)prolog_stmt_stack.peek()).append, false, ""), root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }


                    }
                    break;
                case 2 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1776:4: ( PRO ASPPRINTDB -> ^( ASPPRINTDB[$prolog_stmt.start,actions.castExprs($prolog_stmt::exprs), $expr::ctype, $prolog_stmt::strings, $prolog_stmt::append, false,\"\"] ) )
                    {
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1776:4: ( PRO ASPPRINTDB -> ^( ASPPRINTDB[$prolog_stmt.start,actions.castExprs($prolog_stmt::exprs), $expr::ctype, $prolog_stmt::strings, $prolog_stmt::append, false,\"\"] ) )
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1776:5: PRO ASPPRINTDB
                    {
                    PRO244=(Token)match(input,PRO,FOLLOW_PRO_in_prolog_stmt6406); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_PRO.add(PRO244);

                    ASPPRINTDB245=(Token)match(input,ASPPRINTDB,FOLLOW_ASPPRINTDB_in_prolog_stmt6408); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ASPPRINTDB.add(ASPPRINTDB245);

                    if ( state.backtracking==0 ) {
                      ((prolog_stmt_scope)prolog_stmt_stack.peek()).strings.add((ASPPRINTDB245!=null?ASPPRINTDB245.getText():null));
                    }


                    // AST REWRITE
                    // elements: ASPPRINTDB
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (PythonTree)adaptor.nil();
                    // 1777:2: -> ^( ASPPRINTDB[$prolog_stmt.start,actions.castExprs($prolog_stmt::exprs), $expr::ctype, $prolog_stmt::strings, $prolog_stmt::append, false,\"\"] )
                    {
                        // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1777:5: ^( ASPPRINTDB[$prolog_stmt.start,actions.castExprs($prolog_stmt::exprs), $expr::ctype, $prolog_stmt::strings, $prolog_stmt::append, false,\"\"] )
                        {
                        PythonTree root_1 = (PythonTree)adaptor.nil();
                        root_1 = (PythonTree)adaptor.becomeRoot(new Tuple(ASPPRINTDB, ((Token)retval.start), actions.castExprs(((prolog_stmt_scope)prolog_stmt_stack.peek()).exprs), ((expr_scope)expr_stack.peek()).ctype, ((prolog_stmt_scope)prolog_stmt_stack.peek()).strings, ((prolog_stmt_scope)prolog_stmt_stack.peek()).append, false, ""), root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }


                    }
                    break;
                case 3 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1778:4: ( PRO PRQO prologquery DOT -> ^( PRQO[$prolog_stmt.start, actions.castExprs($prolog_stmt::exprs), $expr::ctype, $prolog_stmt::strings, $prolog_stmt::append, false,\"\"] ) )
                    {
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1778:4: ( PRO PRQO prologquery DOT -> ^( PRQO[$prolog_stmt.start, actions.castExprs($prolog_stmt::exprs), $expr::ctype, $prolog_stmt::strings, $prolog_stmt::append, false,\"\"] ) )
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1778:5: PRO PRQO prologquery DOT
                    {
                    PRO246=(Token)match(input,PRO,FOLLOW_PRO_in_prolog_stmt6427); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_PRO.add(PRO246);

                    PRQO247=(Token)match(input,PRQO,FOLLOW_PRQO_in_prolog_stmt6429); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_PRQO.add(PRQO247);

                    if ( state.backtracking==0 ) {
                      ((prolog_stmt_scope)prolog_stmt_stack.peek()).strings.add((PRQO247!=null?PRQO247.getText():null));
                    }
                    pushFollow(FOLLOW_prologquery_in_prolog_stmt6432);
                    prologquery248=prologquery();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_prologquery.add(prologquery248.getTree());
                    DOT249=(Token)match(input,DOT,FOLLOW_DOT_in_prolog_stmt6434); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOT.add(DOT249);

                    if ( state.backtracking==0 ) {
                      ((prolog_stmt_scope)prolog_stmt_stack.peek()).strings.add(((prolog_stmt_scope)prolog_stmt_stack.peek()).temp+".");
                    }


                    // AST REWRITE
                    // elements: PRQO
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (PythonTree)adaptor.nil();
                    // 1780:2: -> ^( PRQO[$prolog_stmt.start, actions.castExprs($prolog_stmt::exprs), $expr::ctype, $prolog_stmt::strings, $prolog_stmt::append, false,\"\"] )
                    {
                        // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1780:5: ^( PRQO[$prolog_stmt.start, actions.castExprs($prolog_stmt::exprs), $expr::ctype, $prolog_stmt::strings, $prolog_stmt::append, false,\"\"] )
                        {
                        PythonTree root_1 = (PythonTree)adaptor.nil();
                        root_1 = (PythonTree)adaptor.becomeRoot(new Tuple(PRQO, ((Token)retval.start), actions.castExprs(((prolog_stmt_scope)prolog_stmt_stack.peek()).exprs), ((expr_scope)expr_stack.peek()).ctype, ((prolog_stmt_scope)prolog_stmt_stack.peek()).strings, ((prolog_stmt_scope)prolog_stmt_stack.peek()).append, false, ""), root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }


                    }
                    break;
                case 4 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1781:4: ( PRO PRIO prologinsert s2= DOT -> ^( PRIO[$prolog_stmt.start, actions.castExprs($prolog_stmt::exprs), $expr::ctype, $prolog_stmt::strings, $prolog_stmt::append, false,\"\"] ) )
                    {
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1781:4: ( PRO PRIO prologinsert s2= DOT -> ^( PRIO[$prolog_stmt.start, actions.castExprs($prolog_stmt::exprs), $expr::ctype, $prolog_stmt::strings, $prolog_stmt::append, false,\"\"] ) )
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1781:5: PRO PRIO prologinsert s2= DOT
                    {
                    PRO250=(Token)match(input,PRO,FOLLOW_PRO_in_prolog_stmt6456); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_PRO.add(PRO250);

                    PRIO251=(Token)match(input,PRIO,FOLLOW_PRIO_in_prolog_stmt6458); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_PRIO.add(PRIO251);

                    if ( state.backtracking==0 ) {
                      ((prolog_stmt_scope)prolog_stmt_stack.peek()).strings.add((PRIO251!=null?PRIO251.getText():null));
                    }
                    pushFollow(FOLLOW_prologinsert_in_prolog_stmt6461);
                    prologinsert252=prologinsert();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_prologinsert.add(prologinsert252.getTree());
                    s2=(Token)match(input,DOT,FOLLOW_DOT_in_prolog_stmt6465); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOT.add(s2);

                    if ( state.backtracking==0 ) {
                      ((prolog_stmt_scope)prolog_stmt_stack.peek()).strings.add(((prolog_stmt_scope)prolog_stmt_stack.peek()).temp+(s2!=null?s2.getText():null));
                    }


                    // AST REWRITE
                    // elements: PRIO
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (PythonTree)adaptor.nil();
                    // 1783:2: -> ^( PRIO[$prolog_stmt.start, actions.castExprs($prolog_stmt::exprs), $expr::ctype, $prolog_stmt::strings, $prolog_stmt::append, false,\"\"] )
                    {
                        // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1783:5: ^( PRIO[$prolog_stmt.start, actions.castExprs($prolog_stmt::exprs), $expr::ctype, $prolog_stmt::strings, $prolog_stmt::append, false,\"\"] )
                        {
                        PythonTree root_1 = (PythonTree)adaptor.nil();
                        root_1 = (PythonTree)adaptor.becomeRoot(new Tuple(PRIO, ((Token)retval.start), actions.castExprs(((prolog_stmt_scope)prolog_stmt_stack.peek()).exprs), ((expr_scope)expr_stack.peek()).ctype, ((prolog_stmt_scope)prolog_stmt_stack.peek()).strings, ((prolog_stmt_scope)prolog_stmt_stack.peek()).append, false, ""), root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }


                    }
                    break;
                case 5 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1784:4: ( PRO PRSO prologsave RBRACK ( PLUS )? DOT -> ^( PRSO[$prolog_stmt.start, actions.castExprs($prolog_stmt::exprs), $expr::ctype, $prolog_stmt::strings, $prolog_stmt::append, false,\"\"] ) )
                    {
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1784:4: ( PRO PRSO prologsave RBRACK ( PLUS )? DOT -> ^( PRSO[$prolog_stmt.start, actions.castExprs($prolog_stmt::exprs), $expr::ctype, $prolog_stmt::strings, $prolog_stmt::append, false,\"\"] ) )
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1784:5: PRO PRSO prologsave RBRACK ( PLUS )? DOT
                    {
                    PRO253=(Token)match(input,PRO,FOLLOW_PRO_in_prolog_stmt6487); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_PRO.add(PRO253);

                    PRSO254=(Token)match(input,PRSO,FOLLOW_PRSO_in_prolog_stmt6489); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_PRSO.add(PRSO254);

                    if ( state.backtracking==0 ) {
                      ((prolog_stmt_scope)prolog_stmt_stack.peek()).strings.add((PRSO254!=null?PRSO254.getText():null));
                    }
                    pushFollow(FOLLOW_prologsave_in_prolog_stmt6492);
                    prologsave255=prologsave();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_prologsave.add(prologsave255.getTree());
                    RBRACK256=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_prolog_stmt6494); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RBRACK.add(RBRACK256);

                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1784:72: ( PLUS )?
                    int alt112=2;
                    int LA112_0 = input.LA(1);

                    if ( (LA112_0==PLUS) ) {
                        alt112=1;
                    }
                    switch (alt112) {
                        case 1 :
                            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1784:73: PLUS
                            {
                            PLUS257=(Token)match(input,PLUS,FOLLOW_PLUS_in_prolog_stmt6497); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_PLUS.add(PLUS257);

                            if ( state.backtracking==0 ) {
                              ((prolog_stmt_scope)prolog_stmt_stack.peek()).append =true;
                            }

                            }
                            break;

                    }

                    DOT258=(Token)match(input,DOT,FOLLOW_DOT_in_prolog_stmt6503); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOT.add(DOT258);

                    if ( state.backtracking==0 ) {
                      ((prolog_stmt_scope)prolog_stmt_stack.peek()).strings.add(((prolog_stmt_scope)prolog_stmt_stack.peek()).temp);
                    }


                    // AST REWRITE
                    // elements: PRSO
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (PythonTree)adaptor.nil();
                    // 1786:2: -> ^( PRSO[$prolog_stmt.start, actions.castExprs($prolog_stmt::exprs), $expr::ctype, $prolog_stmt::strings, $prolog_stmt::append, false,\"\"] )
                    {
                        // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1786:5: ^( PRSO[$prolog_stmt.start, actions.castExprs($prolog_stmt::exprs), $expr::ctype, $prolog_stmt::strings, $prolog_stmt::append, false,\"\"] )
                        {
                        PythonTree root_1 = (PythonTree)adaptor.nil();
                        root_1 = (PythonTree)adaptor.becomeRoot(new Tuple(PRSO, ((Token)retval.start), actions.castExprs(((prolog_stmt_scope)prolog_stmt_stack.peek()).exprs), ((expr_scope)expr_stack.peek()).ctype, ((prolog_stmt_scope)prolog_stmt_stack.peek()).strings, ((prolog_stmt_scope)prolog_stmt_stack.peek()).append, false, ""), root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }


                    }
                    break;
                case 6 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1787:5: ( PRO_SELECT NAME -> ^( PRO_SELECT[$prolog_stmt.start, actions.castExprs($prolog_stmt::exprs), $expr::ctype, $prolog_stmt::strings, $prolog_stmt::append, false,\"\"] ) )
                    {
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1787:5: ( PRO_SELECT NAME -> ^( PRO_SELECT[$prolog_stmt.start, actions.castExprs($prolog_stmt::exprs), $expr::ctype, $prolog_stmt::strings, $prolog_stmt::append, false,\"\"] ) )
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1787:6: PRO_SELECT NAME
                    {
                    PRO_SELECT259=(Token)match(input,PRO_SELECT,FOLLOW_PRO_SELECT_in_prolog_stmt6526); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_PRO_SELECT.add(PRO_SELECT259);

                    if ( state.backtracking==0 ) {
                      ((prolog_stmt_scope)prolog_stmt_stack.peek()).strings.add((PRO_SELECT259!=null?PRO_SELECT259.getText():null));
                    }
                    NAME260=(Token)match(input,NAME,FOLLOW_NAME_in_prolog_stmt6530); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NAME.add(NAME260);

                    if ( state.backtracking==0 ) {
                      ((prolog_stmt_scope)prolog_stmt_stack.peek()).strings.add((NAME260!=null?NAME260.getText():null));
                    }


                    // AST REWRITE
                    // elements: PRO_SELECT
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (PythonTree)adaptor.nil();
                    // 1788:2: -> ^( PRO_SELECT[$prolog_stmt.start, actions.castExprs($prolog_stmt::exprs), $expr::ctype, $prolog_stmt::strings, $prolog_stmt::append, false,\"\"] )
                    {
                        // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1788:5: ^( PRO_SELECT[$prolog_stmt.start, actions.castExprs($prolog_stmt::exprs), $expr::ctype, $prolog_stmt::strings, $prolog_stmt::append, false,\"\"] )
                        {
                        PythonTree root_1 = (PythonTree)adaptor.nil();
                        root_1 = (PythonTree)adaptor.becomeRoot(new Tuple(PRO_SELECT, ((Token)retval.start), actions.castExprs(((prolog_stmt_scope)prolog_stmt_stack.peek()).exprs), ((expr_scope)expr_stack.peek()).ctype, ((prolog_stmt_scope)prolog_stmt_stack.peek()).strings, ((prolog_stmt_scope)prolog_stmt_stack.peek()).append, false, ""), root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (PythonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {

              	if (etype != null) {
              		retval.tree = etype;
              	}

            }
        }

        catch (RecognitionException re) {
            errorHandler.reportError(this, re);
            errorHandler.recover(this, input,re);
            retval.tree = (PythonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
        }
        finally {
            prolog_stmt_stack.pop();
        }
        return retval;
    }
    // $ANTLR end "prolog_stmt"

    public static class prologinsert_return extends ParserRuleReturnScope {
        PythonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prologinsert"
    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1792:1: prologinsert : prologqueryfragment ( PRIMP prologqueryfragment (s2= COMMA prologqueryfragment )* )? ;
    public final PythonParser.prologinsert_return prologinsert() throws RecognitionException {
        PythonParser.prologinsert_return retval = new PythonParser.prologinsert_return();
        retval.start = input.LT(1);

        PythonTree root_0 = null;

        Token s2=null;
        Token PRIMP262=null;
        PythonParser.prologqueryfragment_return prologqueryfragment261 = null;

        PythonParser.prologqueryfragment_return prologqueryfragment263 = null;

        PythonParser.prologqueryfragment_return prologqueryfragment264 = null;


        PythonTree s2_tree=null;
        PythonTree PRIMP262_tree=null;

        try {
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1793:2: ( prologqueryfragment ( PRIMP prologqueryfragment (s2= COMMA prologqueryfragment )* )? )
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1793:4: prologqueryfragment ( PRIMP prologqueryfragment (s2= COMMA prologqueryfragment )* )?
            {
            root_0 = (PythonTree)adaptor.nil();

            pushFollow(FOLLOW_prologqueryfragment_in_prologinsert6559);
            prologqueryfragment261=prologqueryfragment();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, prologqueryfragment261.getTree());
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1793:24: ( PRIMP prologqueryfragment (s2= COMMA prologqueryfragment )* )?
            int alt115=2;
            int LA115_0 = input.LA(1);

            if ( (LA115_0==PRIMP) ) {
                alt115=1;
            }
            switch (alt115) {
                case 1 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1793:25: PRIMP prologqueryfragment (s2= COMMA prologqueryfragment )*
                    {
                    PRIMP262=(Token)match(input,PRIMP,FOLLOW_PRIMP_in_prologinsert6562); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PRIMP262_tree = (PythonTree)adaptor.create(PRIMP262);
                    adaptor.addChild(root_0, PRIMP262_tree);
                    }
                    if ( state.backtracking==0 ) {
                      ((prolog_stmt_scope)prolog_stmt_stack.peek()).temp+=":-";
                    }
                    pushFollow(FOLLOW_prologqueryfragment_in_prologinsert6568);
                    prologqueryfragment263=prologqueryfragment();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, prologqueryfragment263.getTree());
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1794:22: (s2= COMMA prologqueryfragment )*
                    loop114:
                    do {
                        int alt114=2;
                        int LA114_0 = input.LA(1);

                        if ( (LA114_0==COMMA) ) {
                            alt114=1;
                        }


                        switch (alt114) {
                    	case 1 :
                    	    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1794:23: s2= COMMA prologqueryfragment
                    	    {
                    	    s2=(Token)match(input,COMMA,FOLLOW_COMMA_in_prologinsert6573); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    s2_tree = (PythonTree)adaptor.create(s2);
                    	    adaptor.addChild(root_0, s2_tree);
                    	    }
                    	    if ( state.backtracking==0 ) {
                    	      ((prolog_stmt_scope)prolog_stmt_stack.peek()).temp+=(s2!=null?s2.getText():null);
                    	    }
                    	    pushFollow(FOLLOW_prologqueryfragment_in_prologinsert6578);
                    	    prologqueryfragment264=prologqueryfragment();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, prologqueryfragment264.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop114;
                        }
                    } while (true);


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (PythonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException re) {
            errorHandler.reportError(this, re);
            errorHandler.recover(this, input,re);
            retval.tree = (PythonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "prologinsert"

    public static class prologload_return extends ParserRuleReturnScope {
        PythonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prologload"
    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1799:1: prologload : (s= prologloadfragment | prologexpr );
    public final PythonParser.prologload_return prologload() throws RecognitionException {
        PythonParser.prologload_return retval = new PythonParser.prologload_return();
        retval.start = input.LT(1);

        PythonTree root_0 = null;

        PythonParser.prologloadfragment_return s = null;

        PythonParser.prologexpr_return prologexpr265 = null;



        try {
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1800:2: (s= prologloadfragment | prologexpr )
            int alt116=2;
            switch ( input.LA(1) ) {
            case DIGITS:
                {
                alt116=1;
                }
                break;
            case NAME:
                {
                int LA116_2 = input.LA(2);

                if ( (LA116_2==DOT) ) {
                    int LA116_4 = input.LA(3);

                    if ( (LA116_4==NAME) ) {
                        alt116=1;
                    }
                    else if ( ((LA116_4>=AND && LA116_4<=YIELD)) ) {
                        alt116=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 116, 4, input);

                        throw nvae;
                    }
                }
                else if ( (LA116_2==LPAREN||(LA116_2>=STAR && LA116_2<=DOUBLESTAR)||LA116_2==RIGHTSHIFT||(LA116_2>=VBAR && LA116_2<=DOUBLESLASH)||(LA116_2>=LBRACK && LA116_2<=RBRACK)) ) {
                    alt116=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 116, 2, input);

                    throw nvae;
                }
                }
                break;
            case LPAREN:
            case PLUS:
            case MINUS:
            case TILDE:
            case LBRACK:
            case LCURLY:
            case BACKQUOTE:
            case INT:
            case LONGINT:
            case FLOAT:
            case COMPLEX:
            case STRING:
            case PRO:
            case PRO_SELECT:
            case ASP:
            case ASP_SELECT:
            case ASP_PATH:
            case SELECT:
            case INSERT:
            case CREATE:
            case DROP:
            case UPDATE:
            case SQL_DELETE:
            case ALTER:
            case MAKECONNECT:
            case ASPSELECT:
            case RDFSELECT:
            case CAPSFROM:
            case MODIFY:
            case CAPSCLASS:
            case SUBCLASS:
                {
                alt116=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 116, 0, input);

                throw nvae;
            }

            switch (alt116) {
                case 1 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1800:5: s= prologloadfragment
                    {
                    root_0 = (PythonTree)adaptor.nil();

                    pushFollow(FOLLOW_prologloadfragment_in_prologload6599);
                    s=prologloadfragment();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, s.getTree());
                    if ( state.backtracking==0 ) {
                      ((prolog_stmt_scope)prolog_stmt_stack.peek()).temp+=(s!=null?input.toString(s.start,s.stop):null);
                    }

                    }
                    break;
                case 2 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1801:4: prologexpr
                    {
                    root_0 = (PythonTree)adaptor.nil();

                    pushFollow(FOLLOW_prologexpr_in_prologload6606);
                    prologexpr265=prologexpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, prologexpr265.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (PythonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException re) {
            errorHandler.reportError(this, re);
            errorHandler.recover(this, input,re);
            retval.tree = (PythonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "prologload"

    public static class prologloadfragment_return extends ParserRuleReturnScope {
        PythonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prologloadfragment"
    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1804:1: prologloadfragment : ( DIGITS )* NAME DOT NAME ;
    public final PythonParser.prologloadfragment_return prologloadfragment() throws RecognitionException {
        PythonParser.prologloadfragment_return retval = new PythonParser.prologloadfragment_return();
        retval.start = input.LT(1);

        PythonTree root_0 = null;

        Token DIGITS266=null;
        Token NAME267=null;
        Token DOT268=null;
        Token NAME269=null;

        PythonTree DIGITS266_tree=null;
        PythonTree NAME267_tree=null;
        PythonTree DOT268_tree=null;
        PythonTree NAME269_tree=null;

        try {
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1805:2: ( ( DIGITS )* NAME DOT NAME )
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1805:4: ( DIGITS )* NAME DOT NAME
            {
            root_0 = (PythonTree)adaptor.nil();

            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1805:4: ( DIGITS )*
            loop117:
            do {
                int alt117=2;
                int LA117_0 = input.LA(1);

                if ( (LA117_0==DIGITS) ) {
                    alt117=1;
                }


                switch (alt117) {
            	case 1 :
            	    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1805:5: DIGITS
            	    {
            	    DIGITS266=(Token)match(input,DIGITS,FOLLOW_DIGITS_in_prologloadfragment6619); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    DIGITS266_tree = (PythonTree)adaptor.create(DIGITS266);
            	    adaptor.addChild(root_0, DIGITS266_tree);
            	    }

            	    }
            	    break;

            	default :
            	    break loop117;
                }
            } while (true);

            NAME267=(Token)match(input,NAME,FOLLOW_NAME_in_prologloadfragment6623); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            NAME267_tree = (PythonTree)adaptor.create(NAME267);
            adaptor.addChild(root_0, NAME267_tree);
            }
            DOT268=(Token)match(input,DOT,FOLLOW_DOT_in_prologloadfragment6625); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            DOT268_tree = (PythonTree)adaptor.create(DOT268);
            adaptor.addChild(root_0, DOT268_tree);
            }
            NAME269=(Token)match(input,NAME,FOLLOW_NAME_in_prologloadfragment6627); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            NAME269_tree = (PythonTree)adaptor.create(NAME269);
            adaptor.addChild(root_0, NAME269_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (PythonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException re) {
            errorHandler.reportError(this, re);
            errorHandler.recover(this, input,re);
            retval.tree = (PythonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "prologloadfragment"

    public static class prologquery_return extends ParserRuleReturnScope {
        PythonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prologquery"
    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1808:1: prologquery : prologqueryfragment ;
    public final PythonParser.prologquery_return prologquery() throws RecognitionException {
        PythonParser.prologquery_return retval = new PythonParser.prologquery_return();
        retval.start = input.LT(1);

        PythonTree root_0 = null;

        PythonParser.prologqueryfragment_return prologqueryfragment270 = null;



        try {
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1809:2: ( prologqueryfragment )
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1809:4: prologqueryfragment
            {
            root_0 = (PythonTree)adaptor.nil();

            pushFollow(FOLLOW_prologqueryfragment_in_prologquery6640);
            prologqueryfragment270=prologqueryfragment();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, prologqueryfragment270.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (PythonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException re) {
            errorHandler.reportError(this, re);
            errorHandler.recover(this, input,re);
            retval.tree = (PythonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "prologquery"

    public static class prologqueryfragment_return extends ParserRuleReturnScope {
        PythonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prologqueryfragment"
    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1812:1: prologqueryfragment : prologatom ( LPAREN prologqueryinterior (s2= COMMA prologqueryinterior )* RPAREN )? ;
    public final PythonParser.prologqueryfragment_return prologqueryfragment() throws RecognitionException {
        PythonParser.prologqueryfragment_return retval = new PythonParser.prologqueryfragment_return();
        retval.start = input.LT(1);

        PythonTree root_0 = null;

        Token s2=null;
        Token LPAREN272=null;
        Token RPAREN275=null;
        PythonParser.prologatom_return prologatom271 = null;

        PythonParser.prologqueryinterior_return prologqueryinterior273 = null;

        PythonParser.prologqueryinterior_return prologqueryinterior274 = null;


        PythonTree s2_tree=null;
        PythonTree LPAREN272_tree=null;
        PythonTree RPAREN275_tree=null;

        try {
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1813:2: ( prologatom ( LPAREN prologqueryinterior (s2= COMMA prologqueryinterior )* RPAREN )? )
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1813:4: prologatom ( LPAREN prologqueryinterior (s2= COMMA prologqueryinterior )* RPAREN )?
            {
            root_0 = (PythonTree)adaptor.nil();

            pushFollow(FOLLOW_prologatom_in_prologqueryfragment6652);
            prologatom271=prologatom();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, prologatom271.getTree());
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1814:3: ( LPAREN prologqueryinterior (s2= COMMA prologqueryinterior )* RPAREN )?
            int alt119=2;
            int LA119_0 = input.LA(1);

            if ( (LA119_0==LPAREN) ) {
                alt119=1;
            }
            switch (alt119) {
                case 1 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1814:4: LPAREN prologqueryinterior (s2= COMMA prologqueryinterior )* RPAREN
                    {
                    LPAREN272=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_prologqueryfragment6657); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LPAREN272_tree = (PythonTree)adaptor.create(LPAREN272);
                    adaptor.addChild(root_0, LPAREN272_tree);
                    }
                    if ( state.backtracking==0 ) {
                      ((prolog_stmt_scope)prolog_stmt_stack.peek()).temp+="(";
                    }
                    pushFollow(FOLLOW_prologqueryinterior_in_prologqueryfragment6663);
                    prologqueryinterior273=prologqueryinterior();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, prologqueryinterior273.getTree());
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1815:23: (s2= COMMA prologqueryinterior )*
                    loop118:
                    do {
                        int alt118=2;
                        int LA118_0 = input.LA(1);

                        if ( (LA118_0==COMMA) ) {
                            alt118=1;
                        }


                        switch (alt118) {
                    	case 1 :
                    	    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1815:24: s2= COMMA prologqueryinterior
                    	    {
                    	    s2=(Token)match(input,COMMA,FOLLOW_COMMA_in_prologqueryfragment6668); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    s2_tree = (PythonTree)adaptor.create(s2);
                    	    adaptor.addChild(root_0, s2_tree);
                    	    }
                    	    if ( state.backtracking==0 ) {
                    	      ((prolog_stmt_scope)prolog_stmt_stack.peek()).temp+=(s2!=null?s2.getText():null);
                    	    }
                    	    pushFollow(FOLLOW_prologqueryinterior_in_prologqueryfragment6674);
                    	    prologqueryinterior274=prologqueryinterior();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, prologqueryinterior274.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop118;
                        }
                    } while (true);

                    RPAREN275=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_prologqueryfragment6681); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RPAREN275_tree = (PythonTree)adaptor.create(RPAREN275);
                    adaptor.addChild(root_0, RPAREN275_tree);
                    }
                    if ( state.backtracking==0 ) {
                      ((prolog_stmt_scope)prolog_stmt_stack.peek()).temp+=")";
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (PythonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException re) {
            errorHandler.reportError(this, re);
            errorHandler.recover(this, input,re);
            retval.tree = (PythonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "prologqueryfragment"

    public static class prologqueryinterior_return extends ParserRuleReturnScope {
        PythonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prologqueryinterior"
    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1820:1: prologqueryinterior : (s3= STRING | prologexpr );
    public final PythonParser.prologqueryinterior_return prologqueryinterior() throws RecognitionException {
        PythonParser.prologqueryinterior_return retval = new PythonParser.prologqueryinterior_return();
        retval.start = input.LT(1);

        PythonTree root_0 = null;

        Token s3=null;
        PythonParser.prologexpr_return prologexpr276 = null;


        PythonTree s3_tree=null;

        try {
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1821:2: (s3= STRING | prologexpr )
            int alt120=2;
            int LA120_0 = input.LA(1);

            if ( (LA120_0==STRING) ) {
                alt120=1;
            }
            else if ( (LA120_0==NAME||LA120_0==LPAREN||(LA120_0>=PLUS && LA120_0<=MINUS)||(LA120_0>=TILDE && LA120_0<=LBRACK)||LA120_0==LCURLY||(LA120_0>=BACKQUOTE && LA120_0<=COMPLEX)||LA120_0==PRO||LA120_0==PRO_SELECT||LA120_0==ASP||LA120_0==ASP_SELECT||LA120_0==ASP_PATH||(LA120_0>=SELECT && LA120_0<=RDFSELECT)||LA120_0==CAPSFROM||(LA120_0>=MODIFY && LA120_0<=SUBCLASS)) ) {
                alt120=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 120, 0, input);

                throw nvae;
            }
            switch (alt120) {
                case 1 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1821:4: s3= STRING
                    {
                    root_0 = (PythonTree)adaptor.nil();

                    s3=(Token)match(input,STRING,FOLLOW_STRING_in_prologqueryinterior6700); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    s3_tree = (PythonTree)adaptor.create(s3);
                    adaptor.addChild(root_0, s3_tree);
                    }
                    if ( state.backtracking==0 ) {
                      ((prolog_stmt_scope)prolog_stmt_stack.peek()).temp+=(s3!=null?s3.getText():null);
                    }

                    }
                    break;
                case 2 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1822:4: prologexpr
                    {
                    root_0 = (PythonTree)adaptor.nil();

                    pushFollow(FOLLOW_prologexpr_in_prologqueryinterior6707);
                    prologexpr276=prologexpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, prologexpr276.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (PythonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException re) {
            errorHandler.reportError(this, re);
            errorHandler.recover(this, input,re);
            retval.tree = (PythonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "prologqueryinterior"

    public static class prologatom_return extends ParserRuleReturnScope {
        PythonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prologatom"
    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1825:1: prologatom : e= atom ;
    public final PythonParser.prologatom_return prologatom() throws RecognitionException {
        PythonParser.prologatom_return retval = new PythonParser.prologatom_return();
        retval.start = input.LT(1);

        PythonTree root_0 = null;

        PythonParser.atom_return e = null;



        try {
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1826:2: (e= atom )
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1826:4: e= atom
            {
            root_0 = (PythonTree)adaptor.nil();

            pushFollow(FOLLOW_atom_in_prologatom6724);
            e=atom();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, e.getTree());
            if ( state.backtracking==0 ) {
              ((prolog_stmt_scope)prolog_stmt_stack.peek()).exprs.add(actions.castExpr((e!=null?((PythonTree)e.tree):null)));
              	((prolog_stmt_scope)prolog_stmt_stack.peek()).strings.add(((prolog_stmt_scope)prolog_stmt_stack.peek()).temp);
              	((prolog_stmt_scope)prolog_stmt_stack.peek()).temp =""; 
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (PythonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException re) {
            errorHandler.reportError(this, re);
            errorHandler.recover(this, input,re);
            retval.tree = (PythonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "prologatom"

    public static class prologsave_return extends ParserRuleReturnScope {
        PythonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prologsave"
    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1832:1: prologsave : ( prologload | s1= CLEAR );
    public final PythonParser.prologsave_return prologsave() throws RecognitionException {
        PythonParser.prologsave_return retval = new PythonParser.prologsave_return();
        retval.start = input.LT(1);

        PythonTree root_0 = null;

        Token s1=null;
        PythonParser.prologload_return prologload277 = null;


        PythonTree s1_tree=null;

        try {
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1833:2: ( prologload | s1= CLEAR )
            int alt121=2;
            int LA121_0 = input.LA(1);

            if ( (LA121_0==NAME||LA121_0==LPAREN||(LA121_0>=PLUS && LA121_0<=MINUS)||(LA121_0>=TILDE && LA121_0<=LBRACK)||LA121_0==LCURLY||(LA121_0>=BACKQUOTE && LA121_0<=PRO)||LA121_0==PRO_SELECT||LA121_0==DIGITS||LA121_0==ASP||LA121_0==ASP_SELECT||LA121_0==ASP_PATH||(LA121_0>=SELECT && LA121_0<=RDFSELECT)||LA121_0==CAPSFROM||(LA121_0>=MODIFY && LA121_0<=SUBCLASS)) ) {
                alt121=1;
            }
            else if ( (LA121_0==CLEAR) ) {
                alt121=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 121, 0, input);

                throw nvae;
            }
            switch (alt121) {
                case 1 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1833:4: prologload
                    {
                    root_0 = (PythonTree)adaptor.nil();

                    pushFollow(FOLLOW_prologload_in_prologsave6740);
                    prologload277=prologload();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, prologload277.getTree());

                    }
                    break;
                case 2 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1834:4: s1= CLEAR
                    {
                    root_0 = (PythonTree)adaptor.nil();

                    s1=(Token)match(input,CLEAR,FOLLOW_CLEAR_in_prologsave6747); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    s1_tree = (PythonTree)adaptor.create(s1);
                    adaptor.addChild(root_0, s1_tree);
                    }
                    if ( state.backtracking==0 ) {
                      ((prolog_stmt_scope)prolog_stmt_stack.peek()).temp+=(s1!=null?s1.getText():null);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (PythonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException re) {
            errorHandler.reportError(this, re);
            errorHandler.recover(this, input,re);
            retval.tree = (PythonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "prologsave"

    public static class prologexpr_return extends ParserRuleReturnScope {
        PythonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "prologexpr"
    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1837:1: prologexpr : e= expr[expr_contextType.Load] ;
    public final PythonParser.prologexpr_return prologexpr() throws RecognitionException {
        PythonParser.prologexpr_return retval = new PythonParser.prologexpr_return();
        retval.start = input.LT(1);

        PythonTree root_0 = null;

        PythonParser.expr_return e = null;



        try {
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1838:2: (e= expr[expr_contextType.Load] )
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1838:4: e= expr[expr_contextType.Load]
            {
            root_0 = (PythonTree)adaptor.nil();

            pushFollow(FOLLOW_expr_in_prologexpr6765);
            e=expr(expr_contextType.Load);

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, e.getTree());
            if ( state.backtracking==0 ) {
              ((prolog_stmt_scope)prolog_stmt_stack.peek()).exprs.add(actions.castExpr((e!=null?((PythonTree)e.tree):null)));
              	((prolog_stmt_scope)prolog_stmt_stack.peek()).strings.add(((prolog_stmt_scope)prolog_stmt_stack.peek()).temp);
              	((prolog_stmt_scope)prolog_stmt_stack.peek()).temp =""; 
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (PythonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException re) {
            errorHandler.reportError(this, re);
            errorHandler.recover(this, input,re);
            retval.tree = (PythonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "prologexpr"

    protected static class asp_stmt_scope {
        String dir;
        Boolean append;
        List exprs;
        List strings;
        String temp;
    }
    protected Stack asp_stmt_stack = new Stack();

    public static class asp_stmt_return extends ParserRuleReturnScope {
        PythonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "asp_stmt"
    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1844:1: asp_stmt : ( ( ASP PRLO aspload RBRACK ( PLUS )? DOT -> ^( PRLO[$asp_stmt.start,actions.castExprs($asp_stmt::exprs), $expr::ctype, $asp_stmt::strings, $asp_stmt::append, true, $asp_stmt::dir] ) ) | ( ASP ASPBLANKQ -> ^( ASPBLANKQ[$asp_stmt.start,actions.castExprs($asp_stmt::exprs), $expr::ctype, $asp_stmt::strings, $asp_stmt::append, true, $asp_stmt::dir] ) ) | ( ASP ASPPRINTDB -> ^( ASPPRINTDB[$asp_stmt.start,actions.castExprs($asp_stmt::exprs), $expr::ctype, $asp_stmt::strings, $asp_stmt::append, true, $asp_stmt::dir] ) ) | ( ASP PRQO aspquery DOT -> ^( PRQO[$asp_stmt.start,actions.castExprs($asp_stmt::exprs), $expr::ctype, $asp_stmt::strings, $asp_stmt::append, true, $asp_stmt::dir] ) ) | ( ASP PRIO aspquery DOT -> ^( PRQO[$asp_stmt.start,actions.castExprs($asp_stmt::exprs), $expr::ctype, $asp_stmt::strings, $asp_stmt::append, true, $asp_stmt::dir] ) ) | ( ASP PRSO aspsave RBRACK ( PLUS )? DOT -> ^( PRSO[$asp_stmt.start, actions.castExprs($asp_stmt::exprs), $expr::ctype, $asp_stmt::strings, $asp_stmt::append, true, $asp_stmt::dir] ) ) | ( ASP_SELECT ( REG_FACT | GROUP_FACT ) NAME -> ^( ASP_SELECT[$asp_stmt.start, actions.castExprs($asp_stmt::exprs), $expr::ctype, $asp_stmt::strings, $asp_stmt::append, true, $asp_stmt::dir] ) ) | ( ASP_PATH aspdir -> ^( ASP_PATH[$asp_stmt.start,actions.castExprs($asp_stmt::exprs), $expr::ctype, $asp_stmt::strings, $asp_stmt::append, true, $asp_stmt::dir] ) ) ) ;
    public final PythonParser.asp_stmt_return asp_stmt() throws RecognitionException {
        asp_stmt_stack.push(new asp_stmt_scope());
        PythonParser.asp_stmt_return retval = new PythonParser.asp_stmt_return();
        retval.start = input.LT(1);

        PythonTree root_0 = null;

        Token ASP278=null;
        Token PRLO279=null;
        Token RBRACK281=null;
        Token PLUS282=null;
        Token DOT283=null;
        Token ASP284=null;
        Token ASPBLANKQ285=null;
        Token ASP286=null;
        Token ASPPRINTDB287=null;
        Token ASP288=null;
        Token PRQO289=null;
        Token DOT291=null;
        Token ASP292=null;
        Token PRIO293=null;
        Token DOT295=null;
        Token ASP296=null;
        Token PRSO297=null;
        Token RBRACK299=null;
        Token PLUS300=null;
        Token DOT301=null;
        Token ASP_SELECT302=null;
        Token REG_FACT303=null;
        Token GROUP_FACT304=null;
        Token NAME305=null;
        Token ASP_PATH306=null;
        PythonParser.aspload_return aspload280 = null;

        PythonParser.aspquery_return aspquery290 = null;

        PythonParser.aspquery_return aspquery294 = null;

        PythonParser.aspsave_return aspsave298 = null;

        PythonParser.aspdir_return aspdir307 = null;


        PythonTree ASP278_tree=null;
        PythonTree PRLO279_tree=null;
        PythonTree RBRACK281_tree=null;
        PythonTree PLUS282_tree=null;
        PythonTree DOT283_tree=null;
        PythonTree ASP284_tree=null;
        PythonTree ASPBLANKQ285_tree=null;
        PythonTree ASP286_tree=null;
        PythonTree ASPPRINTDB287_tree=null;
        PythonTree ASP288_tree=null;
        PythonTree PRQO289_tree=null;
        PythonTree DOT291_tree=null;
        PythonTree ASP292_tree=null;
        PythonTree PRIO293_tree=null;
        PythonTree DOT295_tree=null;
        PythonTree ASP296_tree=null;
        PythonTree PRSO297_tree=null;
        PythonTree RBRACK299_tree=null;
        PythonTree PLUS300_tree=null;
        PythonTree DOT301_tree=null;
        PythonTree ASP_SELECT302_tree=null;
        PythonTree REG_FACT303_tree=null;
        PythonTree GROUP_FACT304_tree=null;
        PythonTree NAME305_tree=null;
        PythonTree ASP_PATH306_tree=null;
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_ASPPRINTDB=new RewriteRuleTokenStream(adaptor,"token ASPPRINTDB");
        RewriteRuleTokenStream stream_NAME=new RewriteRuleTokenStream(adaptor,"token NAME");
        RewriteRuleTokenStream stream_ASP=new RewriteRuleTokenStream(adaptor,"token ASP");
        RewriteRuleTokenStream stream_GROUP_FACT=new RewriteRuleTokenStream(adaptor,"token GROUP_FACT");
        RewriteRuleTokenStream stream_PRIO=new RewriteRuleTokenStream(adaptor,"token PRIO");
        RewriteRuleTokenStream stream_PRSO=new RewriteRuleTokenStream(adaptor,"token PRSO");
        RewriteRuleTokenStream stream_REG_FACT=new RewriteRuleTokenStream(adaptor,"token REG_FACT");
        RewriteRuleTokenStream stream_PLUS=new RewriteRuleTokenStream(adaptor,"token PLUS");
        RewriteRuleTokenStream stream_ASP_SELECT=new RewriteRuleTokenStream(adaptor,"token ASP_SELECT");
        RewriteRuleTokenStream stream_PRQO=new RewriteRuleTokenStream(adaptor,"token PRQO");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleTokenStream stream_PRLO=new RewriteRuleTokenStream(adaptor,"token PRLO");
        RewriteRuleTokenStream stream_ASP_PATH=new RewriteRuleTokenStream(adaptor,"token ASP_PATH");
        RewriteRuleTokenStream stream_ASPBLANKQ=new RewriteRuleTokenStream(adaptor,"token ASPBLANKQ");
        RewriteRuleSubtreeStream stream_aspload=new RewriteRuleSubtreeStream(adaptor,"rule aspload");
        RewriteRuleSubtreeStream stream_aspsave=new RewriteRuleSubtreeStream(adaptor,"rule aspsave");
        RewriteRuleSubtreeStream stream_aspquery=new RewriteRuleSubtreeStream(adaptor,"rule aspquery");
        RewriteRuleSubtreeStream stream_aspdir=new RewriteRuleSubtreeStream(adaptor,"rule aspdir");

        	expr etype = null;

        try {
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1905:2: ( ( ( ASP PRLO aspload RBRACK ( PLUS )? DOT -> ^( PRLO[$asp_stmt.start,actions.castExprs($asp_stmt::exprs), $expr::ctype, $asp_stmt::strings, $asp_stmt::append, true, $asp_stmt::dir] ) ) | ( ASP ASPBLANKQ -> ^( ASPBLANKQ[$asp_stmt.start,actions.castExprs($asp_stmt::exprs), $expr::ctype, $asp_stmt::strings, $asp_stmt::append, true, $asp_stmt::dir] ) ) | ( ASP ASPPRINTDB -> ^( ASPPRINTDB[$asp_stmt.start,actions.castExprs($asp_stmt::exprs), $expr::ctype, $asp_stmt::strings, $asp_stmt::append, true, $asp_stmt::dir] ) ) | ( ASP PRQO aspquery DOT -> ^( PRQO[$asp_stmt.start,actions.castExprs($asp_stmt::exprs), $expr::ctype, $asp_stmt::strings, $asp_stmt::append, true, $asp_stmt::dir] ) ) | ( ASP PRIO aspquery DOT -> ^( PRQO[$asp_stmt.start,actions.castExprs($asp_stmt::exprs), $expr::ctype, $asp_stmt::strings, $asp_stmt::append, true, $asp_stmt::dir] ) ) | ( ASP PRSO aspsave RBRACK ( PLUS )? DOT -> ^( PRSO[$asp_stmt.start, actions.castExprs($asp_stmt::exprs), $expr::ctype, $asp_stmt::strings, $asp_stmt::append, true, $asp_stmt::dir] ) ) | ( ASP_SELECT ( REG_FACT | GROUP_FACT ) NAME -> ^( ASP_SELECT[$asp_stmt.start, actions.castExprs($asp_stmt::exprs), $expr::ctype, $asp_stmt::strings, $asp_stmt::append, true, $asp_stmt::dir] ) ) | ( ASP_PATH aspdir -> ^( ASP_PATH[$asp_stmt.start,actions.castExprs($asp_stmt::exprs), $expr::ctype, $asp_stmt::strings, $asp_stmt::append, true, $asp_stmt::dir] ) ) ) )
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1906:3: ( ( ASP PRLO aspload RBRACK ( PLUS )? DOT -> ^( PRLO[$asp_stmt.start,actions.castExprs($asp_stmt::exprs), $expr::ctype, $asp_stmt::strings, $asp_stmt::append, true, $asp_stmt::dir] ) ) | ( ASP ASPBLANKQ -> ^( ASPBLANKQ[$asp_stmt.start,actions.castExprs($asp_stmt::exprs), $expr::ctype, $asp_stmt::strings, $asp_stmt::append, true, $asp_stmt::dir] ) ) | ( ASP ASPPRINTDB -> ^( ASPPRINTDB[$asp_stmt.start,actions.castExprs($asp_stmt::exprs), $expr::ctype, $asp_stmt::strings, $asp_stmt::append, true, $asp_stmt::dir] ) ) | ( ASP PRQO aspquery DOT -> ^( PRQO[$asp_stmt.start,actions.castExprs($asp_stmt::exprs), $expr::ctype, $asp_stmt::strings, $asp_stmt::append, true, $asp_stmt::dir] ) ) | ( ASP PRIO aspquery DOT -> ^( PRQO[$asp_stmt.start,actions.castExprs($asp_stmt::exprs), $expr::ctype, $asp_stmt::strings, $asp_stmt::append, true, $asp_stmt::dir] ) ) | ( ASP PRSO aspsave RBRACK ( PLUS )? DOT -> ^( PRSO[$asp_stmt.start, actions.castExprs($asp_stmt::exprs), $expr::ctype, $asp_stmt::strings, $asp_stmt::append, true, $asp_stmt::dir] ) ) | ( ASP_SELECT ( REG_FACT | GROUP_FACT ) NAME -> ^( ASP_SELECT[$asp_stmt.start, actions.castExprs($asp_stmt::exprs), $expr::ctype, $asp_stmt::strings, $asp_stmt::append, true, $asp_stmt::dir] ) ) | ( ASP_PATH aspdir -> ^( ASP_PATH[$asp_stmt.start,actions.castExprs($asp_stmt::exprs), $expr::ctype, $asp_stmt::strings, $asp_stmt::append, true, $asp_stmt::dir] ) ) )
            {
            if ( state.backtracking==0 ) {

              		((asp_stmt_scope)asp_stmt_stack.peek()).dir = "";
              		((asp_stmt_scope)asp_stmt_stack.peek()).append = false;
              		((asp_stmt_scope)asp_stmt_stack.peek()).exprs = new ArrayList<expr>();
              		((asp_stmt_scope)asp_stmt_stack.peek()).strings = new ArrayList<String>();
              		((asp_stmt_scope)asp_stmt_stack.peek()).temp = "";
              	
            }
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1913:2: ( ( ASP PRLO aspload RBRACK ( PLUS )? DOT -> ^( PRLO[$asp_stmt.start,actions.castExprs($asp_stmt::exprs), $expr::ctype, $asp_stmt::strings, $asp_stmt::append, true, $asp_stmt::dir] ) ) | ( ASP ASPBLANKQ -> ^( ASPBLANKQ[$asp_stmt.start,actions.castExprs($asp_stmt::exprs), $expr::ctype, $asp_stmt::strings, $asp_stmt::append, true, $asp_stmt::dir] ) ) | ( ASP ASPPRINTDB -> ^( ASPPRINTDB[$asp_stmt.start,actions.castExprs($asp_stmt::exprs), $expr::ctype, $asp_stmt::strings, $asp_stmt::append, true, $asp_stmt::dir] ) ) | ( ASP PRQO aspquery DOT -> ^( PRQO[$asp_stmt.start,actions.castExprs($asp_stmt::exprs), $expr::ctype, $asp_stmt::strings, $asp_stmt::append, true, $asp_stmt::dir] ) ) | ( ASP PRIO aspquery DOT -> ^( PRQO[$asp_stmt.start,actions.castExprs($asp_stmt::exprs), $expr::ctype, $asp_stmt::strings, $asp_stmt::append, true, $asp_stmt::dir] ) ) | ( ASP PRSO aspsave RBRACK ( PLUS )? DOT -> ^( PRSO[$asp_stmt.start, actions.castExprs($asp_stmt::exprs), $expr::ctype, $asp_stmt::strings, $asp_stmt::append, true, $asp_stmt::dir] ) ) | ( ASP_SELECT ( REG_FACT | GROUP_FACT ) NAME -> ^( ASP_SELECT[$asp_stmt.start, actions.castExprs($asp_stmt::exprs), $expr::ctype, $asp_stmt::strings, $asp_stmt::append, true, $asp_stmt::dir] ) ) | ( ASP_PATH aspdir -> ^( ASP_PATH[$asp_stmt.start,actions.castExprs($asp_stmt::exprs), $expr::ctype, $asp_stmt::strings, $asp_stmt::append, true, $asp_stmt::dir] ) ) )
            int alt125=8;
            alt125 = dfa125.predict(input);
            switch (alt125) {
                case 1 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1914:2: ( ASP PRLO aspload RBRACK ( PLUS )? DOT -> ^( PRLO[$asp_stmt.start,actions.castExprs($asp_stmt::exprs), $expr::ctype, $asp_stmt::strings, $asp_stmt::append, true, $asp_stmt::dir] ) )
                    {
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1914:2: ( ASP PRLO aspload RBRACK ( PLUS )? DOT -> ^( PRLO[$asp_stmt.start,actions.castExprs($asp_stmt::exprs), $expr::ctype, $asp_stmt::strings, $asp_stmt::append, true, $asp_stmt::dir] ) )
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1914:3: ASP PRLO aspload RBRACK ( PLUS )? DOT
                    {
                    ASP278=(Token)match(input,ASP,FOLLOW_ASP_in_asp_stmt6807); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ASP.add(ASP278);

                    PRLO279=(Token)match(input,PRLO,FOLLOW_PRLO_in_asp_stmt6809); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_PRLO.add(PRLO279);

                    if ( state.backtracking==0 ) {
                      ((asp_stmt_scope)asp_stmt_stack.peek()).strings.add((PRLO279!=null?PRLO279.getText():null));
                    }
                    pushFollow(FOLLOW_aspload_in_asp_stmt6812);
                    aspload280=aspload();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_aspload.add(aspload280.getTree());
                    RBRACK281=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_asp_stmt6814); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RBRACK.add(RBRACK281);

                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1914:64: ( PLUS )?
                    int alt122=2;
                    int LA122_0 = input.LA(1);

                    if ( (LA122_0==PLUS) ) {
                        alt122=1;
                    }
                    switch (alt122) {
                        case 1 :
                            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1914:65: PLUS
                            {
                            PLUS282=(Token)match(input,PLUS,FOLLOW_PLUS_in_asp_stmt6817); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_PLUS.add(PLUS282);

                            if ( state.backtracking==0 ) {
                              ((asp_stmt_scope)asp_stmt_stack.peek()).append =true;
                            }

                            }
                            break;

                    }

                    DOT283=(Token)match(input,DOT,FOLLOW_DOT_in_asp_stmt6823); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOT.add(DOT283);

                    if ( state.backtracking==0 ) {
                      ((asp_stmt_scope)asp_stmt_stack.peek()).strings.add(((asp_stmt_scope)asp_stmt_stack.peek()).temp);
                    }


                    // AST REWRITE
                    // elements: PRLO
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (PythonTree)adaptor.nil();
                    // 1916:2: -> ^( PRLO[$asp_stmt.start,actions.castExprs($asp_stmt::exprs), $expr::ctype, $asp_stmt::strings, $asp_stmt::append, true, $asp_stmt::dir] )
                    {
                        // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1916:5: ^( PRLO[$asp_stmt.start,actions.castExprs($asp_stmt::exprs), $expr::ctype, $asp_stmt::strings, $asp_stmt::append, true, $asp_stmt::dir] )
                        {
                        PythonTree root_1 = (PythonTree)adaptor.nil();
                        root_1 = (PythonTree)adaptor.becomeRoot(new Tuple(PRLO, ((Token)retval.start), actions.castExprs(((asp_stmt_scope)asp_stmt_stack.peek()).exprs), ((expr_scope)expr_stack.peek()).ctype, ((asp_stmt_scope)asp_stmt_stack.peek()).strings, ((asp_stmt_scope)asp_stmt_stack.peek()).append, true, ((asp_stmt_scope)asp_stmt_stack.peek()).dir), root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }


                    }
                    break;
                case 2 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1917:2: ( ASP ASPBLANKQ -> ^( ASPBLANKQ[$asp_stmt.start,actions.castExprs($asp_stmt::exprs), $expr::ctype, $asp_stmt::strings, $asp_stmt::append, true, $asp_stmt::dir] ) )
                    {
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1917:2: ( ASP ASPBLANKQ -> ^( ASPBLANKQ[$asp_stmt.start,actions.castExprs($asp_stmt::exprs), $expr::ctype, $asp_stmt::strings, $asp_stmt::append, true, $asp_stmt::dir] ) )
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1917:3: ASP ASPBLANKQ
                    {
                    ASP284=(Token)match(input,ASP,FOLLOW_ASP_in_asp_stmt6848); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ASP.add(ASP284);

                    ASPBLANKQ285=(Token)match(input,ASPBLANKQ,FOLLOW_ASPBLANKQ_in_asp_stmt6850); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ASPBLANKQ.add(ASPBLANKQ285);

                    if ( state.backtracking==0 ) {
                      ((asp_stmt_scope)asp_stmt_stack.peek()).strings.add((ASPBLANKQ285!=null?ASPBLANKQ285.getText():null));
                    }


                    // AST REWRITE
                    // elements: ASPBLANKQ
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (PythonTree)adaptor.nil();
                    // 1918:2: -> ^( ASPBLANKQ[$asp_stmt.start,actions.castExprs($asp_stmt::exprs), $expr::ctype, $asp_stmt::strings, $asp_stmt::append, true, $asp_stmt::dir] )
                    {
                        // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1918:5: ^( ASPBLANKQ[$asp_stmt.start,actions.castExprs($asp_stmt::exprs), $expr::ctype, $asp_stmt::strings, $asp_stmt::append, true, $asp_stmt::dir] )
                        {
                        PythonTree root_1 = (PythonTree)adaptor.nil();
                        root_1 = (PythonTree)adaptor.becomeRoot(new Tuple(ASPBLANKQ, ((Token)retval.start), actions.castExprs(((asp_stmt_scope)asp_stmt_stack.peek()).exprs), ((expr_scope)expr_stack.peek()).ctype, ((asp_stmt_scope)asp_stmt_stack.peek()).strings, ((asp_stmt_scope)asp_stmt_stack.peek()).append, true, ((asp_stmt_scope)asp_stmt_stack.peek()).dir), root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }


                    }
                    break;
                case 3 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1919:2: ( ASP ASPPRINTDB -> ^( ASPPRINTDB[$asp_stmt.start,actions.castExprs($asp_stmt::exprs), $expr::ctype, $asp_stmt::strings, $asp_stmt::append, true, $asp_stmt::dir] ) )
                    {
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1919:2: ( ASP ASPPRINTDB -> ^( ASPPRINTDB[$asp_stmt.start,actions.castExprs($asp_stmt::exprs), $expr::ctype, $asp_stmt::strings, $asp_stmt::append, true, $asp_stmt::dir] ) )
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1919:3: ASP ASPPRINTDB
                    {
                    ASP286=(Token)match(input,ASP,FOLLOW_ASP_in_asp_stmt6869); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ASP.add(ASP286);

                    ASPPRINTDB287=(Token)match(input,ASPPRINTDB,FOLLOW_ASPPRINTDB_in_asp_stmt6871); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ASPPRINTDB.add(ASPPRINTDB287);

                    if ( state.backtracking==0 ) {
                      ((asp_stmt_scope)asp_stmt_stack.peek()).strings.add((ASPPRINTDB287!=null?ASPPRINTDB287.getText():null));
                    }


                    // AST REWRITE
                    // elements: ASPPRINTDB
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (PythonTree)adaptor.nil();
                    // 1920:2: -> ^( ASPPRINTDB[$asp_stmt.start,actions.castExprs($asp_stmt::exprs), $expr::ctype, $asp_stmt::strings, $asp_stmt::append, true, $asp_stmt::dir] )
                    {
                        // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1920:5: ^( ASPPRINTDB[$asp_stmt.start,actions.castExprs($asp_stmt::exprs), $expr::ctype, $asp_stmt::strings, $asp_stmt::append, true, $asp_stmt::dir] )
                        {
                        PythonTree root_1 = (PythonTree)adaptor.nil();
                        root_1 = (PythonTree)adaptor.becomeRoot(new Tuple(ASPPRINTDB, ((Token)retval.start), actions.castExprs(((asp_stmt_scope)asp_stmt_stack.peek()).exprs), ((expr_scope)expr_stack.peek()).ctype, ((asp_stmt_scope)asp_stmt_stack.peek()).strings, ((asp_stmt_scope)asp_stmt_stack.peek()).append, true, ((asp_stmt_scope)asp_stmt_stack.peek()).dir), root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }


                    }
                    break;
                case 4 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1921:2: ( ASP PRQO aspquery DOT -> ^( PRQO[$asp_stmt.start,actions.castExprs($asp_stmt::exprs), $expr::ctype, $asp_stmt::strings, $asp_stmt::append, true, $asp_stmt::dir] ) )
                    {
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1921:2: ( ASP PRQO aspquery DOT -> ^( PRQO[$asp_stmt.start,actions.castExprs($asp_stmt::exprs), $expr::ctype, $asp_stmt::strings, $asp_stmt::append, true, $asp_stmt::dir] ) )
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1921:3: ASP PRQO aspquery DOT
                    {
                    ASP288=(Token)match(input,ASP,FOLLOW_ASP_in_asp_stmt6890); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ASP.add(ASP288);

                    PRQO289=(Token)match(input,PRQO,FOLLOW_PRQO_in_asp_stmt6892); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_PRQO.add(PRQO289);

                    if ( state.backtracking==0 ) {
                      ((asp_stmt_scope)asp_stmt_stack.peek()).strings.add((PRQO289!=null?PRQO289.getText():null));
                    }
                    pushFollow(FOLLOW_aspquery_in_asp_stmt6895);
                    aspquery290=aspquery();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_aspquery.add(aspquery290.getTree());
                    DOT291=(Token)match(input,DOT,FOLLOW_DOT_in_asp_stmt6897); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOT.add(DOT291);

                    if ( state.backtracking==0 ) {
                      ((asp_stmt_scope)asp_stmt_stack.peek()).strings.add(((asp_stmt_scope)asp_stmt_stack.peek()).temp+".");
                    }


                    // AST REWRITE
                    // elements: PRQO
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (PythonTree)adaptor.nil();
                    // 1923:2: -> ^( PRQO[$asp_stmt.start,actions.castExprs($asp_stmt::exprs), $expr::ctype, $asp_stmt::strings, $asp_stmt::append, true, $asp_stmt::dir] )
                    {
                        // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1923:5: ^( PRQO[$asp_stmt.start,actions.castExprs($asp_stmt::exprs), $expr::ctype, $asp_stmt::strings, $asp_stmt::append, true, $asp_stmt::dir] )
                        {
                        PythonTree root_1 = (PythonTree)adaptor.nil();
                        root_1 = (PythonTree)adaptor.becomeRoot(new Tuple(PRQO, ((Token)retval.start), actions.castExprs(((asp_stmt_scope)asp_stmt_stack.peek()).exprs), ((expr_scope)expr_stack.peek()).ctype, ((asp_stmt_scope)asp_stmt_stack.peek()).strings, ((asp_stmt_scope)asp_stmt_stack.peek()).append, true, ((asp_stmt_scope)asp_stmt_stack.peek()).dir), root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }


                    }
                    break;
                case 5 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1924:2: ( ASP PRIO aspquery DOT -> ^( PRQO[$asp_stmt.start,actions.castExprs($asp_stmt::exprs), $expr::ctype, $asp_stmt::strings, $asp_stmt::append, true, $asp_stmt::dir] ) )
                    {
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1924:2: ( ASP PRIO aspquery DOT -> ^( PRQO[$asp_stmt.start,actions.castExprs($asp_stmt::exprs), $expr::ctype, $asp_stmt::strings, $asp_stmt::append, true, $asp_stmt::dir] ) )
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1924:3: ASP PRIO aspquery DOT
                    {
                    ASP292=(Token)match(input,ASP,FOLLOW_ASP_in_asp_stmt6922); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ASP.add(ASP292);

                    PRIO293=(Token)match(input,PRIO,FOLLOW_PRIO_in_asp_stmt6924); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_PRIO.add(PRIO293);

                    if ( state.backtracking==0 ) {
                      ((asp_stmt_scope)asp_stmt_stack.peek()).strings.add((PRIO293!=null?PRIO293.getText():null));
                    }
                    pushFollow(FOLLOW_aspquery_in_asp_stmt6927);
                    aspquery294=aspquery();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_aspquery.add(aspquery294.getTree());
                    DOT295=(Token)match(input,DOT,FOLLOW_DOT_in_asp_stmt6929); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOT.add(DOT295);

                    if ( state.backtracking==0 ) {
                      ((asp_stmt_scope)asp_stmt_stack.peek()).strings.add(((asp_stmt_scope)asp_stmt_stack.peek()).temp+".");
                    }


                    // AST REWRITE
                    // elements: PRQO
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (PythonTree)adaptor.nil();
                    // 1926:2: -> ^( PRQO[$asp_stmt.start,actions.castExprs($asp_stmt::exprs), $expr::ctype, $asp_stmt::strings, $asp_stmt::append, true, $asp_stmt::dir] )
                    {
                        // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1926:5: ^( PRQO[$asp_stmt.start,actions.castExprs($asp_stmt::exprs), $expr::ctype, $asp_stmt::strings, $asp_stmt::append, true, $asp_stmt::dir] )
                        {
                        PythonTree root_1 = (PythonTree)adaptor.nil();
                        root_1 = (PythonTree)adaptor.becomeRoot(new Tuple(PRQO, ((Token)retval.start), actions.castExprs(((asp_stmt_scope)asp_stmt_stack.peek()).exprs), ((expr_scope)expr_stack.peek()).ctype, ((asp_stmt_scope)asp_stmt_stack.peek()).strings, ((asp_stmt_scope)asp_stmt_stack.peek()).append, true, ((asp_stmt_scope)asp_stmt_stack.peek()).dir), root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }


                    }
                    break;
                case 6 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1927:2: ( ASP PRSO aspsave RBRACK ( PLUS )? DOT -> ^( PRSO[$asp_stmt.start, actions.castExprs($asp_stmt::exprs), $expr::ctype, $asp_stmt::strings, $asp_stmt::append, true, $asp_stmt::dir] ) )
                    {
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1927:2: ( ASP PRSO aspsave RBRACK ( PLUS )? DOT -> ^( PRSO[$asp_stmt.start, actions.castExprs($asp_stmt::exprs), $expr::ctype, $asp_stmt::strings, $asp_stmt::append, true, $asp_stmt::dir] ) )
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1927:3: ASP PRSO aspsave RBRACK ( PLUS )? DOT
                    {
                    ASP296=(Token)match(input,ASP,FOLLOW_ASP_in_asp_stmt6954); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ASP.add(ASP296);

                    PRSO297=(Token)match(input,PRSO,FOLLOW_PRSO_in_asp_stmt6956); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_PRSO.add(PRSO297);

                    if ( state.backtracking==0 ) {
                      ((asp_stmt_scope)asp_stmt_stack.peek()).strings.add((PRSO297!=null?PRSO297.getText():null));
                    }
                    pushFollow(FOLLOW_aspsave_in_asp_stmt6959);
                    aspsave298=aspsave();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_aspsave.add(aspsave298.getTree());
                    RBRACK299=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_asp_stmt6961); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RBRACK.add(RBRACK299);

                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1927:64: ( PLUS )?
                    int alt123=2;
                    int LA123_0 = input.LA(1);

                    if ( (LA123_0==PLUS) ) {
                        alt123=1;
                    }
                    switch (alt123) {
                        case 1 :
                            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1927:65: PLUS
                            {
                            PLUS300=(Token)match(input,PLUS,FOLLOW_PLUS_in_asp_stmt6964); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_PLUS.add(PLUS300);

                            if ( state.backtracking==0 ) {
                              ((asp_stmt_scope)asp_stmt_stack.peek()).append =true;
                            }

                            }
                            break;

                    }

                    DOT301=(Token)match(input,DOT,FOLLOW_DOT_in_asp_stmt6970); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOT.add(DOT301);

                    if ( state.backtracking==0 ) {
                      ((asp_stmt_scope)asp_stmt_stack.peek()).strings.add(((asp_stmt_scope)asp_stmt_stack.peek()).temp);
                    }


                    // AST REWRITE
                    // elements: PRSO
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (PythonTree)adaptor.nil();
                    // 1929:2: -> ^( PRSO[$asp_stmt.start, actions.castExprs($asp_stmt::exprs), $expr::ctype, $asp_stmt::strings, $asp_stmt::append, true, $asp_stmt::dir] )
                    {
                        // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1929:5: ^( PRSO[$asp_stmt.start, actions.castExprs($asp_stmt::exprs), $expr::ctype, $asp_stmt::strings, $asp_stmt::append, true, $asp_stmt::dir] )
                        {
                        PythonTree root_1 = (PythonTree)adaptor.nil();
                        root_1 = (PythonTree)adaptor.becomeRoot(new Tuple(PRSO, ((Token)retval.start), actions.castExprs(((asp_stmt_scope)asp_stmt_stack.peek()).exprs), ((expr_scope)expr_stack.peek()).ctype, ((asp_stmt_scope)asp_stmt_stack.peek()).strings, ((asp_stmt_scope)asp_stmt_stack.peek()).append, true, ((asp_stmt_scope)asp_stmt_stack.peek()).dir), root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }


                    }
                    break;
                case 7 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1930:2: ( ASP_SELECT ( REG_FACT | GROUP_FACT ) NAME -> ^( ASP_SELECT[$asp_stmt.start, actions.castExprs($asp_stmt::exprs), $expr::ctype, $asp_stmt::strings, $asp_stmt::append, true, $asp_stmt::dir] ) )
                    {
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1930:2: ( ASP_SELECT ( REG_FACT | GROUP_FACT ) NAME -> ^( ASP_SELECT[$asp_stmt.start, actions.castExprs($asp_stmt::exprs), $expr::ctype, $asp_stmt::strings, $asp_stmt::append, true, $asp_stmt::dir] ) )
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1930:3: ASP_SELECT ( REG_FACT | GROUP_FACT ) NAME
                    {
                    ASP_SELECT302=(Token)match(input,ASP_SELECT,FOLLOW_ASP_SELECT_in_asp_stmt6992); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ASP_SELECT.add(ASP_SELECT302);

                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1930:14: ( REG_FACT | GROUP_FACT )
                    int alt124=2;
                    int LA124_0 = input.LA(1);

                    if ( (LA124_0==REG_FACT) ) {
                        alt124=1;
                    }
                    else if ( (LA124_0==GROUP_FACT) ) {
                        alt124=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 124, 0, input);

                        throw nvae;
                    }
                    switch (alt124) {
                        case 1 :
                            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1930:15: REG_FACT
                            {
                            REG_FACT303=(Token)match(input,REG_FACT,FOLLOW_REG_FACT_in_asp_stmt6995); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_REG_FACT.add(REG_FACT303);

                            if ( state.backtracking==0 ) {
                              ((asp_stmt_scope)asp_stmt_stack.peek()).strings.add("reg_fact");
                            }

                            }
                            break;
                        case 2 :
                            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1930:63: GROUP_FACT
                            {
                            GROUP_FACT304=(Token)match(input,GROUP_FACT,FOLLOW_GROUP_FACT_in_asp_stmt7000); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_GROUP_FACT.add(GROUP_FACT304);

                            if ( state.backtracking==0 ) {
                              ((asp_stmt_scope)asp_stmt_stack.peek()).strings.add("group_fact");
                            }

                            }
                            break;

                    }

                    NAME305=(Token)match(input,NAME,FOLLOW_NAME_in_asp_stmt7004); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NAME.add(NAME305);

                    if ( state.backtracking==0 ) {
                      ((asp_stmt_scope)asp_stmt_stack.peek()).strings.add((NAME305!=null?NAME305.getText():null));
                    }


                    // AST REWRITE
                    // elements: ASP_SELECT
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (PythonTree)adaptor.nil();
                    // 1931:2: -> ^( ASP_SELECT[$asp_stmt.start, actions.castExprs($asp_stmt::exprs), $expr::ctype, $asp_stmt::strings, $asp_stmt::append, true, $asp_stmt::dir] )
                    {
                        // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1931:5: ^( ASP_SELECT[$asp_stmt.start, actions.castExprs($asp_stmt::exprs), $expr::ctype, $asp_stmt::strings, $asp_stmt::append, true, $asp_stmt::dir] )
                        {
                        PythonTree root_1 = (PythonTree)adaptor.nil();
                        root_1 = (PythonTree)adaptor.becomeRoot(new Tuple(ASP_SELECT, ((Token)retval.start), actions.castExprs(((asp_stmt_scope)asp_stmt_stack.peek()).exprs), ((expr_scope)expr_stack.peek()).ctype, ((asp_stmt_scope)asp_stmt_stack.peek()).strings, ((asp_stmt_scope)asp_stmt_stack.peek()).append, true, ((asp_stmt_scope)asp_stmt_stack.peek()).dir), root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }


                    }
                    break;
                case 8 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1932:2: ( ASP_PATH aspdir -> ^( ASP_PATH[$asp_stmt.start,actions.castExprs($asp_stmt::exprs), $expr::ctype, $asp_stmt::strings, $asp_stmt::append, true, $asp_stmt::dir] ) )
                    {
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1932:2: ( ASP_PATH aspdir -> ^( ASP_PATH[$asp_stmt.start,actions.castExprs($asp_stmt::exprs), $expr::ctype, $asp_stmt::strings, $asp_stmt::append, true, $asp_stmt::dir] ) )
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1932:3: ASP_PATH aspdir
                    {
                    ASP_PATH306=(Token)match(input,ASP_PATH,FOLLOW_ASP_PATH_in_asp_stmt7024); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ASP_PATH.add(ASP_PATH306);

                    if ( state.backtracking==0 ) {
                      ((asp_stmt_scope)asp_stmt_stack.peek()).strings.add((ASP_PATH306!=null?ASP_PATH306.getText():null));
                    }
                    pushFollow(FOLLOW_aspdir_in_asp_stmt7028);
                    aspdir307=aspdir();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_aspdir.add(aspdir307.getTree());


                    // AST REWRITE
                    // elements: ASP_PATH
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (PythonTree)adaptor.nil();
                    // 1933:2: -> ^( ASP_PATH[$asp_stmt.start,actions.castExprs($asp_stmt::exprs), $expr::ctype, $asp_stmt::strings, $asp_stmt::append, true, $asp_stmt::dir] )
                    {
                        // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1933:5: ^( ASP_PATH[$asp_stmt.start,actions.castExprs($asp_stmt::exprs), $expr::ctype, $asp_stmt::strings, $asp_stmt::append, true, $asp_stmt::dir] )
                        {
                        PythonTree root_1 = (PythonTree)adaptor.nil();
                        root_1 = (PythonTree)adaptor.becomeRoot(new Tuple(ASP_PATH, ((Token)retval.start), actions.castExprs(((asp_stmt_scope)asp_stmt_stack.peek()).exprs), ((expr_scope)expr_stack.peek()).ctype, ((asp_stmt_scope)asp_stmt_stack.peek()).strings, ((asp_stmt_scope)asp_stmt_stack.peek()).append, true, ((asp_stmt_scope)asp_stmt_stack.peek()).dir), root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (PythonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {

              	if (etype != null) {
              		retval.tree = etype;
              	}

            }
        }

        catch (RecognitionException re) {
            errorHandler.reportError(this, re);
            errorHandler.recover(this, input,re);
            retval.tree = (PythonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
        }
        finally {
            asp_stmt_stack.pop();
        }
        return retval;
    }
    // $ANTLR end "asp_stmt"

    public static class aspatom_return extends ParserRuleReturnScope {
        PythonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "aspatom"
    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1938:1: aspatom : e= atom ;
    public final PythonParser.aspatom_return aspatom() throws RecognitionException {
        PythonParser.aspatom_return retval = new PythonParser.aspatom_return();
        retval.start = input.LT(1);

        PythonTree root_0 = null;

        PythonParser.atom_return e = null;



        try {
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1939:2: (e= atom )
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1939:4: e= atom
            {
            root_0 = (PythonTree)adaptor.nil();

            pushFollow(FOLLOW_atom_in_aspatom7061);
            e=atom();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, e.getTree());
            if ( state.backtracking==0 ) {
              ((asp_stmt_scope)asp_stmt_stack.peek()).exprs.add(actions.castExpr((e!=null?((PythonTree)e.tree):null)));
              	((asp_stmt_scope)asp_stmt_stack.peek()).strings.add(((asp_stmt_scope)asp_stmt_stack.peek()).temp);
              	((asp_stmt_scope)asp_stmt_stack.peek()).strings.add("@ASPREPLACESTRINGHERE@");
              	((asp_stmt_scope)asp_stmt_stack.peek()).temp =""; 
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (PythonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException re) {
            errorHandler.reportError(this, re);
            errorHandler.recover(this, input,re);
            retval.tree = (PythonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "aspatom"

    public static class aspload_return extends ParserRuleReturnScope {
        PythonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "aspload"
    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1947:1: aspload : (s= asploadfragment | aspexpr );
    public final PythonParser.aspload_return aspload() throws RecognitionException {
        PythonParser.aspload_return retval = new PythonParser.aspload_return();
        retval.start = input.LT(1);

        PythonTree root_0 = null;

        PythonParser.asploadfragment_return s = null;

        PythonParser.aspexpr_return aspexpr308 = null;



        try {
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1948:2: (s= asploadfragment | aspexpr )
            int alt126=2;
            switch ( input.LA(1) ) {
            case DIGITS:
                {
                alt126=1;
                }
                break;
            case NAME:
                {
                int LA126_2 = input.LA(2);

                if ( (LA126_2==DOT) ) {
                    int LA126_4 = input.LA(3);

                    if ( (LA126_4==NAME) ) {
                        alt126=1;
                    }
                    else if ( ((LA126_4>=AND && LA126_4<=YIELD)) ) {
                        alt126=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 126, 4, input);

                        throw nvae;
                    }
                }
                else if ( (LA126_2==LPAREN||(LA126_2>=STAR && LA126_2<=DOUBLESTAR)||LA126_2==RIGHTSHIFT||(LA126_2>=VBAR && LA126_2<=DOUBLESLASH)||(LA126_2>=LBRACK && LA126_2<=RBRACK)) ) {
                    alt126=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 126, 2, input);

                    throw nvae;
                }
                }
                break;
            case LPAREN:
            case PLUS:
            case MINUS:
            case TILDE:
            case LBRACK:
            case LCURLY:
            case BACKQUOTE:
            case INT:
            case LONGINT:
            case FLOAT:
            case COMPLEX:
            case STRING:
            case PRO:
            case PRO_SELECT:
            case ASP:
            case ASP_SELECT:
            case ASP_PATH:
            case SELECT:
            case INSERT:
            case CREATE:
            case DROP:
            case UPDATE:
            case SQL_DELETE:
            case ALTER:
            case MAKECONNECT:
            case ASPSELECT:
            case RDFSELECT:
            case CAPSFROM:
            case MODIFY:
            case CAPSCLASS:
            case SUBCLASS:
                {
                alt126=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 126, 0, input);

                throw nvae;
            }

            switch (alt126) {
                case 1 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1948:5: s= asploadfragment
                    {
                    root_0 = (PythonTree)adaptor.nil();

                    pushFollow(FOLLOW_asploadfragment_in_aspload7082);
                    s=asploadfragment();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, s.getTree());
                    if ( state.backtracking==0 ) {
                      ((asp_stmt_scope)asp_stmt_stack.peek()).temp+=(s!=null?input.toString(s.start,s.stop):null);
                    }

                    }
                    break;
                case 2 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1949:4: aspexpr
                    {
                    root_0 = (PythonTree)adaptor.nil();

                    pushFollow(FOLLOW_aspexpr_in_aspload7089);
                    aspexpr308=aspexpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, aspexpr308.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (PythonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException re) {
            errorHandler.reportError(this, re);
            errorHandler.recover(this, input,re);
            retval.tree = (PythonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "aspload"

    public static class asploadfragment_return extends ParserRuleReturnScope {
        PythonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "asploadfragment"
    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1952:1: asploadfragment : ( DIGITS )* NAME DOT NAME ;
    public final PythonParser.asploadfragment_return asploadfragment() throws RecognitionException {
        PythonParser.asploadfragment_return retval = new PythonParser.asploadfragment_return();
        retval.start = input.LT(1);

        PythonTree root_0 = null;

        Token DIGITS309=null;
        Token NAME310=null;
        Token DOT311=null;
        Token NAME312=null;

        PythonTree DIGITS309_tree=null;
        PythonTree NAME310_tree=null;
        PythonTree DOT311_tree=null;
        PythonTree NAME312_tree=null;

        try {
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1953:2: ( ( DIGITS )* NAME DOT NAME )
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1953:4: ( DIGITS )* NAME DOT NAME
            {
            root_0 = (PythonTree)adaptor.nil();

            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1953:4: ( DIGITS )*
            loop127:
            do {
                int alt127=2;
                int LA127_0 = input.LA(1);

                if ( (LA127_0==DIGITS) ) {
                    alt127=1;
                }


                switch (alt127) {
            	case 1 :
            	    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1953:5: DIGITS
            	    {
            	    DIGITS309=(Token)match(input,DIGITS,FOLLOW_DIGITS_in_asploadfragment7102); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    DIGITS309_tree = (PythonTree)adaptor.create(DIGITS309);
            	    adaptor.addChild(root_0, DIGITS309_tree);
            	    }

            	    }
            	    break;

            	default :
            	    break loop127;
                }
            } while (true);

            NAME310=(Token)match(input,NAME,FOLLOW_NAME_in_asploadfragment7106); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            NAME310_tree = (PythonTree)adaptor.create(NAME310);
            adaptor.addChild(root_0, NAME310_tree);
            }
            DOT311=(Token)match(input,DOT,FOLLOW_DOT_in_asploadfragment7108); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            DOT311_tree = (PythonTree)adaptor.create(DOT311);
            adaptor.addChild(root_0, DOT311_tree);
            }
            NAME312=(Token)match(input,NAME,FOLLOW_NAME_in_asploadfragment7110); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            NAME312_tree = (PythonTree)adaptor.create(NAME312);
            adaptor.addChild(root_0, NAME312_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (PythonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException re) {
            errorHandler.reportError(this, re);
            errorHandler.recover(this, input,re);
            retval.tree = (PythonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "asploadfragment"

    public static class aspexpr_return extends ParserRuleReturnScope {
        PythonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "aspexpr"
    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1958:1: aspexpr : e= expr[expr_contextType.Load] ;
    public final PythonParser.aspexpr_return aspexpr() throws RecognitionException {
        PythonParser.aspexpr_return retval = new PythonParser.aspexpr_return();
        retval.start = input.LT(1);

        PythonTree root_0 = null;

        PythonParser.expr_return e = null;



        try {
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1959:2: (e= expr[expr_contextType.Load] )
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1959:4: e= expr[expr_contextType.Load]
            {
            root_0 = (PythonTree)adaptor.nil();

            pushFollow(FOLLOW_expr_in_aspexpr7129);
            e=expr(expr_contextType.Load);

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, e.getTree());
            if ( state.backtracking==0 ) {
              ((asp_stmt_scope)asp_stmt_stack.peek()).exprs.add(actions.castExpr((e!=null?((PythonTree)e.tree):null)));
              	((asp_stmt_scope)asp_stmt_stack.peek()).strings.add(((asp_stmt_scope)asp_stmt_stack.peek()).temp);
              	((asp_stmt_scope)asp_stmt_stack.peek()).strings.add("@ASPREPLACESTRINGHERE@");
              	((asp_stmt_scope)asp_stmt_stack.peek()).temp =""; 
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (PythonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException re) {
            errorHandler.reportError(this, re);
            errorHandler.recover(this, input,re);
            retval.tree = (PythonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "aspexpr"

    public static class aspquery_return extends ParserRuleReturnScope {
        PythonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "aspquery"
    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1970:1: aspquery : ( aspvarlist (s2= PRIMP aspvarlist )? | PRIMP aspvarlist );
    public final PythonParser.aspquery_return aspquery() throws RecognitionException {
        PythonParser.aspquery_return retval = new PythonParser.aspquery_return();
        retval.start = input.LT(1);

        PythonTree root_0 = null;

        Token s2=null;
        Token PRIMP315=null;
        PythonParser.aspvarlist_return aspvarlist313 = null;

        PythonParser.aspvarlist_return aspvarlist314 = null;

        PythonParser.aspvarlist_return aspvarlist316 = null;


        PythonTree s2_tree=null;
        PythonTree PRIMP315_tree=null;

        try {
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1970:9: ( aspvarlist (s2= PRIMP aspvarlist )? | PRIMP aspvarlist )
            int alt129=2;
            int LA129_0 = input.LA(1);

            if ( (LA129_0==NAME||LA129_0==NOT||LA129_0==LPAREN||LA129_0==LBRACK||LA129_0==LCURLY||(LA129_0>=BACKQUOTE && LA129_0<=PRO)||LA129_0==PRO_SELECT||LA129_0==ASP||LA129_0==ASP_SELECT||(LA129_0>=ASP_PATH && LA129_0<=ASPLC)||(LA129_0>=SELECT && LA129_0<=RDFSELECT)||LA129_0==CAPSFROM||(LA129_0>=MODIFY && LA129_0<=SUBCLASS)) ) {
                alt129=1;
            }
            else if ( (LA129_0==PRIMP) ) {
                alt129=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 129, 0, input);

                throw nvae;
            }
            switch (alt129) {
                case 1 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1971:2: aspvarlist (s2= PRIMP aspvarlist )?
                    {
                    root_0 = (PythonTree)adaptor.nil();

                    pushFollow(FOLLOW_aspvarlist_in_aspquery7151);
                    aspvarlist313=aspvarlist();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, aspvarlist313.getTree());
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1971:13: (s2= PRIMP aspvarlist )?
                    int alt128=2;
                    int LA128_0 = input.LA(1);

                    if ( (LA128_0==PRIMP) ) {
                        alt128=1;
                    }
                    switch (alt128) {
                        case 1 :
                            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1971:14: s2= PRIMP aspvarlist
                            {
                            s2=(Token)match(input,PRIMP,FOLLOW_PRIMP_in_aspquery7156); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            s2_tree = (PythonTree)adaptor.create(s2);
                            adaptor.addChild(root_0, s2_tree);
                            }
                            if ( state.backtracking==0 ) {
                              ((asp_stmt_scope)asp_stmt_stack.peek()).temp+=":-";
                            }
                            pushFollow(FOLLOW_aspvarlist_in_aspquery7160);
                            aspvarlist314=aspvarlist();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, aspvarlist314.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1972:4: PRIMP aspvarlist
                    {
                    root_0 = (PythonTree)adaptor.nil();

                    PRIMP315=(Token)match(input,PRIMP,FOLLOW_PRIMP_in_aspquery7167); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PRIMP315_tree = (PythonTree)adaptor.create(PRIMP315);
                    adaptor.addChild(root_0, PRIMP315_tree);
                    }
                    if ( state.backtracking==0 ) {
                      ((asp_stmt_scope)asp_stmt_stack.peek()).strings.add(":-");
                    }
                    pushFollow(FOLLOW_aspvarlist_in_aspquery7171);
                    aspvarlist316=aspvarlist();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, aspvarlist316.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (PythonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException re) {
            errorHandler.reportError(this, re);
            errorHandler.recover(this, input,re);
            retval.tree = (PythonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "aspquery"

    public static class aspvarlist_return extends ParserRuleReturnScope {
        PythonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "aspvarlist"
    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1976:1: aspvarlist : ( aspqueryvar ( (s2= COMMA aspqueryvar )* | ( ASPLC aspqueryvar ( (s2= COLON aspqueryvar ) | (s2= COMMA aspqueryvar ) )* RCURLY ( aspatom )? )? ) | ASPLC aspqueryvar ( (s2= COMMA aspqueryvar ) | (s2= COLON aspqueryvar ) )* RCURLY ( aspatom )? );
    public final PythonParser.aspvarlist_return aspvarlist() throws RecognitionException {
        PythonParser.aspvarlist_return retval = new PythonParser.aspvarlist_return();
        retval.start = input.LT(1);

        PythonTree root_0 = null;

        Token s2=null;
        Token ASPLC319=null;
        Token RCURLY323=null;
        Token ASPLC325=null;
        Token RCURLY329=null;
        PythonParser.aspqueryvar_return aspqueryvar317 = null;

        PythonParser.aspqueryvar_return aspqueryvar318 = null;

        PythonParser.aspqueryvar_return aspqueryvar320 = null;

        PythonParser.aspqueryvar_return aspqueryvar321 = null;

        PythonParser.aspqueryvar_return aspqueryvar322 = null;

        PythonParser.aspatom_return aspatom324 = null;

        PythonParser.aspqueryvar_return aspqueryvar326 = null;

        PythonParser.aspqueryvar_return aspqueryvar327 = null;

        PythonParser.aspqueryvar_return aspqueryvar328 = null;

        PythonParser.aspatom_return aspatom330 = null;


        PythonTree s2_tree=null;
        PythonTree ASPLC319_tree=null;
        PythonTree RCURLY323_tree=null;
        PythonTree ASPLC325_tree=null;
        PythonTree RCURLY329_tree=null;

        try {
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1976:11: ( aspqueryvar ( (s2= COMMA aspqueryvar )* | ( ASPLC aspqueryvar ( (s2= COLON aspqueryvar ) | (s2= COMMA aspqueryvar ) )* RCURLY ( aspatom )? )? ) | ASPLC aspqueryvar ( (s2= COMMA aspqueryvar ) | (s2= COLON aspqueryvar ) )* RCURLY ( aspatom )? )
            int alt137=2;
            int LA137_0 = input.LA(1);

            if ( (LA137_0==NAME||LA137_0==NOT||LA137_0==LPAREN||LA137_0==LBRACK||LA137_0==LCURLY||(LA137_0>=BACKQUOTE && LA137_0<=PRO)||LA137_0==PRO_SELECT||LA137_0==ASP||LA137_0==ASP_SELECT||LA137_0==ASP_PATH||(LA137_0>=SELECT && LA137_0<=RDFSELECT)||LA137_0==CAPSFROM||(LA137_0>=MODIFY && LA137_0<=SUBCLASS)) ) {
                alt137=1;
            }
            else if ( (LA137_0==ASPLC) ) {
                alt137=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 137, 0, input);

                throw nvae;
            }
            switch (alt137) {
                case 1 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1977:2: aspqueryvar ( (s2= COMMA aspqueryvar )* | ( ASPLC aspqueryvar ( (s2= COLON aspqueryvar ) | (s2= COMMA aspqueryvar ) )* RCURLY ( aspatom )? )? )
                    {
                    root_0 = (PythonTree)adaptor.nil();

                    pushFollow(FOLLOW_aspqueryvar_in_aspvarlist7182);
                    aspqueryvar317=aspqueryvar();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, aspqueryvar317.getTree());
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1977:14: ( (s2= COMMA aspqueryvar )* | ( ASPLC aspqueryvar ( (s2= COLON aspqueryvar ) | (s2= COMMA aspqueryvar ) )* RCURLY ( aspatom )? )? )
                    int alt134=2;
                    switch ( input.LA(1) ) {
                    case COMMA:
                        {
                        alt134=1;
                        }
                        break;
                    case PRIMP:
                        {
                        alt134=1;
                        }
                        break;
                    case DOT:
                        {
                        alt134=1;
                        }
                        break;
                    case ASPLC:
                        {
                        alt134=2;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 134, 0, input);

                        throw nvae;
                    }

                    switch (alt134) {
                        case 1 :
                            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1977:15: (s2= COMMA aspqueryvar )*
                            {
                            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1977:15: (s2= COMMA aspqueryvar )*
                            loop130:
                            do {
                                int alt130=2;
                                int LA130_0 = input.LA(1);

                                if ( (LA130_0==COMMA) ) {
                                    alt130=1;
                                }


                                switch (alt130) {
                            	case 1 :
                            	    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1977:16: s2= COMMA aspqueryvar
                            	    {
                            	    s2=(Token)match(input,COMMA,FOLLOW_COMMA_in_aspvarlist7188); if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {
                            	    s2_tree = (PythonTree)adaptor.create(s2);
                            	    adaptor.addChild(root_0, s2_tree);
                            	    }
                            	    if ( state.backtracking==0 ) {
                            	      ((asp_stmt_scope)asp_stmt_stack.peek()).temp+=(s2!=null?s2.getText():null);
                            	    }
                            	    pushFollow(FOLLOW_aspqueryvar_in_aspvarlist7192);
                            	    aspqueryvar318=aspqueryvar();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, aspqueryvar318.getTree());

                            	    }
                            	    break;

                            	default :
                            	    break loop130;
                                }
                            } while (true);


                            }
                            break;
                        case 2 :
                            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1977:68: ( ASPLC aspqueryvar ( (s2= COLON aspqueryvar ) | (s2= COMMA aspqueryvar ) )* RCURLY ( aspatom )? )?
                            {
                            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1977:68: ( ASPLC aspqueryvar ( (s2= COLON aspqueryvar ) | (s2= COMMA aspqueryvar ) )* RCURLY ( aspatom )? )?
                            int alt133=2;
                            int LA133_0 = input.LA(1);

                            if ( (LA133_0==ASPLC) ) {
                                alt133=1;
                            }
                            switch (alt133) {
                                case 1 :
                                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1977:69: ASPLC aspqueryvar ( (s2= COLON aspqueryvar ) | (s2= COMMA aspqueryvar ) )* RCURLY ( aspatom )?
                                    {
                                    ASPLC319=(Token)match(input,ASPLC,FOLLOW_ASPLC_in_aspvarlist7197); if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                    ASPLC319_tree = (PythonTree)adaptor.create(ASPLC319);
                                    adaptor.addChild(root_0, ASPLC319_tree);
                                    }
                                    if ( state.backtracking==0 ) {
                                      ((asp_stmt_scope)asp_stmt_stack.peek()).temp+="{";
                                    }
                                    pushFollow(FOLLOW_aspqueryvar_in_aspvarlist7201);
                                    aspqueryvar320=aspqueryvar();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) adaptor.addChild(root_0, aspqueryvar320.getTree());
                                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1977:111: ( (s2= COLON aspqueryvar ) | (s2= COMMA aspqueryvar ) )*
                                    loop131:
                                    do {
                                        int alt131=3;
                                        int LA131_0 = input.LA(1);

                                        if ( (LA131_0==COLON) ) {
                                            alt131=1;
                                        }
                                        else if ( (LA131_0==COMMA) ) {
                                            alt131=2;
                                        }


                                        switch (alt131) {
                                    	case 1 :
                                    	    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1977:112: (s2= COLON aspqueryvar )
                                    	    {
                                    	    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1977:112: (s2= COLON aspqueryvar )
                                    	    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1977:113: s2= COLON aspqueryvar
                                    	    {
                                    	    s2=(Token)match(input,COLON,FOLLOW_COLON_in_aspvarlist7207); if (state.failed) return retval;
                                    	    if ( state.backtracking==0 ) {
                                    	    s2_tree = (PythonTree)adaptor.create(s2);
                                    	    adaptor.addChild(root_0, s2_tree);
                                    	    }
                                    	    if ( state.backtracking==0 ) {
                                    	      ((asp_stmt_scope)asp_stmt_stack.peek()).temp+=(s2!=null?s2.getText():null);
                                    	    }
                                    	    pushFollow(FOLLOW_aspqueryvar_in_aspvarlist7211);
                                    	    aspqueryvar321=aspqueryvar();

                                    	    state._fsp--;
                                    	    if (state.failed) return retval;
                                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, aspqueryvar321.getTree());

                                    	    }


                                    	    }
                                    	    break;
                                    	case 2 :
                                    	    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1977:164: (s2= COMMA aspqueryvar )
                                    	    {
                                    	    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1977:164: (s2= COMMA aspqueryvar )
                                    	    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1977:165: s2= COMMA aspqueryvar
                                    	    {
                                    	    s2=(Token)match(input,COMMA,FOLLOW_COMMA_in_aspvarlist7217); if (state.failed) return retval;
                                    	    if ( state.backtracking==0 ) {
                                    	    s2_tree = (PythonTree)adaptor.create(s2);
                                    	    adaptor.addChild(root_0, s2_tree);
                                    	    }
                                    	    if ( state.backtracking==0 ) {
                                    	      ((asp_stmt_scope)asp_stmt_stack.peek()).temp+=(s2!=null?s2.getText():null);
                                    	    }
                                    	    pushFollow(FOLLOW_aspqueryvar_in_aspvarlist7221);
                                    	    aspqueryvar322=aspqueryvar();

                                    	    state._fsp--;
                                    	    if (state.failed) return retval;
                                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, aspqueryvar322.getTree());

                                    	    }


                                    	    }
                                    	    break;

                                    	default :
                                    	    break loop131;
                                        }
                                    } while (true);

                                    RCURLY323=(Token)match(input,RCURLY,FOLLOW_RCURLY_in_aspvarlist7226); if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                    RCURLY323_tree = (PythonTree)adaptor.create(RCURLY323);
                                    adaptor.addChild(root_0, RCURLY323_tree);
                                    }
                                    if ( state.backtracking==0 ) {
                                      ((asp_stmt_scope)asp_stmt_stack.peek()).temp+="}";
                                    }
                                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1977:249: ( aspatom )?
                                    int alt132=2;
                                    int LA132_0 = input.LA(1);

                                    if ( (LA132_0==NAME||LA132_0==LPAREN||LA132_0==LBRACK||LA132_0==LCURLY||(LA132_0>=BACKQUOTE && LA132_0<=PRO)||LA132_0==PRO_SELECT||LA132_0==ASP||LA132_0==ASP_SELECT||LA132_0==ASP_PATH||(LA132_0>=SELECT && LA132_0<=RDFSELECT)||LA132_0==CAPSFROM||(LA132_0>=MODIFY && LA132_0<=SUBCLASS)) ) {
                                        alt132=1;
                                    }
                                    switch (alt132) {
                                        case 1 :
                                            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1977:250: aspatom
                                            {
                                            pushFollow(FOLLOW_aspatom_in_aspvarlist7231);
                                            aspatom324=aspatom();

                                            state._fsp--;
                                            if (state.failed) return retval;
                                            if ( state.backtracking==0 ) adaptor.addChild(root_0, aspatom324.getTree());

                                            }
                                            break;

                                    }


                                    }
                                    break;

                            }


                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1979:2: ASPLC aspqueryvar ( (s2= COMMA aspqueryvar ) | (s2= COLON aspqueryvar ) )* RCURLY ( aspatom )?
                    {
                    root_0 = (PythonTree)adaptor.nil();

                    ASPLC325=(Token)match(input,ASPLC,FOLLOW_ASPLC_in_aspvarlist7242); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ASPLC325_tree = (PythonTree)adaptor.create(ASPLC325);
                    adaptor.addChild(root_0, ASPLC325_tree);
                    }
                    if ( state.backtracking==0 ) {
                      ((asp_stmt_scope)asp_stmt_stack.peek()).temp+="{";
                    }
                    pushFollow(FOLLOW_aspqueryvar_in_aspvarlist7246);
                    aspqueryvar326=aspqueryvar();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, aspqueryvar326.getTree());
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1979:44: ( (s2= COMMA aspqueryvar ) | (s2= COLON aspqueryvar ) )*
                    loop135:
                    do {
                        int alt135=3;
                        int LA135_0 = input.LA(1);

                        if ( (LA135_0==COMMA) ) {
                            alt135=1;
                        }
                        else if ( (LA135_0==COLON) ) {
                            alt135=2;
                        }


                        switch (alt135) {
                    	case 1 :
                    	    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1979:45: (s2= COMMA aspqueryvar )
                    	    {
                    	    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1979:45: (s2= COMMA aspqueryvar )
                    	    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1979:46: s2= COMMA aspqueryvar
                    	    {
                    	    s2=(Token)match(input,COMMA,FOLLOW_COMMA_in_aspvarlist7252); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    s2_tree = (PythonTree)adaptor.create(s2);
                    	    adaptor.addChild(root_0, s2_tree);
                    	    }
                    	    if ( state.backtracking==0 ) {
                    	      ((asp_stmt_scope)asp_stmt_stack.peek()).temp+=(s2!=null?s2.getText():null);
                    	    }
                    	    pushFollow(FOLLOW_aspqueryvar_in_aspvarlist7256);
                    	    aspqueryvar327=aspqueryvar();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, aspqueryvar327.getTree());

                    	    }


                    	    }
                    	    break;
                    	case 2 :
                    	    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1979:97: (s2= COLON aspqueryvar )
                    	    {
                    	    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1979:97: (s2= COLON aspqueryvar )
                    	    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1979:98: s2= COLON aspqueryvar
                    	    {
                    	    s2=(Token)match(input,COLON,FOLLOW_COLON_in_aspvarlist7262); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    s2_tree = (PythonTree)adaptor.create(s2);
                    	    adaptor.addChild(root_0, s2_tree);
                    	    }
                    	    if ( state.backtracking==0 ) {
                    	      ((asp_stmt_scope)asp_stmt_stack.peek()).temp+=(s2!=null?s2.getText():null);
                    	    }
                    	    pushFollow(FOLLOW_aspqueryvar_in_aspvarlist7266);
                    	    aspqueryvar328=aspqueryvar();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, aspqueryvar328.getTree());

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop135;
                        }
                    } while (true);

                    RCURLY329=(Token)match(input,RCURLY,FOLLOW_RCURLY_in_aspvarlist7271); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RCURLY329_tree = (PythonTree)adaptor.create(RCURLY329);
                    adaptor.addChild(root_0, RCURLY329_tree);
                    }
                    if ( state.backtracking==0 ) {
                      ((asp_stmt_scope)asp_stmt_stack.peek()).temp+="}";
                    }
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1979:182: ( aspatom )?
                    int alt136=2;
                    int LA136_0 = input.LA(1);

                    if ( (LA136_0==NAME||LA136_0==LPAREN||LA136_0==LBRACK||LA136_0==LCURLY||(LA136_0>=BACKQUOTE && LA136_0<=PRO)||LA136_0==PRO_SELECT||LA136_0==ASP||LA136_0==ASP_SELECT||LA136_0==ASP_PATH||(LA136_0>=SELECT && LA136_0<=RDFSELECT)||LA136_0==CAPSFROM||(LA136_0>=MODIFY && LA136_0<=SUBCLASS)) ) {
                        alt136=1;
                    }
                    switch (alt136) {
                        case 1 :
                            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1979:183: aspatom
                            {
                            pushFollow(FOLLOW_aspatom_in_aspvarlist7276);
                            aspatom330=aspatom();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, aspatom330.getTree());

                            }
                            break;

                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (PythonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException re) {
            errorHandler.reportError(this, re);
            errorHandler.recover(this, input,re);
            retval.tree = (PythonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "aspvarlist"

    public static class aspqueryvar_return extends ParserRuleReturnScope {
        PythonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "aspqueryvar"
    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1982:1: aspqueryvar : aspnot ( ( LPAREN aspquerynotinterior ( (s2= COMMA aspquerynotinterior ) | ( SEMI aspquerynotinterior ) )* RPAREN ) | ( LESS aspatom ASPDOTDOT aspatom GREATER ) | ( LPAREN ( EQUAL | NOTEQUAL | ALT_NOTEQUAL | LESS | GREATER | LESSEQUAL | GREATEREQUAL ) RPAREN aspnot ) )? ;
    public final PythonParser.aspqueryvar_return aspqueryvar() throws RecognitionException {
        PythonParser.aspqueryvar_return retval = new PythonParser.aspqueryvar_return();
        retval.start = input.LT(1);

        PythonTree root_0 = null;

        Token s2=null;
        Token LPAREN332=null;
        Token SEMI335=null;
        Token RPAREN337=null;
        Token LESS338=null;
        Token ASPDOTDOT340=null;
        Token GREATER342=null;
        Token LPAREN343=null;
        Token EQUAL344=null;
        Token NOTEQUAL345=null;
        Token ALT_NOTEQUAL346=null;
        Token LESS347=null;
        Token GREATER348=null;
        Token LESSEQUAL349=null;
        Token GREATEREQUAL350=null;
        Token RPAREN351=null;
        PythonParser.aspnot_return aspnot331 = null;

        PythonParser.aspquerynotinterior_return aspquerynotinterior333 = null;

        PythonParser.aspquerynotinterior_return aspquerynotinterior334 = null;

        PythonParser.aspquerynotinterior_return aspquerynotinterior336 = null;

        PythonParser.aspatom_return aspatom339 = null;

        PythonParser.aspatom_return aspatom341 = null;

        PythonParser.aspnot_return aspnot352 = null;


        PythonTree s2_tree=null;
        PythonTree LPAREN332_tree=null;
        PythonTree SEMI335_tree=null;
        PythonTree RPAREN337_tree=null;
        PythonTree LESS338_tree=null;
        PythonTree ASPDOTDOT340_tree=null;
        PythonTree GREATER342_tree=null;
        PythonTree LPAREN343_tree=null;
        PythonTree EQUAL344_tree=null;
        PythonTree NOTEQUAL345_tree=null;
        PythonTree ALT_NOTEQUAL346_tree=null;
        PythonTree LESS347_tree=null;
        PythonTree GREATER348_tree=null;
        PythonTree LESSEQUAL349_tree=null;
        PythonTree GREATEREQUAL350_tree=null;
        PythonTree RPAREN351_tree=null;

        try {
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1982:12: ( aspnot ( ( LPAREN aspquerynotinterior ( (s2= COMMA aspquerynotinterior ) | ( SEMI aspquerynotinterior ) )* RPAREN ) | ( LESS aspatom ASPDOTDOT aspatom GREATER ) | ( LPAREN ( EQUAL | NOTEQUAL | ALT_NOTEQUAL | LESS | GREATER | LESSEQUAL | GREATEREQUAL ) RPAREN aspnot ) )? )
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1983:2: aspnot ( ( LPAREN aspquerynotinterior ( (s2= COMMA aspquerynotinterior ) | ( SEMI aspquerynotinterior ) )* RPAREN ) | ( LESS aspatom ASPDOTDOT aspatom GREATER ) | ( LPAREN ( EQUAL | NOTEQUAL | ALT_NOTEQUAL | LESS | GREATER | LESSEQUAL | GREATEREQUAL ) RPAREN aspnot ) )?
            {
            root_0 = (PythonTree)adaptor.nil();

            pushFollow(FOLLOW_aspnot_in_aspqueryvar7288);
            aspnot331=aspnot();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, aspnot331.getTree());
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1984:2: ( ( LPAREN aspquerynotinterior ( (s2= COMMA aspquerynotinterior ) | ( SEMI aspquerynotinterior ) )* RPAREN ) | ( LESS aspatom ASPDOTDOT aspatom GREATER ) | ( LPAREN ( EQUAL | NOTEQUAL | ALT_NOTEQUAL | LESS | GREATER | LESSEQUAL | GREATEREQUAL ) RPAREN aspnot ) )?
            int alt140=4;
            int LA140_0 = input.LA(1);

            if ( (LA140_0==LPAREN) ) {
                int LA140_1 = input.LA(2);

                if ( (LA140_1==NAME||LA140_1==NOT||LA140_1==LPAREN||(LA140_1>=PLUS && LA140_1<=MINUS)||(LA140_1>=TILDE && LA140_1<=LBRACK)||LA140_1==LCURLY||(LA140_1>=BACKQUOTE && LA140_1<=PRO)||LA140_1==PRO_SELECT||LA140_1==ASP||LA140_1==ASP_SELECT||LA140_1==ASP_PATH||(LA140_1>=SELECT && LA140_1<=RDFSELECT)||LA140_1==CAPSFROM||(LA140_1>=MODIFY && LA140_1<=SUBCLASS)) ) {
                    alt140=1;
                }
                else if ( ((LA140_1>=LESS && LA140_1<=NOTEQUAL)) ) {
                    alt140=3;
                }
            }
            else if ( (LA140_0==LESS) ) {
                alt140=2;
            }
            switch (alt140) {
                case 1 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1985:2: ( LPAREN aspquerynotinterior ( (s2= COMMA aspquerynotinterior ) | ( SEMI aspquerynotinterior ) )* RPAREN )
                    {
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1985:2: ( LPAREN aspquerynotinterior ( (s2= COMMA aspquerynotinterior ) | ( SEMI aspquerynotinterior ) )* RPAREN )
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1985:3: LPAREN aspquerynotinterior ( (s2= COMMA aspquerynotinterior ) | ( SEMI aspquerynotinterior ) )* RPAREN
                    {
                    LPAREN332=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_aspqueryvar7295); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LPAREN332_tree = (PythonTree)adaptor.create(LPAREN332);
                    adaptor.addChild(root_0, LPAREN332_tree);
                    }
                    if ( state.backtracking==0 ) {
                      ((asp_stmt_scope)asp_stmt_stack.peek()).temp+="(";
                    }
                    pushFollow(FOLLOW_aspquerynotinterior_in_aspqueryvar7300);
                    aspquerynotinterior333=aspquerynotinterior();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, aspquerynotinterior333.getTree());
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1986:22: ( (s2= COMMA aspquerynotinterior ) | ( SEMI aspquerynotinterior ) )*
                    loop138:
                    do {
                        int alt138=3;
                        int LA138_0 = input.LA(1);

                        if ( (LA138_0==COMMA) ) {
                            alt138=1;
                        }
                        else if ( (LA138_0==SEMI) ) {
                            alt138=2;
                        }


                        switch (alt138) {
                    	case 1 :
                    	    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1986:24: (s2= COMMA aspquerynotinterior )
                    	    {
                    	    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1986:24: (s2= COMMA aspquerynotinterior )
                    	    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1986:25: s2= COMMA aspquerynotinterior
                    	    {
                    	    s2=(Token)match(input,COMMA,FOLLOW_COMMA_in_aspqueryvar7307); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    s2_tree = (PythonTree)adaptor.create(s2);
                    	    adaptor.addChild(root_0, s2_tree);
                    	    }
                    	    if ( state.backtracking==0 ) {
                    	      ((asp_stmt_scope)asp_stmt_stack.peek()).temp+=(s2!=null?s2.getText():null);
                    	    }
                    	    pushFollow(FOLLOW_aspquerynotinterior_in_aspqueryvar7311);
                    	    aspquerynotinterior334=aspquerynotinterior();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, aspquerynotinterior334.getTree());

                    	    }


                    	    }
                    	    break;
                    	case 2 :
                    	    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1986:86: ( SEMI aspquerynotinterior )
                    	    {
                    	    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1986:86: ( SEMI aspquerynotinterior )
                    	    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1986:87: SEMI aspquerynotinterior
                    	    {
                    	    SEMI335=(Token)match(input,SEMI,FOLLOW_SEMI_in_aspqueryvar7317); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    SEMI335_tree = (PythonTree)adaptor.create(SEMI335);
                    	    adaptor.addChild(root_0, SEMI335_tree);
                    	    }
                    	    if ( state.backtracking==0 ) {
                    	      ((asp_stmt_scope)asp_stmt_stack.peek()).temp+="!@&@!";
                    	    }
                    	    pushFollow(FOLLOW_aspquerynotinterior_in_aspqueryvar7321);
                    	    aspquerynotinterior336=aspquerynotinterior();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, aspquerynotinterior336.getTree());

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop138;
                        }
                    } while (true);

                    RPAREN337=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_aspqueryvar7327); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RPAREN337_tree = (PythonTree)adaptor.create(RPAREN337);
                    adaptor.addChild(root_0, RPAREN337_tree);
                    }
                    if ( state.backtracking==0 ) {
                      ((asp_stmt_scope)asp_stmt_stack.peek()).temp+=")";
                    }

                    }


                    }
                    break;
                case 2 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1989:2: ( LESS aspatom ASPDOTDOT aspatom GREATER )
                    {
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1989:2: ( LESS aspatom ASPDOTDOT aspatom GREATER )
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1989:3: LESS aspatom ASPDOTDOT aspatom GREATER
                    {
                    LESS338=(Token)match(input,LESS,FOLLOW_LESS_in_aspqueryvar7337); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LESS338_tree = (PythonTree)adaptor.create(LESS338);
                    adaptor.addChild(root_0, LESS338_tree);
                    }
                    if ( state.backtracking==0 ) {
                      ((asp_stmt_scope)asp_stmt_stack.peek()).temp+="(";
                    }
                    pushFollow(FOLLOW_aspatom_in_aspqueryvar7341);
                    aspatom339=aspatom();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, aspatom339.getTree());
                    ASPDOTDOT340=(Token)match(input,ASPDOTDOT,FOLLOW_ASPDOTDOT_in_aspqueryvar7343); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ASPDOTDOT340_tree = (PythonTree)adaptor.create(ASPDOTDOT340);
                    adaptor.addChild(root_0, ASPDOTDOT340_tree);
                    }
                    if ( state.backtracking==0 ) {
                      ((asp_stmt_scope)asp_stmt_stack.peek()).temp+="..";
                    }
                    pushFollow(FOLLOW_aspatom_in_aspqueryvar7347);
                    aspatom341=aspatom();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, aspatom341.getTree());
                    GREATER342=(Token)match(input,GREATER,FOLLOW_GREATER_in_aspqueryvar7349); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    GREATER342_tree = (PythonTree)adaptor.create(GREATER342);
                    adaptor.addChild(root_0, GREATER342_tree);
                    }
                    if ( state.backtracking==0 ) {
                      ((asp_stmt_scope)asp_stmt_stack.peek()).temp+=")";
                    }

                    }


                    }
                    break;
                case 3 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1991:2: ( LPAREN ( EQUAL | NOTEQUAL | ALT_NOTEQUAL | LESS | GREATER | LESSEQUAL | GREATEREQUAL ) RPAREN aspnot )
                    {
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1991:2: ( LPAREN ( EQUAL | NOTEQUAL | ALT_NOTEQUAL | LESS | GREATER | LESSEQUAL | GREATEREQUAL ) RPAREN aspnot )
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1991:3: LPAREN ( EQUAL | NOTEQUAL | ALT_NOTEQUAL | LESS | GREATER | LESSEQUAL | GREATEREQUAL ) RPAREN aspnot
                    {
                    LPAREN343=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_aspqueryvar7359); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LPAREN343_tree = (PythonTree)adaptor.create(LPAREN343);
                    adaptor.addChild(root_0, LPAREN343_tree);
                    }
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1991:10: ( EQUAL | NOTEQUAL | ALT_NOTEQUAL | LESS | GREATER | LESSEQUAL | GREATEREQUAL )
                    int alt139=7;
                    switch ( input.LA(1) ) {
                    case EQUAL:
                        {
                        alt139=1;
                        }
                        break;
                    case NOTEQUAL:
                        {
                        alt139=2;
                        }
                        break;
                    case ALT_NOTEQUAL:
                        {
                        alt139=3;
                        }
                        break;
                    case LESS:
                        {
                        alt139=4;
                        }
                        break;
                    case GREATER:
                        {
                        alt139=5;
                        }
                        break;
                    case LESSEQUAL:
                        {
                        alt139=6;
                        }
                        break;
                    case GREATEREQUAL:
                        {
                        alt139=7;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 139, 0, input);

                        throw nvae;
                    }

                    switch (alt139) {
                        case 1 :
                            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1991:11: EQUAL
                            {
                            EQUAL344=(Token)match(input,EQUAL,FOLLOW_EQUAL_in_aspqueryvar7362); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            EQUAL344_tree = (PythonTree)adaptor.create(EQUAL344);
                            adaptor.addChild(root_0, EQUAL344_tree);
                            }
                            if ( state.backtracking==0 ) {
                              ((asp_stmt_scope)asp_stmt_stack.peek()).temp+="==";
                            }

                            }
                            break;
                        case 2 :
                            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1991:43: NOTEQUAL
                            {
                            NOTEQUAL345=(Token)match(input,NOTEQUAL,FOLLOW_NOTEQUAL_in_aspqueryvar7367); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            NOTEQUAL345_tree = (PythonTree)adaptor.create(NOTEQUAL345);
                            adaptor.addChild(root_0, NOTEQUAL345_tree);
                            }
                            if ( state.backtracking==0 ) {
                              ((asp_stmt_scope)asp_stmt_stack.peek()).temp+="!=";
                            }

                            }
                            break;
                        case 3 :
                            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1991:78: ALT_NOTEQUAL
                            {
                            ALT_NOTEQUAL346=(Token)match(input,ALT_NOTEQUAL,FOLLOW_ALT_NOTEQUAL_in_aspqueryvar7372); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            ALT_NOTEQUAL346_tree = (PythonTree)adaptor.create(ALT_NOTEQUAL346);
                            adaptor.addChild(root_0, ALT_NOTEQUAL346_tree);
                            }
                            if ( state.backtracking==0 ) {
                              ((asp_stmt_scope)asp_stmt_stack.peek()).temp+="!=";
                            }

                            }
                            break;
                        case 4 :
                            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1991:117: LESS
                            {
                            LESS347=(Token)match(input,LESS,FOLLOW_LESS_in_aspqueryvar7377); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            LESS347_tree = (PythonTree)adaptor.create(LESS347);
                            adaptor.addChild(root_0, LESS347_tree);
                            }
                            if ( state.backtracking==0 ) {
                              ((asp_stmt_scope)asp_stmt_stack.peek()).temp+="<";
                            }

                            }
                            break;
                        case 5 :
                            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1991:147: GREATER
                            {
                            GREATER348=(Token)match(input,GREATER,FOLLOW_GREATER_in_aspqueryvar7382); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            GREATER348_tree = (PythonTree)adaptor.create(GREATER348);
                            adaptor.addChild(root_0, GREATER348_tree);
                            }
                            if ( state.backtracking==0 ) {
                              ((asp_stmt_scope)asp_stmt_stack.peek()).temp+=">";
                            }

                            }
                            break;
                        case 6 :
                            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1991:180: LESSEQUAL
                            {
                            LESSEQUAL349=(Token)match(input,LESSEQUAL,FOLLOW_LESSEQUAL_in_aspqueryvar7387); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            LESSEQUAL349_tree = (PythonTree)adaptor.create(LESSEQUAL349);
                            adaptor.addChild(root_0, LESSEQUAL349_tree);
                            }
                            if ( state.backtracking==0 ) {
                              ((asp_stmt_scope)asp_stmt_stack.peek()).temp+="<=";
                            }

                            }
                            break;
                        case 7 :
                            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1991:216: GREATEREQUAL
                            {
                            GREATEREQUAL350=(Token)match(input,GREATEREQUAL,FOLLOW_GREATEREQUAL_in_aspqueryvar7392); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            GREATEREQUAL350_tree = (PythonTree)adaptor.create(GREATEREQUAL350);
                            adaptor.addChild(root_0, GREATEREQUAL350_tree);
                            }
                            if ( state.backtracking==0 ) {
                              ((asp_stmt_scope)asp_stmt_stack.peek()).temp+=">=";
                            }

                            }
                            break;

                    }

                    RPAREN351=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_aspqueryvar7396); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RPAREN351_tree = (PythonTree)adaptor.create(RPAREN351);
                    adaptor.addChild(root_0, RPAREN351_tree);
                    }
                    pushFollow(FOLLOW_aspnot_in_aspqueryvar7399);
                    aspnot352=aspnot();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, aspnot352.getTree());

                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (PythonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException re) {
            errorHandler.reportError(this, re);
            errorHandler.recover(this, input,re);
            retval.tree = (PythonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "aspqueryvar"

    public static class aspquerynotinterior_return extends ParserRuleReturnScope {
        PythonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "aspquerynotinterior"
    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1998:1: aspquerynotinterior : ( NOT )* aspqueryinterior ;
    public final PythonParser.aspquerynotinterior_return aspquerynotinterior() throws RecognitionException {
        PythonParser.aspquerynotinterior_return retval = new PythonParser.aspquerynotinterior_return();
        retval.start = input.LT(1);

        PythonTree root_0 = null;

        Token NOT353=null;
        PythonParser.aspqueryinterior_return aspqueryinterior354 = null;


        PythonTree NOT353_tree=null;

        try {
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1999:2: ( ( NOT )* aspqueryinterior )
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1999:4: ( NOT )* aspqueryinterior
            {
            root_0 = (PythonTree)adaptor.nil();

            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1999:4: ( NOT )*
            loop141:
            do {
                int alt141=2;
                int LA141_0 = input.LA(1);

                if ( (LA141_0==NOT) ) {
                    alt141=1;
                }


                switch (alt141) {
            	case 1 :
            	    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1999:5: NOT
            	    {
            	    NOT353=(Token)match(input,NOT,FOLLOW_NOT_in_aspquerynotinterior7419); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    NOT353_tree = (PythonTree)adaptor.create(NOT353);
            	    adaptor.addChild(root_0, NOT353_tree);
            	    }
            	    if ( state.backtracking==0 ) {
            	      ((asp_stmt_scope)asp_stmt_stack.peek()).temp+="not ";
            	    }

            	    }
            	    break;

            	default :
            	    break loop141;
                }
            } while (true);

            pushFollow(FOLLOW_aspqueryinterior_in_aspquerynotinterior7425);
            aspqueryinterior354=aspqueryinterior();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, aspqueryinterior354.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (PythonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException re) {
            errorHandler.reportError(this, re);
            errorHandler.recover(this, input,re);
            retval.tree = (PythonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "aspquerynotinterior"

    public static class aspqueryinterior_return extends ParserRuleReturnScope {
        PythonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "aspqueryinterior"
    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2003:1: aspqueryinterior : (s3= STRING | aspexpr );
    public final PythonParser.aspqueryinterior_return aspqueryinterior() throws RecognitionException {
        PythonParser.aspqueryinterior_return retval = new PythonParser.aspqueryinterior_return();
        retval.start = input.LT(1);

        PythonTree root_0 = null;

        Token s3=null;
        PythonParser.aspexpr_return aspexpr355 = null;


        PythonTree s3_tree=null;

        try {
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2004:2: (s3= STRING | aspexpr )
            int alt142=2;
            int LA142_0 = input.LA(1);

            if ( (LA142_0==STRING) ) {
                alt142=1;
            }
            else if ( (LA142_0==NAME||LA142_0==LPAREN||(LA142_0>=PLUS && LA142_0<=MINUS)||(LA142_0>=TILDE && LA142_0<=LBRACK)||LA142_0==LCURLY||(LA142_0>=BACKQUOTE && LA142_0<=COMPLEX)||LA142_0==PRO||LA142_0==PRO_SELECT||LA142_0==ASP||LA142_0==ASP_SELECT||LA142_0==ASP_PATH||(LA142_0>=SELECT && LA142_0<=RDFSELECT)||LA142_0==CAPSFROM||(LA142_0>=MODIFY && LA142_0<=SUBCLASS)) ) {
                alt142=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 142, 0, input);

                throw nvae;
            }
            switch (alt142) {
                case 1 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2004:4: s3= STRING
                    {
                    root_0 = (PythonTree)adaptor.nil();

                    s3=(Token)match(input,STRING,FOLLOW_STRING_in_aspqueryinterior7442); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    s3_tree = (PythonTree)adaptor.create(s3);
                    adaptor.addChild(root_0, s3_tree);
                    }
                    if ( state.backtracking==0 ) {
                      ((asp_stmt_scope)asp_stmt_stack.peek()).temp+=(s3!=null?s3.getText():null);
                    }

                    }
                    break;
                case 2 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2005:4: aspexpr
                    {
                    root_0 = (PythonTree)adaptor.nil();

                    pushFollow(FOLLOW_aspexpr_in_aspqueryinterior7449);
                    aspexpr355=aspexpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, aspexpr355.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (PythonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException re) {
            errorHandler.reportError(this, re);
            errorHandler.recover(this, input,re);
            retval.tree = (PythonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "aspqueryinterior"

    public static class aspnot_return extends ParserRuleReturnScope {
        PythonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "aspnot"
    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2008:1: aspnot : ( NOT )* aspatom ;
    public final PythonParser.aspnot_return aspnot() throws RecognitionException {
        PythonParser.aspnot_return retval = new PythonParser.aspnot_return();
        retval.start = input.LT(1);

        PythonTree root_0 = null;

        Token NOT356=null;
        PythonParser.aspatom_return aspatom357 = null;


        PythonTree NOT356_tree=null;

        try {
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2009:2: ( ( NOT )* aspatom )
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2010:2: ( NOT )* aspatom
            {
            root_0 = (PythonTree)adaptor.nil();

            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2010:2: ( NOT )*
            loop143:
            do {
                int alt143=2;
                int LA143_0 = input.LA(1);

                if ( (LA143_0==NOT) ) {
                    alt143=1;
                }


                switch (alt143) {
            	case 1 :
            	    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2010:3: NOT
            	    {
            	    NOT356=(Token)match(input,NOT,FOLLOW_NOT_in_aspnot7464); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    NOT356_tree = (PythonTree)adaptor.create(NOT356);
            	    adaptor.addChild(root_0, NOT356_tree);
            	    }
            	    if ( state.backtracking==0 ) {
            	      ((asp_stmt_scope)asp_stmt_stack.peek()).temp+="not ";
            	    }

            	    }
            	    break;

            	default :
            	    break loop143;
                }
            } while (true);

            pushFollow(FOLLOW_aspatom_in_aspnot7470);
            aspatom357=aspatom();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, aspatom357.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (PythonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException re) {
            errorHandler.reportError(this, re);
            errorHandler.recover(this, input,re);
            retval.tree = (PythonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "aspnot"

    public static class aspsave_return extends ParserRuleReturnScope {
        PythonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "aspsave"
    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2013:1: aspsave : ( aspload | s1= CLEAR );
    public final PythonParser.aspsave_return aspsave() throws RecognitionException {
        PythonParser.aspsave_return retval = new PythonParser.aspsave_return();
        retval.start = input.LT(1);

        PythonTree root_0 = null;

        Token s1=null;
        PythonParser.aspload_return aspload358 = null;


        PythonTree s1_tree=null;

        try {
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2014:2: ( aspload | s1= CLEAR )
            int alt144=2;
            int LA144_0 = input.LA(1);

            if ( (LA144_0==NAME||LA144_0==LPAREN||(LA144_0>=PLUS && LA144_0<=MINUS)||(LA144_0>=TILDE && LA144_0<=LBRACK)||LA144_0==LCURLY||(LA144_0>=BACKQUOTE && LA144_0<=PRO)||LA144_0==PRO_SELECT||LA144_0==DIGITS||LA144_0==ASP||LA144_0==ASP_SELECT||LA144_0==ASP_PATH||(LA144_0>=SELECT && LA144_0<=RDFSELECT)||LA144_0==CAPSFROM||(LA144_0>=MODIFY && LA144_0<=SUBCLASS)) ) {
                alt144=1;
            }
            else if ( (LA144_0==CLEAR) ) {
                alt144=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 144, 0, input);

                throw nvae;
            }
            switch (alt144) {
                case 1 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2014:4: aspload
                    {
                    root_0 = (PythonTree)adaptor.nil();

                    pushFollow(FOLLOW_aspload_in_aspsave7482);
                    aspload358=aspload();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, aspload358.getTree());

                    }
                    break;
                case 2 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2015:4: s1= CLEAR
                    {
                    root_0 = (PythonTree)adaptor.nil();

                    s1=(Token)match(input,CLEAR,FOLLOW_CLEAR_in_aspsave7489); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    s1_tree = (PythonTree)adaptor.create(s1);
                    adaptor.addChild(root_0, s1_tree);
                    }
                    if ( state.backtracking==0 ) {
                      ((asp_stmt_scope)asp_stmt_stack.peek()).temp+=(s1!=null?s1.getText():null);
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (PythonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException re) {
            errorHandler.reportError(this, re);
            errorHandler.recover(this, input,re);
            retval.tree = (PythonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "aspsave"

    public static class aspdir_return extends ParserRuleReturnScope {
        PythonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "aspdir"
    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2018:1: aspdir : tempdir= path ( solverfrag )? ;
    public final PythonParser.aspdir_return aspdir() throws RecognitionException {
        PythonParser.aspdir_return retval = new PythonParser.aspdir_return();
        retval.start = input.LT(1);

        PythonTree root_0 = null;

        PythonParser.path_return tempdir = null;

        PythonParser.solverfrag_return solverfrag359 = null;



        try {
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2019:2: (tempdir= path ( solverfrag )? )
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2019:4: tempdir= path ( solverfrag )?
            {
            root_0 = (PythonTree)adaptor.nil();

            pushFollow(FOLLOW_path_in_aspdir7504);
            tempdir=path();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, tempdir.getTree());
            if ( state.backtracking==0 ) {
              ((asp_stmt_scope)asp_stmt_stack.peek()).dir += (tempdir!=null?input.toString(tempdir.start,tempdir.stop):null) + ";";
            }
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2019:58: ( solverfrag )?
            int alt145=2;
            int LA145_0 = input.LA(1);

            if ( (LA145_0==SOLVER) ) {
                alt145=1;
            }
            switch (alt145) {
                case 1 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2019:58: solverfrag
                    {
                    pushFollow(FOLLOW_solverfrag_in_aspdir7508);
                    solverfrag359=solverfrag();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, solverfrag359.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (PythonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException re) {
            errorHandler.reportError(this, re);
            errorHandler.recover(this, input,re);
            retval.tree = (PythonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "aspdir"

    public static class solverfrag_return extends ParserRuleReturnScope {
        PythonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "solverfrag"
    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2022:1: solverfrag : SOLVER tempsolver= path ;
    public final PythonParser.solverfrag_return solverfrag() throws RecognitionException {
        PythonParser.solverfrag_return retval = new PythonParser.solverfrag_return();
        retval.start = input.LT(1);

        PythonTree root_0 = null;

        Token SOLVER360=null;
        PythonParser.path_return tempsolver = null;


        PythonTree SOLVER360_tree=null;

        try {
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2023:2: ( SOLVER tempsolver= path )
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2023:4: SOLVER tempsolver= path
            {
            root_0 = (PythonTree)adaptor.nil();

            SOLVER360=(Token)match(input,SOLVER,FOLLOW_SOLVER_in_solverfrag7521); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SOLVER360_tree = (PythonTree)adaptor.create(SOLVER360);
            adaptor.addChild(root_0, SOLVER360_tree);
            }
            if ( state.backtracking==0 ) {
              ((asp_stmt_scope)asp_stmt_stack.peek()).strings.add((SOLVER360!=null?SOLVER360.getText():null));
            }
            pushFollow(FOLLOW_path_in_solverfrag7527);
            tempsolver=path();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, tempsolver.getTree());
            if ( state.backtracking==0 ) {
              ((asp_stmt_scope)asp_stmt_stack.peek()).dir += (tempsolver!=null?input.toString(tempsolver.start,tempsolver.stop):null) + ";";
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (PythonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException re) {
            errorHandler.reportError(this, re);
            errorHandler.recover(this, input,re);
            retval.tree = (PythonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "solverfrag"

    protected static class sql_stmt_scope {
        List strings;
        List exprs;
        String temp;
    }
    protected Stack sql_stmt_stack = new Stack();

    public static class sql_stmt_return extends ParserRuleReturnScope {
        PythonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "sql_stmt"
    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2027:1: sql_stmt : ( ( SELECT sqlquery SEMI -> ^( SELECT[$sql_stmt.start, actions.castExprs($sql_stmt::exprs), $expr::ctype,$sql_stmt::strings, \"SQL\"] ) ) | ( INSERT sqlinsert SEMI -> ^( INSERT[$sql_stmt.start, actions.castExprs($sql_stmt::exprs), $expr::ctype,$sql_stmt::strings, \"SQL\"] ) ) | ( CREATE sqlcreate SEMI -> ^( CREATE[$sql_stmt.start, actions.castExprs($sql_stmt::exprs), $expr::ctype,$sql_stmt::strings, \"SQL\"] ) ) | ( DROP sqldrop SEMI -> ^( DROP[$sql_stmt.start, actions.castExprs($sql_stmt::exprs), $expr::ctype,$sql_stmt::strings, \"SQL\"] ) ) | ( UPDATE sqlupdate SEMI -> ^( UPDATE[$sql_stmt.start, actions.castExprs($sql_stmt::exprs), $expr::ctype,$sql_stmt::strings, \"SQL\"] ) ) | ( SQL_DELETE sqldelete SEMI -> ^( SQL_DELETE[$sql_stmt.start, actions.castExprs($sql_stmt::exprs), $expr::ctype,$sql_stmt::strings, \"SQL\"] ) ) | ( ALTER sqlalter SEMI -> ^( ALTER[$sql_stmt.start, actions.castExprs($sql_stmt::exprs), $expr::ctype,$sql_stmt::strings, \"SQL\"] ) ) | ( MAKECONNECT urlfrag SEMI -> ^( MAKECONNECT[$sql_stmt.start, actions.castExprs($sql_stmt::exprs), $expr::ctype, $connection::url, $connection::uname, $connection::pword, $connection::contype] ) ) | ( ASPSELECT sqlquery SEMI -> ^( ASPSELECT[$sql_stmt.start, actions.castExprs($sql_stmt::exprs), $expr::ctype, $sql_stmt::strings, \"ASP\"] ) ) | ( RDFSELECT sqlquery SEMI -> ^( RDFSELECT[$sql_stmt.start, actions.castExprs($sql_stmt::exprs), $expr::ctype, $sql_stmt::strings, \"ASP\"] ) ) ) ;
    public final PythonParser.sql_stmt_return sql_stmt() throws RecognitionException {
        connection_stack.push(new connection_scope());
        sql_stmt_stack.push(new sql_stmt_scope());
        PythonParser.sql_stmt_return retval = new PythonParser.sql_stmt_return();
        retval.start = input.LT(1);

        PythonTree root_0 = null;

        Token SELECT361=null;
        Token SEMI363=null;
        Token INSERT364=null;
        Token SEMI366=null;
        Token CREATE367=null;
        Token SEMI369=null;
        Token DROP370=null;
        Token SEMI372=null;
        Token UPDATE373=null;
        Token SEMI375=null;
        Token SQL_DELETE376=null;
        Token SEMI378=null;
        Token ALTER379=null;
        Token SEMI381=null;
        Token MAKECONNECT382=null;
        Token SEMI384=null;
        Token ASPSELECT385=null;
        Token SEMI387=null;
        Token RDFSELECT388=null;
        Token SEMI390=null;
        PythonParser.sqlquery_return sqlquery362 = null;

        PythonParser.sqlinsert_return sqlinsert365 = null;

        PythonParser.sqlcreate_return sqlcreate368 = null;

        PythonParser.sqldrop_return sqldrop371 = null;

        PythonParser.sqlupdate_return sqlupdate374 = null;

        PythonParser.sqldelete_return sqldelete377 = null;

        PythonParser.sqlalter_return sqlalter380 = null;

        PythonParser.urlfrag_return urlfrag383 = null;

        PythonParser.sqlquery_return sqlquery386 = null;

        PythonParser.sqlquery_return sqlquery389 = null;


        PythonTree SELECT361_tree=null;
        PythonTree SEMI363_tree=null;
        PythonTree INSERT364_tree=null;
        PythonTree SEMI366_tree=null;
        PythonTree CREATE367_tree=null;
        PythonTree SEMI369_tree=null;
        PythonTree DROP370_tree=null;
        PythonTree SEMI372_tree=null;
        PythonTree UPDATE373_tree=null;
        PythonTree SEMI375_tree=null;
        PythonTree SQL_DELETE376_tree=null;
        PythonTree SEMI378_tree=null;
        PythonTree ALTER379_tree=null;
        PythonTree SEMI381_tree=null;
        PythonTree MAKECONNECT382_tree=null;
        PythonTree SEMI384_tree=null;
        PythonTree ASPSELECT385_tree=null;
        PythonTree SEMI387_tree=null;
        PythonTree RDFSELECT388_tree=null;
        PythonTree SEMI390_tree=null;
        RewriteRuleTokenStream stream_UPDATE=new RewriteRuleTokenStream(adaptor,"token UPDATE");
        RewriteRuleTokenStream stream_CREATE=new RewriteRuleTokenStream(adaptor,"token CREATE");
        RewriteRuleTokenStream stream_SQL_DELETE=new RewriteRuleTokenStream(adaptor,"token SQL_DELETE");
        RewriteRuleTokenStream stream_ALTER=new RewriteRuleTokenStream(adaptor,"token ALTER");
        RewriteRuleTokenStream stream_RDFSELECT=new RewriteRuleTokenStream(adaptor,"token RDFSELECT");
        RewriteRuleTokenStream stream_ASPSELECT=new RewriteRuleTokenStream(adaptor,"token ASPSELECT");
        RewriteRuleTokenStream stream_INSERT=new RewriteRuleTokenStream(adaptor,"token INSERT");
        RewriteRuleTokenStream stream_MAKECONNECT=new RewriteRuleTokenStream(adaptor,"token MAKECONNECT");
        RewriteRuleTokenStream stream_DROP=new RewriteRuleTokenStream(adaptor,"token DROP");
        RewriteRuleTokenStream stream_SELECT=new RewriteRuleTokenStream(adaptor,"token SELECT");
        RewriteRuleTokenStream stream_SEMI=new RewriteRuleTokenStream(adaptor,"token SEMI");
        RewriteRuleSubtreeStream stream_sqlinsert=new RewriteRuleSubtreeStream(adaptor,"rule sqlinsert");
        RewriteRuleSubtreeStream stream_sqlalter=new RewriteRuleSubtreeStream(adaptor,"rule sqlalter");
        RewriteRuleSubtreeStream stream_sqldrop=new RewriteRuleSubtreeStream(adaptor,"rule sqldrop");
        RewriteRuleSubtreeStream stream_sqlquery=new RewriteRuleSubtreeStream(adaptor,"rule sqlquery");
        RewriteRuleSubtreeStream stream_sqlupdate=new RewriteRuleSubtreeStream(adaptor,"rule sqlupdate");
        RewriteRuleSubtreeStream stream_sqldelete=new RewriteRuleSubtreeStream(adaptor,"rule sqldelete");
        RewriteRuleSubtreeStream stream_urlfrag=new RewriteRuleSubtreeStream(adaptor,"rule urlfrag");
        RewriteRuleSubtreeStream stream_sqlcreate=new RewriteRuleSubtreeStream(adaptor,"rule sqlcreate");

            expr etype = null;
        	((connection_scope)connection_stack.peek()).url = "jdbc:oracle:thin:@rising-sun.microlab.cs.utexas.edu:1521:orcl";
        	((connection_scope)connection_stack.peek()).uname = "CS345_ecp456";
        	((connection_scope)connection_stack.peek()).pword = "orcl_ecp456";
        	((connection_scope)connection_stack.peek()).contype = "local";

        try {
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2046:5: ( ( ( SELECT sqlquery SEMI -> ^( SELECT[$sql_stmt.start, actions.castExprs($sql_stmt::exprs), $expr::ctype,$sql_stmt::strings, \"SQL\"] ) ) | ( INSERT sqlinsert SEMI -> ^( INSERT[$sql_stmt.start, actions.castExprs($sql_stmt::exprs), $expr::ctype,$sql_stmt::strings, \"SQL\"] ) ) | ( CREATE sqlcreate SEMI -> ^( CREATE[$sql_stmt.start, actions.castExprs($sql_stmt::exprs), $expr::ctype,$sql_stmt::strings, \"SQL\"] ) ) | ( DROP sqldrop SEMI -> ^( DROP[$sql_stmt.start, actions.castExprs($sql_stmt::exprs), $expr::ctype,$sql_stmt::strings, \"SQL\"] ) ) | ( UPDATE sqlupdate SEMI -> ^( UPDATE[$sql_stmt.start, actions.castExprs($sql_stmt::exprs), $expr::ctype,$sql_stmt::strings, \"SQL\"] ) ) | ( SQL_DELETE sqldelete SEMI -> ^( SQL_DELETE[$sql_stmt.start, actions.castExprs($sql_stmt::exprs), $expr::ctype,$sql_stmt::strings, \"SQL\"] ) ) | ( ALTER sqlalter SEMI -> ^( ALTER[$sql_stmt.start, actions.castExprs($sql_stmt::exprs), $expr::ctype,$sql_stmt::strings, \"SQL\"] ) ) | ( MAKECONNECT urlfrag SEMI -> ^( MAKECONNECT[$sql_stmt.start, actions.castExprs($sql_stmt::exprs), $expr::ctype, $connection::url, $connection::uname, $connection::pword, $connection::contype] ) ) | ( ASPSELECT sqlquery SEMI -> ^( ASPSELECT[$sql_stmt.start, actions.castExprs($sql_stmt::exprs), $expr::ctype, $sql_stmt::strings, \"ASP\"] ) ) | ( RDFSELECT sqlquery SEMI -> ^( RDFSELECT[$sql_stmt.start, actions.castExprs($sql_stmt::exprs), $expr::ctype, $sql_stmt::strings, \"ASP\"] ) ) ) )
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2047:6: ( ( SELECT sqlquery SEMI -> ^( SELECT[$sql_stmt.start, actions.castExprs($sql_stmt::exprs), $expr::ctype,$sql_stmt::strings, \"SQL\"] ) ) | ( INSERT sqlinsert SEMI -> ^( INSERT[$sql_stmt.start, actions.castExprs($sql_stmt::exprs), $expr::ctype,$sql_stmt::strings, \"SQL\"] ) ) | ( CREATE sqlcreate SEMI -> ^( CREATE[$sql_stmt.start, actions.castExprs($sql_stmt::exprs), $expr::ctype,$sql_stmt::strings, \"SQL\"] ) ) | ( DROP sqldrop SEMI -> ^( DROP[$sql_stmt.start, actions.castExprs($sql_stmt::exprs), $expr::ctype,$sql_stmt::strings, \"SQL\"] ) ) | ( UPDATE sqlupdate SEMI -> ^( UPDATE[$sql_stmt.start, actions.castExprs($sql_stmt::exprs), $expr::ctype,$sql_stmt::strings, \"SQL\"] ) ) | ( SQL_DELETE sqldelete SEMI -> ^( SQL_DELETE[$sql_stmt.start, actions.castExprs($sql_stmt::exprs), $expr::ctype,$sql_stmt::strings, \"SQL\"] ) ) | ( ALTER sqlalter SEMI -> ^( ALTER[$sql_stmt.start, actions.castExprs($sql_stmt::exprs), $expr::ctype,$sql_stmt::strings, \"SQL\"] ) ) | ( MAKECONNECT urlfrag SEMI -> ^( MAKECONNECT[$sql_stmt.start, actions.castExprs($sql_stmt::exprs), $expr::ctype, $connection::url, $connection::uname, $connection::pword, $connection::contype] ) ) | ( ASPSELECT sqlquery SEMI -> ^( ASPSELECT[$sql_stmt.start, actions.castExprs($sql_stmt::exprs), $expr::ctype, $sql_stmt::strings, \"ASP\"] ) ) | ( RDFSELECT sqlquery SEMI -> ^( RDFSELECT[$sql_stmt.start, actions.castExprs($sql_stmt::exprs), $expr::ctype, $sql_stmt::strings, \"ASP\"] ) ) )
            {
            if ( state.backtracking==0 ) {

                         ((sql_stmt_scope)sql_stmt_stack.peek()).strings = new ArrayList<String>();
                         ((sql_stmt_scope)sql_stmt_stack.peek()).exprs = new ArrayList<expr>();
                         ((sql_stmt_scope)sql_stmt_stack.peek()).temp ="";
                    	
            }
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2052:8: ( ( SELECT sqlquery SEMI -> ^( SELECT[$sql_stmt.start, actions.castExprs($sql_stmt::exprs), $expr::ctype,$sql_stmt::strings, \"SQL\"] ) ) | ( INSERT sqlinsert SEMI -> ^( INSERT[$sql_stmt.start, actions.castExprs($sql_stmt::exprs), $expr::ctype,$sql_stmt::strings, \"SQL\"] ) ) | ( CREATE sqlcreate SEMI -> ^( CREATE[$sql_stmt.start, actions.castExprs($sql_stmt::exprs), $expr::ctype,$sql_stmt::strings, \"SQL\"] ) ) | ( DROP sqldrop SEMI -> ^( DROP[$sql_stmt.start, actions.castExprs($sql_stmt::exprs), $expr::ctype,$sql_stmt::strings, \"SQL\"] ) ) | ( UPDATE sqlupdate SEMI -> ^( UPDATE[$sql_stmt.start, actions.castExprs($sql_stmt::exprs), $expr::ctype,$sql_stmt::strings, \"SQL\"] ) ) | ( SQL_DELETE sqldelete SEMI -> ^( SQL_DELETE[$sql_stmt.start, actions.castExprs($sql_stmt::exprs), $expr::ctype,$sql_stmt::strings, \"SQL\"] ) ) | ( ALTER sqlalter SEMI -> ^( ALTER[$sql_stmt.start, actions.castExprs($sql_stmt::exprs), $expr::ctype,$sql_stmt::strings, \"SQL\"] ) ) | ( MAKECONNECT urlfrag SEMI -> ^( MAKECONNECT[$sql_stmt.start, actions.castExprs($sql_stmt::exprs), $expr::ctype, $connection::url, $connection::uname, $connection::pword, $connection::contype] ) ) | ( ASPSELECT sqlquery SEMI -> ^( ASPSELECT[$sql_stmt.start, actions.castExprs($sql_stmt::exprs), $expr::ctype, $sql_stmt::strings, \"ASP\"] ) ) | ( RDFSELECT sqlquery SEMI -> ^( RDFSELECT[$sql_stmt.start, actions.castExprs($sql_stmt::exprs), $expr::ctype, $sql_stmt::strings, \"ASP\"] ) ) )
            int alt146=10;
            switch ( input.LA(1) ) {
            case SELECT:
                {
                alt146=1;
                }
                break;
            case INSERT:
                {
                alt146=2;
                }
                break;
            case CREATE:
                {
                alt146=3;
                }
                break;
            case DROP:
                {
                alt146=4;
                }
                break;
            case UPDATE:
                {
                alt146=5;
                }
                break;
            case SQL_DELETE:
                {
                alt146=6;
                }
                break;
            case ALTER:
                {
                alt146=7;
                }
                break;
            case MAKECONNECT:
                {
                alt146=8;
                }
                break;
            case ASPSELECT:
                {
                alt146=9;
                }
                break;
            case RDFSELECT:
                {
                alt146=10;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 146, 0, input);

                throw nvae;
            }

            switch (alt146) {
                case 1 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2053:5: ( SELECT sqlquery SEMI -> ^( SELECT[$sql_stmt.start, actions.castExprs($sql_stmt::exprs), $expr::ctype,$sql_stmt::strings, \"SQL\"] ) )
                    {
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2053:5: ( SELECT sqlquery SEMI -> ^( SELECT[$sql_stmt.start, actions.castExprs($sql_stmt::exprs), $expr::ctype,$sql_stmt::strings, \"SQL\"] ) )
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2053:6: SELECT sqlquery SEMI
                    {
                    SELECT361=(Token)match(input,SELECT,FOLLOW_SELECT_in_sql_stmt7587); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SELECT.add(SELECT361);

                    pushFollow(FOLLOW_sqlquery_in_sql_stmt7589);
                    sqlquery362=sqlquery();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_sqlquery.add(sqlquery362.getTree());
                    SEMI363=(Token)match(input,SEMI,FOLLOW_SEMI_in_sql_stmt7591); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SEMI.add(SEMI363);

                    if ( state.backtracking==0 ) {
                      ((sql_stmt_scope)sql_stmt_stack.peek()).strings.add(((sql_stmt_scope)sql_stmt_stack.peek()).temp);  
                    }


                    // AST REWRITE
                    // elements: SELECT
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (PythonTree)adaptor.nil();
                    // 2054:8: -> ^( SELECT[$sql_stmt.start, actions.castExprs($sql_stmt::exprs), $expr::ctype,$sql_stmt::strings, \"SQL\"] )
                    {
                        // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2054:11: ^( SELECT[$sql_stmt.start, actions.castExprs($sql_stmt::exprs), $expr::ctype,$sql_stmt::strings, \"SQL\"] )
                        {
                        PythonTree root_1 = (PythonTree)adaptor.nil();
                        root_1 = (PythonTree)adaptor.becomeRoot(new Tuple(SELECT, ((Token)retval.start), actions.castExprs(((sql_stmt_scope)sql_stmt_stack.peek()).exprs), ((expr_scope)expr_stack.peek()).ctype, ((sql_stmt_scope)sql_stmt_stack.peek()).strings, "SQL"), root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }


                    }
                    break;
                case 2 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2055:10: ( INSERT sqlinsert SEMI -> ^( INSERT[$sql_stmt.start, actions.castExprs($sql_stmt::exprs), $expr::ctype,$sql_stmt::strings, \"SQL\"] ) )
                    {
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2055:10: ( INSERT sqlinsert SEMI -> ^( INSERT[$sql_stmt.start, actions.castExprs($sql_stmt::exprs), $expr::ctype,$sql_stmt::strings, \"SQL\"] ) )
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2055:11: INSERT sqlinsert SEMI
                    {
                    INSERT364=(Token)match(input,INSERT,FOLLOW_INSERT_in_sql_stmt7623); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_INSERT.add(INSERT364);

                    pushFollow(FOLLOW_sqlinsert_in_sql_stmt7625);
                    sqlinsert365=sqlinsert();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_sqlinsert.add(sqlinsert365.getTree());
                    SEMI366=(Token)match(input,SEMI,FOLLOW_SEMI_in_sql_stmt7627); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SEMI.add(SEMI366);

                    if ( state.backtracking==0 ) {
                      ((sql_stmt_scope)sql_stmt_stack.peek()).strings.add(((sql_stmt_scope)sql_stmt_stack.peek()).temp);
                    }


                    // AST REWRITE
                    // elements: INSERT
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (PythonTree)adaptor.nil();
                    // 2056:8: -> ^( INSERT[$sql_stmt.start, actions.castExprs($sql_stmt::exprs), $expr::ctype,$sql_stmt::strings, \"SQL\"] )
                    {
                        // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2056:11: ^( INSERT[$sql_stmt.start, actions.castExprs($sql_stmt::exprs), $expr::ctype,$sql_stmt::strings, \"SQL\"] )
                        {
                        PythonTree root_1 = (PythonTree)adaptor.nil();
                        root_1 = (PythonTree)adaptor.becomeRoot(new Tuple(INSERT, ((Token)retval.start), actions.castExprs(((sql_stmt_scope)sql_stmt_stack.peek()).exprs), ((expr_scope)expr_stack.peek()).ctype, ((sql_stmt_scope)sql_stmt_stack.peek()).strings, "SQL"), root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }


                    }
                    break;
                case 3 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2057:10: ( CREATE sqlcreate SEMI -> ^( CREATE[$sql_stmt.start, actions.castExprs($sql_stmt::exprs), $expr::ctype,$sql_stmt::strings, \"SQL\"] ) )
                    {
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2057:10: ( CREATE sqlcreate SEMI -> ^( CREATE[$sql_stmt.start, actions.castExprs($sql_stmt::exprs), $expr::ctype,$sql_stmt::strings, \"SQL\"] ) )
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2057:11: CREATE sqlcreate SEMI
                    {
                    CREATE367=(Token)match(input,CREATE,FOLLOW_CREATE_in_sql_stmt7659); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CREATE.add(CREATE367);

                    pushFollow(FOLLOW_sqlcreate_in_sql_stmt7661);
                    sqlcreate368=sqlcreate();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_sqlcreate.add(sqlcreate368.getTree());
                    SEMI369=(Token)match(input,SEMI,FOLLOW_SEMI_in_sql_stmt7663); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SEMI.add(SEMI369);

                    if ( state.backtracking==0 ) {
                      ((sql_stmt_scope)sql_stmt_stack.peek()).strings.add(((sql_stmt_scope)sql_stmt_stack.peek()).temp);
                    }


                    // AST REWRITE
                    // elements: CREATE
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (PythonTree)adaptor.nil();
                    // 2058:8: -> ^( CREATE[$sql_stmt.start, actions.castExprs($sql_stmt::exprs), $expr::ctype,$sql_stmt::strings, \"SQL\"] )
                    {
                        // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2058:11: ^( CREATE[$sql_stmt.start, actions.castExprs($sql_stmt::exprs), $expr::ctype,$sql_stmt::strings, \"SQL\"] )
                        {
                        PythonTree root_1 = (PythonTree)adaptor.nil();
                        root_1 = (PythonTree)adaptor.becomeRoot(new Tuple(CREATE, ((Token)retval.start), actions.castExprs(((sql_stmt_scope)sql_stmt_stack.peek()).exprs), ((expr_scope)expr_stack.peek()).ctype, ((sql_stmt_scope)sql_stmt_stack.peek()).strings, "SQL"), root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }


                    }
                    break;
                case 4 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2059:10: ( DROP sqldrop SEMI -> ^( DROP[$sql_stmt.start, actions.castExprs($sql_stmt::exprs), $expr::ctype,$sql_stmt::strings, \"SQL\"] ) )
                    {
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2059:10: ( DROP sqldrop SEMI -> ^( DROP[$sql_stmt.start, actions.castExprs($sql_stmt::exprs), $expr::ctype,$sql_stmt::strings, \"SQL\"] ) )
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2059:11: DROP sqldrop SEMI
                    {
                    DROP370=(Token)match(input,DROP,FOLLOW_DROP_in_sql_stmt7695); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DROP.add(DROP370);

                    pushFollow(FOLLOW_sqldrop_in_sql_stmt7697);
                    sqldrop371=sqldrop();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_sqldrop.add(sqldrop371.getTree());
                    SEMI372=(Token)match(input,SEMI,FOLLOW_SEMI_in_sql_stmt7700); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SEMI.add(SEMI372);

                    if ( state.backtracking==0 ) {
                      ((sql_stmt_scope)sql_stmt_stack.peek()).strings.add(((sql_stmt_scope)sql_stmt_stack.peek()).temp);
                    }


                    // AST REWRITE
                    // elements: DROP
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (PythonTree)adaptor.nil();
                    // 2060:8: -> ^( DROP[$sql_stmt.start, actions.castExprs($sql_stmt::exprs), $expr::ctype,$sql_stmt::strings, \"SQL\"] )
                    {
                        // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2060:11: ^( DROP[$sql_stmt.start, actions.castExprs($sql_stmt::exprs), $expr::ctype,$sql_stmt::strings, \"SQL\"] )
                        {
                        PythonTree root_1 = (PythonTree)adaptor.nil();
                        root_1 = (PythonTree)adaptor.becomeRoot(new Tuple(DROP, ((Token)retval.start), actions.castExprs(((sql_stmt_scope)sql_stmt_stack.peek()).exprs), ((expr_scope)expr_stack.peek()).ctype, ((sql_stmt_scope)sql_stmt_stack.peek()).strings, "SQL"), root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }


                    }
                    break;
                case 5 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2061:10: ( UPDATE sqlupdate SEMI -> ^( UPDATE[$sql_stmt.start, actions.castExprs($sql_stmt::exprs), $expr::ctype,$sql_stmt::strings, \"SQL\"] ) )
                    {
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2061:10: ( UPDATE sqlupdate SEMI -> ^( UPDATE[$sql_stmt.start, actions.castExprs($sql_stmt::exprs), $expr::ctype,$sql_stmt::strings, \"SQL\"] ) )
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2061:11: UPDATE sqlupdate SEMI
                    {
                    UPDATE373=(Token)match(input,UPDATE,FOLLOW_UPDATE_in_sql_stmt7732); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_UPDATE.add(UPDATE373);

                    pushFollow(FOLLOW_sqlupdate_in_sql_stmt7734);
                    sqlupdate374=sqlupdate();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_sqlupdate.add(sqlupdate374.getTree());
                    SEMI375=(Token)match(input,SEMI,FOLLOW_SEMI_in_sql_stmt7736); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SEMI.add(SEMI375);

                    if ( state.backtracking==0 ) {
                      ((sql_stmt_scope)sql_stmt_stack.peek()).strings.add(((sql_stmt_scope)sql_stmt_stack.peek()).temp);
                    }


                    // AST REWRITE
                    // elements: UPDATE
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (PythonTree)adaptor.nil();
                    // 2062:8: -> ^( UPDATE[$sql_stmt.start, actions.castExprs($sql_stmt::exprs), $expr::ctype,$sql_stmt::strings, \"SQL\"] )
                    {
                        // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2062:11: ^( UPDATE[$sql_stmt.start, actions.castExprs($sql_stmt::exprs), $expr::ctype,$sql_stmt::strings, \"SQL\"] )
                        {
                        PythonTree root_1 = (PythonTree)adaptor.nil();
                        root_1 = (PythonTree)adaptor.becomeRoot(new Tuple(UPDATE, ((Token)retval.start), actions.castExprs(((sql_stmt_scope)sql_stmt_stack.peek()).exprs), ((expr_scope)expr_stack.peek()).ctype, ((sql_stmt_scope)sql_stmt_stack.peek()).strings, "SQL"), root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }


                    }
                    break;
                case 6 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2063:10: ( SQL_DELETE sqldelete SEMI -> ^( SQL_DELETE[$sql_stmt.start, actions.castExprs($sql_stmt::exprs), $expr::ctype,$sql_stmt::strings, \"SQL\"] ) )
                    {
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2063:10: ( SQL_DELETE sqldelete SEMI -> ^( SQL_DELETE[$sql_stmt.start, actions.castExprs($sql_stmt::exprs), $expr::ctype,$sql_stmt::strings, \"SQL\"] ) )
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2063:11: SQL_DELETE sqldelete SEMI
                    {
                    SQL_DELETE376=(Token)match(input,SQL_DELETE,FOLLOW_SQL_DELETE_in_sql_stmt7768); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SQL_DELETE.add(SQL_DELETE376);

                    pushFollow(FOLLOW_sqldelete_in_sql_stmt7770);
                    sqldelete377=sqldelete();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_sqldelete.add(sqldelete377.getTree());
                    SEMI378=(Token)match(input,SEMI,FOLLOW_SEMI_in_sql_stmt7772); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SEMI.add(SEMI378);

                    if ( state.backtracking==0 ) {
                      ((sql_stmt_scope)sql_stmt_stack.peek()).strings.add(((sql_stmt_scope)sql_stmt_stack.peek()).temp);
                    }


                    // AST REWRITE
                    // elements: SQL_DELETE
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (PythonTree)adaptor.nil();
                    // 2064:8: -> ^( SQL_DELETE[$sql_stmt.start, actions.castExprs($sql_stmt::exprs), $expr::ctype,$sql_stmt::strings, \"SQL\"] )
                    {
                        // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2064:11: ^( SQL_DELETE[$sql_stmt.start, actions.castExprs($sql_stmt::exprs), $expr::ctype,$sql_stmt::strings, \"SQL\"] )
                        {
                        PythonTree root_1 = (PythonTree)adaptor.nil();
                        root_1 = (PythonTree)adaptor.becomeRoot(new Tuple(SQL_DELETE, ((Token)retval.start), actions.castExprs(((sql_stmt_scope)sql_stmt_stack.peek()).exprs), ((expr_scope)expr_stack.peek()).ctype, ((sql_stmt_scope)sql_stmt_stack.peek()).strings, "SQL"), root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }


                    }
                    break;
                case 7 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2065:10: ( ALTER sqlalter SEMI -> ^( ALTER[$sql_stmt.start, actions.castExprs($sql_stmt::exprs), $expr::ctype,$sql_stmt::strings, \"SQL\"] ) )
                    {
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2065:10: ( ALTER sqlalter SEMI -> ^( ALTER[$sql_stmt.start, actions.castExprs($sql_stmt::exprs), $expr::ctype,$sql_stmt::strings, \"SQL\"] ) )
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2065:11: ALTER sqlalter SEMI
                    {
                    ALTER379=(Token)match(input,ALTER,FOLLOW_ALTER_in_sql_stmt7804); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ALTER.add(ALTER379);

                    pushFollow(FOLLOW_sqlalter_in_sql_stmt7806);
                    sqlalter380=sqlalter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_sqlalter.add(sqlalter380.getTree());
                    SEMI381=(Token)match(input,SEMI,FOLLOW_SEMI_in_sql_stmt7808); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SEMI.add(SEMI381);

                    if ( state.backtracking==0 ) {
                      ((sql_stmt_scope)sql_stmt_stack.peek()).strings.add(((sql_stmt_scope)sql_stmt_stack.peek()).temp);
                    }


                    // AST REWRITE
                    // elements: ALTER
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (PythonTree)adaptor.nil();
                    // 2066:8: -> ^( ALTER[$sql_stmt.start, actions.castExprs($sql_stmt::exprs), $expr::ctype,$sql_stmt::strings, \"SQL\"] )
                    {
                        // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2066:11: ^( ALTER[$sql_stmt.start, actions.castExprs($sql_stmt::exprs), $expr::ctype,$sql_stmt::strings, \"SQL\"] )
                        {
                        PythonTree root_1 = (PythonTree)adaptor.nil();
                        root_1 = (PythonTree)adaptor.becomeRoot(new Tuple(ALTER, ((Token)retval.start), actions.castExprs(((sql_stmt_scope)sql_stmt_stack.peek()).exprs), ((expr_scope)expr_stack.peek()).ctype, ((sql_stmt_scope)sql_stmt_stack.peek()).strings, "SQL"), root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }


                    }
                    break;
                case 8 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2067:4: ( MAKECONNECT urlfrag SEMI -> ^( MAKECONNECT[$sql_stmt.start, actions.castExprs($sql_stmt::exprs), $expr::ctype, $connection::url, $connection::uname, $connection::pword, $connection::contype] ) )
                    {
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2067:4: ( MAKECONNECT urlfrag SEMI -> ^( MAKECONNECT[$sql_stmt.start, actions.castExprs($sql_stmt::exprs), $expr::ctype, $connection::url, $connection::uname, $connection::pword, $connection::contype] ) )
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2067:5: MAKECONNECT urlfrag SEMI
                    {
                    MAKECONNECT382=(Token)match(input,MAKECONNECT,FOLLOW_MAKECONNECT_in_sql_stmt7834); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_MAKECONNECT.add(MAKECONNECT382);

                    pushFollow(FOLLOW_urlfrag_in_sql_stmt7836);
                    urlfrag383=urlfrag();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_urlfrag.add(urlfrag383.getTree());
                    SEMI384=(Token)match(input,SEMI,FOLLOW_SEMI_in_sql_stmt7838); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SEMI.add(SEMI384);



                    // AST REWRITE
                    // elements: MAKECONNECT
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (PythonTree)adaptor.nil();
                    // 2068:2: -> ^( MAKECONNECT[$sql_stmt.start, actions.castExprs($sql_stmt::exprs), $expr::ctype, $connection::url, $connection::uname, $connection::pword, $connection::contype] )
                    {
                        // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2068:5: ^( MAKECONNECT[$sql_stmt.start, actions.castExprs($sql_stmt::exprs), $expr::ctype, $connection::url, $connection::uname, $connection::pword, $connection::contype] )
                        {
                        PythonTree root_1 = (PythonTree)adaptor.nil();
                        root_1 = (PythonTree)adaptor.becomeRoot(new Connection(MAKECONNECT, ((Token)retval.start), actions.castExprs(((sql_stmt_scope)sql_stmt_stack.peek()).exprs), ((expr_scope)expr_stack.peek()).ctype, ((connection_scope)connection_stack.peek()).url, ((connection_scope)connection_stack.peek()).uname, ((connection_scope)connection_stack.peek()).pword, ((connection_scope)connection_stack.peek()).contype), root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }


                    }
                    break;
                case 9 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2069:4: ( ASPSELECT sqlquery SEMI -> ^( ASPSELECT[$sql_stmt.start, actions.castExprs($sql_stmt::exprs), $expr::ctype, $sql_stmt::strings, \"ASP\"] ) )
                    {
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2069:4: ( ASPSELECT sqlquery SEMI -> ^( ASPSELECT[$sql_stmt.start, actions.castExprs($sql_stmt::exprs), $expr::ctype, $sql_stmt::strings, \"ASP\"] ) )
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2069:5: ASPSELECT sqlquery SEMI
                    {
                    ASPSELECT385=(Token)match(input,ASPSELECT,FOLLOW_ASPSELECT_in_sql_stmt7856); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ASPSELECT.add(ASPSELECT385);

                    pushFollow(FOLLOW_sqlquery_in_sql_stmt7858);
                    sqlquery386=sqlquery();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_sqlquery.add(sqlquery386.getTree());
                    SEMI387=(Token)match(input,SEMI,FOLLOW_SEMI_in_sql_stmt7860); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SEMI.add(SEMI387);

                    if ( state.backtracking==0 ) {
                      ((sql_stmt_scope)sql_stmt_stack.peek()).strings.add(((sql_stmt_scope)sql_stmt_stack.peek()).temp);  
                    }


                    // AST REWRITE
                    // elements: ASPSELECT
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (PythonTree)adaptor.nil();
                    // 2070:8: -> ^( ASPSELECT[$sql_stmt.start, actions.castExprs($sql_stmt::exprs), $expr::ctype, $sql_stmt::strings, \"ASP\"] )
                    {
                        // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2070:11: ^( ASPSELECT[$sql_stmt.start, actions.castExprs($sql_stmt::exprs), $expr::ctype, $sql_stmt::strings, \"ASP\"] )
                        {
                        PythonTree root_1 = (PythonTree)adaptor.nil();
                        root_1 = (PythonTree)adaptor.becomeRoot(new Tuple(ASPSELECT, ((Token)retval.start), actions.castExprs(((sql_stmt_scope)sql_stmt_stack.peek()).exprs), ((expr_scope)expr_stack.peek()).ctype, ((sql_stmt_scope)sql_stmt_stack.peek()).strings, "ASP"), root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }


                    }
                    break;
                case 10 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2071:10: ( RDFSELECT sqlquery SEMI -> ^( RDFSELECT[$sql_stmt.start, actions.castExprs($sql_stmt::exprs), $expr::ctype, $sql_stmt::strings, \"ASP\"] ) )
                    {
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2071:10: ( RDFSELECT sqlquery SEMI -> ^( RDFSELECT[$sql_stmt.start, actions.castExprs($sql_stmt::exprs), $expr::ctype, $sql_stmt::strings, \"ASP\"] ) )
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2071:11: RDFSELECT sqlquery SEMI
                    {
                    RDFSELECT388=(Token)match(input,RDFSELECT,FOLLOW_RDFSELECT_in_sql_stmt7892); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RDFSELECT.add(RDFSELECT388);

                    pushFollow(FOLLOW_sqlquery_in_sql_stmt7894);
                    sqlquery389=sqlquery();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_sqlquery.add(sqlquery389.getTree());
                    SEMI390=(Token)match(input,SEMI,FOLLOW_SEMI_in_sql_stmt7896); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SEMI.add(SEMI390);

                    if ( state.backtracking==0 ) {
                      ((sql_stmt_scope)sql_stmt_stack.peek()).strings.add(((sql_stmt_scope)sql_stmt_stack.peek()).temp);  
                    }


                    // AST REWRITE
                    // elements: RDFSELECT
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (PythonTree)adaptor.nil();
                    // 2072:8: -> ^( RDFSELECT[$sql_stmt.start, actions.castExprs($sql_stmt::exprs), $expr::ctype, $sql_stmt::strings, \"ASP\"] )
                    {
                        // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2072:11: ^( RDFSELECT[$sql_stmt.start, actions.castExprs($sql_stmt::exprs), $expr::ctype, $sql_stmt::strings, \"ASP\"] )
                        {
                        PythonTree root_1 = (PythonTree)adaptor.nil();
                        root_1 = (PythonTree)adaptor.becomeRoot(new Tuple(RDFSELECT, ((Token)retval.start), actions.castExprs(((sql_stmt_scope)sql_stmt_stack.peek()).exprs), ((expr_scope)expr_stack.peek()).ctype, ((sql_stmt_scope)sql_stmt_stack.peek()).strings, "ASP"), root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (PythonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {

                  if (etype != null) {
                      retval.tree = etype;
                  }

            }
        }

        catch (RecognitionException re) {
            errorHandler.reportError(this, re);
            errorHandler.recover(this, input,re);
            retval.tree = (PythonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
        }
        finally {
            connection_stack.pop();
            sql_stmt_stack.pop();
        }
        return retval;
    }
    // $ANTLR end "sql_stmt"

    public static class urlfrag_return extends ParserRuleReturnScope {
        PythonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "urlfrag"
    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2083:1: urlfrag : tempurl= URLLINK ( namefrag )? ;
    public final PythonParser.urlfrag_return urlfrag() throws RecognitionException {
        PythonParser.urlfrag_return retval = new PythonParser.urlfrag_return();
        retval.start = input.LT(1);

        PythonTree root_0 = null;

        Token tempurl=null;
        PythonParser.namefrag_return namefrag391 = null;


        PythonTree tempurl_tree=null;

        try {
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2084:2: (tempurl= URLLINK ( namefrag )? )
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2085:2: tempurl= URLLINK ( namefrag )?
            {
            root_0 = (PythonTree)adaptor.nil();

            tempurl=(Token)match(input,URLLINK,FOLLOW_URLLINK_in_urlfrag7951); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            tempurl_tree = (PythonTree)adaptor.create(tempurl);
            adaptor.addChild(root_0, tempurl_tree);
            }
            if ( state.backtracking==0 ) {
              ((connection_scope)connection_stack.peek()).url =(tempurl!=null?tempurl.getText():null).substring(4);
            }
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2085:65: ( namefrag )?
            int alt147=2;
            int LA147_0 = input.LA(1);

            if ( (LA147_0==UNAME) ) {
                alt147=1;
            }
            switch (alt147) {
                case 1 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2085:65: namefrag
                    {
                    pushFollow(FOLLOW_namefrag_in_urlfrag7955);
                    namefrag391=namefrag();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, namefrag391.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (PythonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException re) {
            errorHandler.reportError(this, re);
            errorHandler.recover(this, input,re);
            retval.tree = (PythonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "urlfrag"

    public static class namefrag_return extends ParserRuleReturnScope {
        PythonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "namefrag"
    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2088:1: namefrag : UNAME tempuname= NAME ( pwordfrag )? ;
    public final PythonParser.namefrag_return namefrag() throws RecognitionException {
        PythonParser.namefrag_return retval = new PythonParser.namefrag_return();
        retval.start = input.LT(1);

        PythonTree root_0 = null;

        Token tempuname=null;
        Token UNAME392=null;
        PythonParser.pwordfrag_return pwordfrag393 = null;


        PythonTree tempuname_tree=null;
        PythonTree UNAME392_tree=null;

        try {
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2089:2: ( UNAME tempuname= NAME ( pwordfrag )? )
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2090:2: UNAME tempuname= NAME ( pwordfrag )?
            {
            root_0 = (PythonTree)adaptor.nil();

            UNAME392=(Token)match(input,UNAME,FOLLOW_UNAME_in_namefrag7969); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            UNAME392_tree = (PythonTree)adaptor.create(UNAME392);
            adaptor.addChild(root_0, UNAME392_tree);
            }
            tempuname=(Token)match(input,NAME,FOLLOW_NAME_in_namefrag7973); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            tempuname_tree = (PythonTree)adaptor.create(tempuname);
            adaptor.addChild(root_0, tempuname_tree);
            }
            if ( state.backtracking==0 ) {
              ((connection_scope)connection_stack.peek()).uname =(tempuname!=null?tempuname.getText():null);
            }
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2090:61: ( pwordfrag )?
            int alt148=2;
            int LA148_0 = input.LA(1);

            if ( (LA148_0==PWORD) ) {
                alt148=1;
            }
            switch (alt148) {
                case 1 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2090:61: pwordfrag
                    {
                    pushFollow(FOLLOW_pwordfrag_in_namefrag7977);
                    pwordfrag393=pwordfrag();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, pwordfrag393.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (PythonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException re) {
            errorHandler.reportError(this, re);
            errorHandler.recover(this, input,re);
            retval.tree = (PythonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "namefrag"

    public static class pwordfrag_return extends ParserRuleReturnScope {
        PythonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "pwordfrag"
    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2093:10: fragment pwordfrag : PWORD temppword= NAME ( contypefrag )? ;
    public final PythonParser.pwordfrag_return pwordfrag() throws RecognitionException {
        PythonParser.pwordfrag_return retval = new PythonParser.pwordfrag_return();
        retval.start = input.LT(1);

        PythonTree root_0 = null;

        Token temppword=null;
        Token PWORD394=null;
        PythonParser.contypefrag_return contypefrag395 = null;


        PythonTree temppword_tree=null;
        PythonTree PWORD394_tree=null;

        try {
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2094:2: ( PWORD temppword= NAME ( contypefrag )? )
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2095:2: PWORD temppword= NAME ( contypefrag )?
            {
            root_0 = (PythonTree)adaptor.nil();

            PWORD394=(Token)match(input,PWORD,FOLLOW_PWORD_in_pwordfrag7992); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            PWORD394_tree = (PythonTree)adaptor.create(PWORD394);
            adaptor.addChild(root_0, PWORD394_tree);
            }
            temppword=(Token)match(input,NAME,FOLLOW_NAME_in_pwordfrag7996); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            temppword_tree = (PythonTree)adaptor.create(temppword);
            adaptor.addChild(root_0, temppword_tree);
            }
            if ( state.backtracking==0 ) {
              ((connection_scope)connection_stack.peek()).pword =(temppword!=null?temppword.getText():null);
            }
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2095:61: ( contypefrag )?
            int alt149=2;
            int LA149_0 = input.LA(1);

            if ( (LA149_0==CONTYPE) ) {
                alt149=1;
            }
            switch (alt149) {
                case 1 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2095:61: contypefrag
                    {
                    pushFollow(FOLLOW_contypefrag_in_pwordfrag8000);
                    contypefrag395=contypefrag();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, contypefrag395.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (PythonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException re) {
            errorHandler.reportError(this, re);
            errorHandler.recover(this, input,re);
            retval.tree = (PythonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "pwordfrag"

    public static class contypefrag_return extends ParserRuleReturnScope {
        PythonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "contypefrag"
    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2098:1: contypefrag : CONTYPE tempcontype= NAME ;
    public final PythonParser.contypefrag_return contypefrag() throws RecognitionException {
        PythonParser.contypefrag_return retval = new PythonParser.contypefrag_return();
        retval.start = input.LT(1);

        PythonTree root_0 = null;

        Token tempcontype=null;
        Token CONTYPE396=null;

        PythonTree tempcontype_tree=null;
        PythonTree CONTYPE396_tree=null;

        try {
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2099:2: ( CONTYPE tempcontype= NAME )
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2100:2: CONTYPE tempcontype= NAME
            {
            root_0 = (PythonTree)adaptor.nil();

            CONTYPE396=(Token)match(input,CONTYPE,FOLLOW_CONTYPE_in_contypefrag8014); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            CONTYPE396_tree = (PythonTree)adaptor.create(CONTYPE396);
            adaptor.addChild(root_0, CONTYPE396_tree);
            }
            tempcontype=(Token)match(input,NAME,FOLLOW_NAME_in_contypefrag8018); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            tempcontype_tree = (PythonTree)adaptor.create(tempcontype);
            adaptor.addChild(root_0, tempcontype_tree);
            }
            if ( state.backtracking==0 ) {
              ((connection_scope)connection_stack.peek()).contype =(tempcontype!=null?tempcontype.getText():null);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (PythonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException re) {
            errorHandler.reportError(this, re);
            errorHandler.recover(this, input,re);
            retval.tree = (PythonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "contypefrag"

    public static class sqlquery_return extends ParserRuleReturnScope {
        PythonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "sqlquery"
    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2103:1: sqlquery : s1= sqlqueryfrag ( sqlwhereclause )? ( sqlorderbyclause )? ;
    public final PythonParser.sqlquery_return sqlquery() throws RecognitionException {
        PythonParser.sqlquery_return retval = new PythonParser.sqlquery_return();
        retval.start = input.LT(1);

        PythonTree root_0 = null;

        PythonParser.sqlqueryfrag_return s1 = null;

        PythonParser.sqlwhereclause_return sqlwhereclause397 = null;

        PythonParser.sqlorderbyclause_return sqlorderbyclause398 = null;



        try {
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2104:5: (s1= sqlqueryfrag ( sqlwhereclause )? ( sqlorderbyclause )? )
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2104:7: s1= sqlqueryfrag ( sqlwhereclause )? ( sqlorderbyclause )?
            {
            root_0 = (PythonTree)adaptor.nil();

            pushFollow(FOLLOW_sqlqueryfrag_in_sqlquery8038);
            s1=sqlqueryfrag();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, s1.getTree());
            if ( state.backtracking==0 ) {
              ((sql_stmt_scope)sql_stmt_stack.peek()).temp+=(s1!=null?input.toString(s1.start,s1.stop):null)+" ";
            }
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2105:9: ( sqlwhereclause )?
            int alt150=2;
            int LA150_0 = input.LA(1);

            if ( (LA150_0==WHERE) ) {
                alt150=1;
            }
            switch (alt150) {
                case 1 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2105:9: sqlwhereclause
                    {
                    pushFollow(FOLLOW_sqlwhereclause_in_sqlquery8050);
                    sqlwhereclause397=sqlwhereclause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, sqlwhereclause397.getTree());

                    }
                    break;

            }

            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2106:9: ( sqlorderbyclause )?
            int alt151=2;
            int LA151_0 = input.LA(1);

            if ( (LA151_0==ORDER) ) {
                alt151=1;
            }
            switch (alt151) {
                case 1 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2106:9: sqlorderbyclause
                    {
                    pushFollow(FOLLOW_sqlorderbyclause_in_sqlquery8061);
                    sqlorderbyclause398=sqlorderbyclause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, sqlorderbyclause398.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (PythonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException re) {
            errorHandler.reportError(this, re);
            errorHandler.recover(this, input,re);
            retval.tree = (PythonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "sqlquery"

    public static class sqlqueryfrag_return extends ParserRuleReturnScope {
        PythonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "sqlqueryfrag"
    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2109:1: sqlqueryfrag : ( 'TOP' )? ( STAR | ( NAME DOT )? NAME ( ( CAPSAS )? NAME )? ( COMMA ( NAME DOT )? NAME ( ( CAPSAS )? NAME )? )* | AGGREG ( NAME DOT )? NAME RPAREN ( CAPSAS NAME )? ) CAPSFROM ( NAME ( CAPSAS )? )? NAME ( COMMA ( NAME ( CAPSAS )? )? NAME )* ( sqljoinfrag )? ;
    public final PythonParser.sqlqueryfrag_return sqlqueryfrag() throws RecognitionException {
        PythonParser.sqlqueryfrag_return retval = new PythonParser.sqlqueryfrag_return();
        retval.start = input.LT(1);

        PythonTree root_0 = null;

        Token string_literal399=null;
        Token STAR400=null;
        Token NAME401=null;
        Token DOT402=null;
        Token NAME403=null;
        Token CAPSAS404=null;
        Token NAME405=null;
        Token COMMA406=null;
        Token NAME407=null;
        Token DOT408=null;
        Token NAME409=null;
        Token CAPSAS410=null;
        Token NAME411=null;
        Token AGGREG412=null;
        Token NAME413=null;
        Token DOT414=null;
        Token NAME415=null;
        Token RPAREN416=null;
        Token CAPSAS417=null;
        Token NAME418=null;
        Token CAPSFROM419=null;
        Token NAME420=null;
        Token CAPSAS421=null;
        Token NAME422=null;
        Token COMMA423=null;
        Token NAME424=null;
        Token CAPSAS425=null;
        Token NAME426=null;
        PythonParser.sqljoinfrag_return sqljoinfrag427 = null;


        PythonTree string_literal399_tree=null;
        PythonTree STAR400_tree=null;
        PythonTree NAME401_tree=null;
        PythonTree DOT402_tree=null;
        PythonTree NAME403_tree=null;
        PythonTree CAPSAS404_tree=null;
        PythonTree NAME405_tree=null;
        PythonTree COMMA406_tree=null;
        PythonTree NAME407_tree=null;
        PythonTree DOT408_tree=null;
        PythonTree NAME409_tree=null;
        PythonTree CAPSAS410_tree=null;
        PythonTree NAME411_tree=null;
        PythonTree AGGREG412_tree=null;
        PythonTree NAME413_tree=null;
        PythonTree DOT414_tree=null;
        PythonTree NAME415_tree=null;
        PythonTree RPAREN416_tree=null;
        PythonTree CAPSAS417_tree=null;
        PythonTree NAME418_tree=null;
        PythonTree CAPSFROM419_tree=null;
        PythonTree NAME420_tree=null;
        PythonTree CAPSAS421_tree=null;
        PythonTree NAME422_tree=null;
        PythonTree COMMA423_tree=null;
        PythonTree NAME424_tree=null;
        PythonTree CAPSAS425_tree=null;
        PythonTree NAME426_tree=null;

        try {
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2110:2: ( ( 'TOP' )? ( STAR | ( NAME DOT )? NAME ( ( CAPSAS )? NAME )? ( COMMA ( NAME DOT )? NAME ( ( CAPSAS )? NAME )? )* | AGGREG ( NAME DOT )? NAME RPAREN ( CAPSAS NAME )? ) CAPSFROM ( NAME ( CAPSAS )? )? NAME ( COMMA ( NAME ( CAPSAS )? )? NAME )* ( sqljoinfrag )? )
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2110:5: ( 'TOP' )? ( STAR | ( NAME DOT )? NAME ( ( CAPSAS )? NAME )? ( COMMA ( NAME DOT )? NAME ( ( CAPSAS )? NAME )? )* | AGGREG ( NAME DOT )? NAME RPAREN ( CAPSAS NAME )? ) CAPSFROM ( NAME ( CAPSAS )? )? NAME ( COMMA ( NAME ( CAPSAS )? )? NAME )* ( sqljoinfrag )?
            {
            root_0 = (PythonTree)adaptor.nil();

            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2110:5: ( 'TOP' )?
            int alt152=2;
            int LA152_0 = input.LA(1);

            if ( (LA152_0==188) ) {
                alt152=1;
            }
            switch (alt152) {
                case 1 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2110:6: 'TOP'
                    {
                    string_literal399=(Token)match(input,188,FOLLOW_188_in_sqlqueryfrag8079); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    string_literal399_tree = (PythonTree)adaptor.create(string_literal399);
                    adaptor.addChild(root_0, string_literal399_tree);
                    }

                    }
                    break;

            }

            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2110:14: ( STAR | ( NAME DOT )? NAME ( ( CAPSAS )? NAME )? ( COMMA ( NAME DOT )? NAME ( ( CAPSAS )? NAME )? )* | AGGREG ( NAME DOT )? NAME RPAREN ( CAPSAS NAME )? )
            int alt162=3;
            switch ( input.LA(1) ) {
            case STAR:
                {
                alt162=1;
                }
                break;
            case NAME:
                {
                alt162=2;
                }
                break;
            case AGGREG:
                {
                alt162=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 162, 0, input);

                throw nvae;
            }

            switch (alt162) {
                case 1 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2110:16: STAR
                    {
                    STAR400=(Token)match(input,STAR,FOLLOW_STAR_in_sqlqueryfrag8085); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STAR400_tree = (PythonTree)adaptor.create(STAR400);
                    adaptor.addChild(root_0, STAR400_tree);
                    }

                    }
                    break;
                case 2 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2110:23: ( NAME DOT )? NAME ( ( CAPSAS )? NAME )? ( COMMA ( NAME DOT )? NAME ( ( CAPSAS )? NAME )? )*
                    {
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2110:23: ( NAME DOT )?
                    int alt153=2;
                    int LA153_0 = input.LA(1);

                    if ( (LA153_0==NAME) ) {
                        int LA153_1 = input.LA(2);

                        if ( (LA153_1==DOT) ) {
                            alt153=1;
                        }
                    }
                    switch (alt153) {
                        case 1 :
                            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2110:24: NAME DOT
                            {
                            NAME401=(Token)match(input,NAME,FOLLOW_NAME_in_sqlqueryfrag8090); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            NAME401_tree = (PythonTree)adaptor.create(NAME401);
                            adaptor.addChild(root_0, NAME401_tree);
                            }
                            DOT402=(Token)match(input,DOT,FOLLOW_DOT_in_sqlqueryfrag8092); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            DOT402_tree = (PythonTree)adaptor.create(DOT402);
                            adaptor.addChild(root_0, DOT402_tree);
                            }

                            }
                            break;

                    }

                    NAME403=(Token)match(input,NAME,FOLLOW_NAME_in_sqlqueryfrag8096); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NAME403_tree = (PythonTree)adaptor.create(NAME403);
                    adaptor.addChild(root_0, NAME403_tree);
                    }
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2110:40: ( ( CAPSAS )? NAME )?
                    int alt155=2;
                    int LA155_0 = input.LA(1);

                    if ( (LA155_0==NAME||LA155_0==CAPSAS) ) {
                        alt155=1;
                    }
                    switch (alt155) {
                        case 1 :
                            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2110:41: ( CAPSAS )? NAME
                            {
                            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2110:41: ( CAPSAS )?
                            int alt154=2;
                            int LA154_0 = input.LA(1);

                            if ( (LA154_0==CAPSAS) ) {
                                alt154=1;
                            }
                            switch (alt154) {
                                case 1 :
                                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2110:41: CAPSAS
                                    {
                                    CAPSAS404=(Token)match(input,CAPSAS,FOLLOW_CAPSAS_in_sqlqueryfrag8099); if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                    CAPSAS404_tree = (PythonTree)adaptor.create(CAPSAS404);
                                    adaptor.addChild(root_0, CAPSAS404_tree);
                                    }

                                    }
                                    break;

                            }

                            NAME405=(Token)match(input,NAME,FOLLOW_NAME_in_sqlqueryfrag8102); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            NAME405_tree = (PythonTree)adaptor.create(NAME405);
                            adaptor.addChild(root_0, NAME405_tree);
                            }

                            }
                            break;

                    }

                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2110:56: ( COMMA ( NAME DOT )? NAME ( ( CAPSAS )? NAME )? )*
                    loop159:
                    do {
                        int alt159=2;
                        int LA159_0 = input.LA(1);

                        if ( (LA159_0==COMMA) ) {
                            alt159=1;
                        }


                        switch (alt159) {
                    	case 1 :
                    	    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2110:58: COMMA ( NAME DOT )? NAME ( ( CAPSAS )? NAME )?
                    	    {
                    	    COMMA406=(Token)match(input,COMMA,FOLLOW_COMMA_in_sqlqueryfrag8108); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    COMMA406_tree = (PythonTree)adaptor.create(COMMA406);
                    	    adaptor.addChild(root_0, COMMA406_tree);
                    	    }
                    	    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2110:64: ( NAME DOT )?
                    	    int alt156=2;
                    	    int LA156_0 = input.LA(1);

                    	    if ( (LA156_0==NAME) ) {
                    	        int LA156_1 = input.LA(2);

                    	        if ( (LA156_1==DOT) ) {
                    	            alt156=1;
                    	        }
                    	    }
                    	    switch (alt156) {
                    	        case 1 :
                    	            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2110:65: NAME DOT
                    	            {
                    	            NAME407=(Token)match(input,NAME,FOLLOW_NAME_in_sqlqueryfrag8111); if (state.failed) return retval;
                    	            if ( state.backtracking==0 ) {
                    	            NAME407_tree = (PythonTree)adaptor.create(NAME407);
                    	            adaptor.addChild(root_0, NAME407_tree);
                    	            }
                    	            DOT408=(Token)match(input,DOT,FOLLOW_DOT_in_sqlqueryfrag8113); if (state.failed) return retval;
                    	            if ( state.backtracking==0 ) {
                    	            DOT408_tree = (PythonTree)adaptor.create(DOT408);
                    	            adaptor.addChild(root_0, DOT408_tree);
                    	            }

                    	            }
                    	            break;

                    	    }

                    	    NAME409=(Token)match(input,NAME,FOLLOW_NAME_in_sqlqueryfrag8117); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    NAME409_tree = (PythonTree)adaptor.create(NAME409);
                    	    adaptor.addChild(root_0, NAME409_tree);
                    	    }
                    	    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2110:81: ( ( CAPSAS )? NAME )?
                    	    int alt158=2;
                    	    int LA158_0 = input.LA(1);

                    	    if ( (LA158_0==NAME||LA158_0==CAPSAS) ) {
                    	        alt158=1;
                    	    }
                    	    switch (alt158) {
                    	        case 1 :
                    	            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2110:82: ( CAPSAS )? NAME
                    	            {
                    	            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2110:82: ( CAPSAS )?
                    	            int alt157=2;
                    	            int LA157_0 = input.LA(1);

                    	            if ( (LA157_0==CAPSAS) ) {
                    	                alt157=1;
                    	            }
                    	            switch (alt157) {
                    	                case 1 :
                    	                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2110:82: CAPSAS
                    	                    {
                    	                    CAPSAS410=(Token)match(input,CAPSAS,FOLLOW_CAPSAS_in_sqlqueryfrag8120); if (state.failed) return retval;
                    	                    if ( state.backtracking==0 ) {
                    	                    CAPSAS410_tree = (PythonTree)adaptor.create(CAPSAS410);
                    	                    adaptor.addChild(root_0, CAPSAS410_tree);
                    	                    }

                    	                    }
                    	                    break;

                    	            }

                    	            NAME411=(Token)match(input,NAME,FOLLOW_NAME_in_sqlqueryfrag8123); if (state.failed) return retval;
                    	            if ( state.backtracking==0 ) {
                    	            NAME411_tree = (PythonTree)adaptor.create(NAME411);
                    	            adaptor.addChild(root_0, NAME411_tree);
                    	            }

                    	            }
                    	            break;

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop159;
                        }
                    } while (true);


                    }
                    break;
                case 3 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2110:101: AGGREG ( NAME DOT )? NAME RPAREN ( CAPSAS NAME )?
                    {
                    AGGREG412=(Token)match(input,AGGREG,FOLLOW_AGGREG_in_sqlqueryfrag8131); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    AGGREG412_tree = (PythonTree)adaptor.create(AGGREG412);
                    adaptor.addChild(root_0, AGGREG412_tree);
                    }
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2110:108: ( NAME DOT )?
                    int alt160=2;
                    int LA160_0 = input.LA(1);

                    if ( (LA160_0==NAME) ) {
                        int LA160_1 = input.LA(2);

                        if ( (LA160_1==DOT) ) {
                            alt160=1;
                        }
                    }
                    switch (alt160) {
                        case 1 :
                            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2110:109: NAME DOT
                            {
                            NAME413=(Token)match(input,NAME,FOLLOW_NAME_in_sqlqueryfrag8134); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            NAME413_tree = (PythonTree)adaptor.create(NAME413);
                            adaptor.addChild(root_0, NAME413_tree);
                            }
                            DOT414=(Token)match(input,DOT,FOLLOW_DOT_in_sqlqueryfrag8136); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            DOT414_tree = (PythonTree)adaptor.create(DOT414);
                            adaptor.addChild(root_0, DOT414_tree);
                            }

                            }
                            break;

                    }

                    NAME415=(Token)match(input,NAME,FOLLOW_NAME_in_sqlqueryfrag8140); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NAME415_tree = (PythonTree)adaptor.create(NAME415);
                    adaptor.addChild(root_0, NAME415_tree);
                    }
                    RPAREN416=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_sqlqueryfrag8142); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RPAREN416_tree = (PythonTree)adaptor.create(RPAREN416);
                    adaptor.addChild(root_0, RPAREN416_tree);
                    }
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2110:132: ( CAPSAS NAME )?
                    int alt161=2;
                    int LA161_0 = input.LA(1);

                    if ( (LA161_0==CAPSAS) ) {
                        alt161=1;
                    }
                    switch (alt161) {
                        case 1 :
                            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2110:133: CAPSAS NAME
                            {
                            CAPSAS417=(Token)match(input,CAPSAS,FOLLOW_CAPSAS_in_sqlqueryfrag8145); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            CAPSAS417_tree = (PythonTree)adaptor.create(CAPSAS417);
                            adaptor.addChild(root_0, CAPSAS417_tree);
                            }
                            NAME418=(Token)match(input,NAME,FOLLOW_NAME_in_sqlqueryfrag8147); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            NAME418_tree = (PythonTree)adaptor.create(NAME418);
                            adaptor.addChild(root_0, NAME418_tree);
                            }

                            }
                            break;

                    }


                    }
                    break;

            }

            CAPSFROM419=(Token)match(input,CAPSFROM,FOLLOW_CAPSFROM_in_sqlqueryfrag8153); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            CAPSFROM419_tree = (PythonTree)adaptor.create(CAPSFROM419);
            adaptor.addChild(root_0, CAPSFROM419_tree);
            }
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2110:158: ( NAME ( CAPSAS )? )?
            int alt164=2;
            int LA164_0 = input.LA(1);

            if ( (LA164_0==NAME) ) {
                int LA164_1 = input.LA(2);

                if ( (LA164_1==NAME||LA164_1==CAPSAS) ) {
                    alt164=1;
                }
            }
            switch (alt164) {
                case 1 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2110:159: NAME ( CAPSAS )?
                    {
                    NAME420=(Token)match(input,NAME,FOLLOW_NAME_in_sqlqueryfrag8156); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NAME420_tree = (PythonTree)adaptor.create(NAME420);
                    adaptor.addChild(root_0, NAME420_tree);
                    }
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2110:164: ( CAPSAS )?
                    int alt163=2;
                    int LA163_0 = input.LA(1);

                    if ( (LA163_0==CAPSAS) ) {
                        alt163=1;
                    }
                    switch (alt163) {
                        case 1 :
                            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2110:164: CAPSAS
                            {
                            CAPSAS421=(Token)match(input,CAPSAS,FOLLOW_CAPSAS_in_sqlqueryfrag8158); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            CAPSAS421_tree = (PythonTree)adaptor.create(CAPSAS421);
                            adaptor.addChild(root_0, CAPSAS421_tree);
                            }

                            }
                            break;

                    }


                    }
                    break;

            }

            NAME422=(Token)match(input,NAME,FOLLOW_NAME_in_sqlqueryfrag8163); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            NAME422_tree = (PythonTree)adaptor.create(NAME422);
            adaptor.addChild(root_0, NAME422_tree);
            }
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2110:179: ( COMMA ( NAME ( CAPSAS )? )? NAME )*
            loop167:
            do {
                int alt167=2;
                int LA167_0 = input.LA(1);

                if ( (LA167_0==COMMA) ) {
                    alt167=1;
                }


                switch (alt167) {
            	case 1 :
            	    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2110:181: COMMA ( NAME ( CAPSAS )? )? NAME
            	    {
            	    COMMA423=(Token)match(input,COMMA,FOLLOW_COMMA_in_sqlqueryfrag8167); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    COMMA423_tree = (PythonTree)adaptor.create(COMMA423);
            	    adaptor.addChild(root_0, COMMA423_tree);
            	    }
            	    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2110:187: ( NAME ( CAPSAS )? )?
            	    int alt166=2;
            	    int LA166_0 = input.LA(1);

            	    if ( (LA166_0==NAME) ) {
            	        int LA166_1 = input.LA(2);

            	        if ( (LA166_1==NAME||LA166_1==CAPSAS) ) {
            	            alt166=1;
            	        }
            	    }
            	    switch (alt166) {
            	        case 1 :
            	            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2110:188: NAME ( CAPSAS )?
            	            {
            	            NAME424=(Token)match(input,NAME,FOLLOW_NAME_in_sqlqueryfrag8170); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            NAME424_tree = (PythonTree)adaptor.create(NAME424);
            	            adaptor.addChild(root_0, NAME424_tree);
            	            }
            	            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2110:193: ( CAPSAS )?
            	            int alt165=2;
            	            int LA165_0 = input.LA(1);

            	            if ( (LA165_0==CAPSAS) ) {
            	                alt165=1;
            	            }
            	            switch (alt165) {
            	                case 1 :
            	                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2110:193: CAPSAS
            	                    {
            	                    CAPSAS425=(Token)match(input,CAPSAS,FOLLOW_CAPSAS_in_sqlqueryfrag8172); if (state.failed) return retval;
            	                    if ( state.backtracking==0 ) {
            	                    CAPSAS425_tree = (PythonTree)adaptor.create(CAPSAS425);
            	                    adaptor.addChild(root_0, CAPSAS425_tree);
            	                    }

            	                    }
            	                    break;

            	            }


            	            }
            	            break;

            	    }

            	    NAME426=(Token)match(input,NAME,FOLLOW_NAME_in_sqlqueryfrag8177); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    NAME426_tree = (PythonTree)adaptor.create(NAME426);
            	    adaptor.addChild(root_0, NAME426_tree);
            	    }

            	    }
            	    break;

            	default :
            	    break loop167;
                }
            } while (true);

            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2110:210: ( sqljoinfrag )?
            int alt168=2;
            int LA168_0 = input.LA(1);

            if ( (LA168_0==JOIN) ) {
                alt168=1;
            }
            switch (alt168) {
                case 1 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2110:211: sqljoinfrag
                    {
                    pushFollow(FOLLOW_sqljoinfrag_in_sqlqueryfrag8182);
                    sqljoinfrag427=sqljoinfrag();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, sqljoinfrag427.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (PythonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException re) {
            errorHandler.reportError(this, re);
            errorHandler.recover(this, input,re);
            retval.tree = (PythonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "sqlqueryfrag"

    public static class sqljoinfrag_return extends ParserRuleReturnScope {
        PythonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "sqljoinfrag"
    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2113:1: sqljoinfrag : JOIN ( NAME ( CAPSAS )? )? NAME ON NAME DOT NAME ASSIGN NAME DOT NAME ( JOIN ( NAME ( CAPSAS )? )? NAME ON NAME DOT NAME ASSIGN NAME DOT NAME )* ;
    public final PythonParser.sqljoinfrag_return sqljoinfrag() throws RecognitionException {
        PythonParser.sqljoinfrag_return retval = new PythonParser.sqljoinfrag_return();
        retval.start = input.LT(1);

        PythonTree root_0 = null;

        Token JOIN428=null;
        Token NAME429=null;
        Token CAPSAS430=null;
        Token NAME431=null;
        Token ON432=null;
        Token NAME433=null;
        Token DOT434=null;
        Token NAME435=null;
        Token ASSIGN436=null;
        Token NAME437=null;
        Token DOT438=null;
        Token NAME439=null;
        Token JOIN440=null;
        Token NAME441=null;
        Token CAPSAS442=null;
        Token NAME443=null;
        Token ON444=null;
        Token NAME445=null;
        Token DOT446=null;
        Token NAME447=null;
        Token ASSIGN448=null;
        Token NAME449=null;
        Token DOT450=null;
        Token NAME451=null;

        PythonTree JOIN428_tree=null;
        PythonTree NAME429_tree=null;
        PythonTree CAPSAS430_tree=null;
        PythonTree NAME431_tree=null;
        PythonTree ON432_tree=null;
        PythonTree NAME433_tree=null;
        PythonTree DOT434_tree=null;
        PythonTree NAME435_tree=null;
        PythonTree ASSIGN436_tree=null;
        PythonTree NAME437_tree=null;
        PythonTree DOT438_tree=null;
        PythonTree NAME439_tree=null;
        PythonTree JOIN440_tree=null;
        PythonTree NAME441_tree=null;
        PythonTree CAPSAS442_tree=null;
        PythonTree NAME443_tree=null;
        PythonTree ON444_tree=null;
        PythonTree NAME445_tree=null;
        PythonTree DOT446_tree=null;
        PythonTree NAME447_tree=null;
        PythonTree ASSIGN448_tree=null;
        PythonTree NAME449_tree=null;
        PythonTree DOT450_tree=null;
        PythonTree NAME451_tree=null;

        try {
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2114:9: ( JOIN ( NAME ( CAPSAS )? )? NAME ON NAME DOT NAME ASSIGN NAME DOT NAME ( JOIN ( NAME ( CAPSAS )? )? NAME ON NAME DOT NAME ASSIGN NAME DOT NAME )* )
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2114:11: JOIN ( NAME ( CAPSAS )? )? NAME ON NAME DOT NAME ASSIGN NAME DOT NAME ( JOIN ( NAME ( CAPSAS )? )? NAME ON NAME DOT NAME ASSIGN NAME DOT NAME )*
            {
            root_0 = (PythonTree)adaptor.nil();

            JOIN428=(Token)match(input,JOIN,FOLLOW_JOIN_in_sqljoinfrag8204); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            JOIN428_tree = (PythonTree)adaptor.create(JOIN428);
            adaptor.addChild(root_0, JOIN428_tree);
            }
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2114:16: ( NAME ( CAPSAS )? )?
            int alt170=2;
            int LA170_0 = input.LA(1);

            if ( (LA170_0==NAME) ) {
                int LA170_1 = input.LA(2);

                if ( (LA170_1==NAME||LA170_1==CAPSAS) ) {
                    alt170=1;
                }
            }
            switch (alt170) {
                case 1 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2114:17: NAME ( CAPSAS )?
                    {
                    NAME429=(Token)match(input,NAME,FOLLOW_NAME_in_sqljoinfrag8207); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NAME429_tree = (PythonTree)adaptor.create(NAME429);
                    adaptor.addChild(root_0, NAME429_tree);
                    }
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2114:22: ( CAPSAS )?
                    int alt169=2;
                    int LA169_0 = input.LA(1);

                    if ( (LA169_0==CAPSAS) ) {
                        alt169=1;
                    }
                    switch (alt169) {
                        case 1 :
                            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2114:22: CAPSAS
                            {
                            CAPSAS430=(Token)match(input,CAPSAS,FOLLOW_CAPSAS_in_sqljoinfrag8209); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            CAPSAS430_tree = (PythonTree)adaptor.create(CAPSAS430);
                            adaptor.addChild(root_0, CAPSAS430_tree);
                            }

                            }
                            break;

                    }


                    }
                    break;

            }

            NAME431=(Token)match(input,NAME,FOLLOW_NAME_in_sqljoinfrag8214); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            NAME431_tree = (PythonTree)adaptor.create(NAME431);
            adaptor.addChild(root_0, NAME431_tree);
            }
            ON432=(Token)match(input,ON,FOLLOW_ON_in_sqljoinfrag8216); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ON432_tree = (PythonTree)adaptor.create(ON432);
            adaptor.addChild(root_0, ON432_tree);
            }
            NAME433=(Token)match(input,NAME,FOLLOW_NAME_in_sqljoinfrag8218); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            NAME433_tree = (PythonTree)adaptor.create(NAME433);
            adaptor.addChild(root_0, NAME433_tree);
            }
            DOT434=(Token)match(input,DOT,FOLLOW_DOT_in_sqljoinfrag8220); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            DOT434_tree = (PythonTree)adaptor.create(DOT434);
            adaptor.addChild(root_0, DOT434_tree);
            }
            NAME435=(Token)match(input,NAME,FOLLOW_NAME_in_sqljoinfrag8222); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            NAME435_tree = (PythonTree)adaptor.create(NAME435);
            adaptor.addChild(root_0, NAME435_tree);
            }
            ASSIGN436=(Token)match(input,ASSIGN,FOLLOW_ASSIGN_in_sqljoinfrag8224); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ASSIGN436_tree = (PythonTree)adaptor.create(ASSIGN436);
            adaptor.addChild(root_0, ASSIGN436_tree);
            }
            NAME437=(Token)match(input,NAME,FOLLOW_NAME_in_sqljoinfrag8226); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            NAME437_tree = (PythonTree)adaptor.create(NAME437);
            adaptor.addChild(root_0, NAME437_tree);
            }
            DOT438=(Token)match(input,DOT,FOLLOW_DOT_in_sqljoinfrag8228); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            DOT438_tree = (PythonTree)adaptor.create(DOT438);
            adaptor.addChild(root_0, DOT438_tree);
            }
            NAME439=(Token)match(input,NAME,FOLLOW_NAME_in_sqljoinfrag8230); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            NAME439_tree = (PythonTree)adaptor.create(NAME439);
            adaptor.addChild(root_0, NAME439_tree);
            }
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2114:75: ( JOIN ( NAME ( CAPSAS )? )? NAME ON NAME DOT NAME ASSIGN NAME DOT NAME )*
            loop173:
            do {
                int alt173=2;
                int LA173_0 = input.LA(1);

                if ( (LA173_0==JOIN) ) {
                    alt173=1;
                }


                switch (alt173) {
            	case 1 :
            	    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2114:76: JOIN ( NAME ( CAPSAS )? )? NAME ON NAME DOT NAME ASSIGN NAME DOT NAME
            	    {
            	    JOIN440=(Token)match(input,JOIN,FOLLOW_JOIN_in_sqljoinfrag8233); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    JOIN440_tree = (PythonTree)adaptor.create(JOIN440);
            	    adaptor.addChild(root_0, JOIN440_tree);
            	    }
            	    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2114:81: ( NAME ( CAPSAS )? )?
            	    int alt172=2;
            	    int LA172_0 = input.LA(1);

            	    if ( (LA172_0==NAME) ) {
            	        int LA172_1 = input.LA(2);

            	        if ( (LA172_1==NAME||LA172_1==CAPSAS) ) {
            	            alt172=1;
            	        }
            	    }
            	    switch (alt172) {
            	        case 1 :
            	            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2114:82: NAME ( CAPSAS )?
            	            {
            	            NAME441=(Token)match(input,NAME,FOLLOW_NAME_in_sqljoinfrag8236); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            NAME441_tree = (PythonTree)adaptor.create(NAME441);
            	            adaptor.addChild(root_0, NAME441_tree);
            	            }
            	            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2114:87: ( CAPSAS )?
            	            int alt171=2;
            	            int LA171_0 = input.LA(1);

            	            if ( (LA171_0==CAPSAS) ) {
            	                alt171=1;
            	            }
            	            switch (alt171) {
            	                case 1 :
            	                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2114:87: CAPSAS
            	                    {
            	                    CAPSAS442=(Token)match(input,CAPSAS,FOLLOW_CAPSAS_in_sqljoinfrag8238); if (state.failed) return retval;
            	                    if ( state.backtracking==0 ) {
            	                    CAPSAS442_tree = (PythonTree)adaptor.create(CAPSAS442);
            	                    adaptor.addChild(root_0, CAPSAS442_tree);
            	                    }

            	                    }
            	                    break;

            	            }


            	            }
            	            break;

            	    }

            	    NAME443=(Token)match(input,NAME,FOLLOW_NAME_in_sqljoinfrag8243); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    NAME443_tree = (PythonTree)adaptor.create(NAME443);
            	    adaptor.addChild(root_0, NAME443_tree);
            	    }
            	    ON444=(Token)match(input,ON,FOLLOW_ON_in_sqljoinfrag8245); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    ON444_tree = (PythonTree)adaptor.create(ON444);
            	    adaptor.addChild(root_0, ON444_tree);
            	    }
            	    NAME445=(Token)match(input,NAME,FOLLOW_NAME_in_sqljoinfrag8247); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    NAME445_tree = (PythonTree)adaptor.create(NAME445);
            	    adaptor.addChild(root_0, NAME445_tree);
            	    }
            	    DOT446=(Token)match(input,DOT,FOLLOW_DOT_in_sqljoinfrag8249); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    DOT446_tree = (PythonTree)adaptor.create(DOT446);
            	    adaptor.addChild(root_0, DOT446_tree);
            	    }
            	    NAME447=(Token)match(input,NAME,FOLLOW_NAME_in_sqljoinfrag8251); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    NAME447_tree = (PythonTree)adaptor.create(NAME447);
            	    adaptor.addChild(root_0, NAME447_tree);
            	    }
            	    ASSIGN448=(Token)match(input,ASSIGN,FOLLOW_ASSIGN_in_sqljoinfrag8253); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    ASSIGN448_tree = (PythonTree)adaptor.create(ASSIGN448);
            	    adaptor.addChild(root_0, ASSIGN448_tree);
            	    }
            	    NAME449=(Token)match(input,NAME,FOLLOW_NAME_in_sqljoinfrag8255); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    NAME449_tree = (PythonTree)adaptor.create(NAME449);
            	    adaptor.addChild(root_0, NAME449_tree);
            	    }
            	    DOT450=(Token)match(input,DOT,FOLLOW_DOT_in_sqljoinfrag8257); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    DOT450_tree = (PythonTree)adaptor.create(DOT450);
            	    adaptor.addChild(root_0, DOT450_tree);
            	    }
            	    NAME451=(Token)match(input,NAME,FOLLOW_NAME_in_sqljoinfrag8259); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    NAME451_tree = (PythonTree)adaptor.create(NAME451);
            	    adaptor.addChild(root_0, NAME451_tree);
            	    }

            	    }
            	    break;

            	default :
            	    break loop173;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (PythonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException re) {
            errorHandler.reportError(this, re);
            errorHandler.recover(this, input,re);
            retval.tree = (PythonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "sqljoinfrag"

    public static class sqlorderbyclause_return extends ParserRuleReturnScope {
        PythonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "sqlorderbyclause"
    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2117:1: sqlorderbyclause : s2= sqlorderbyfrag ;
    public final PythonParser.sqlorderbyclause_return sqlorderbyclause() throws RecognitionException {
        PythonParser.sqlorderbyclause_return retval = new PythonParser.sqlorderbyclause_return();
        retval.start = input.LT(1);

        PythonTree root_0 = null;

        PythonParser.sqlorderbyfrag_return s2 = null;



        try {
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2118:9: (s2= sqlorderbyfrag )
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2118:11: s2= sqlorderbyfrag
            {
            root_0 = (PythonTree)adaptor.nil();

            pushFollow(FOLLOW_sqlorderbyfrag_in_sqlorderbyclause8288);
            s2=sqlorderbyfrag();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, s2.getTree());
            if ( state.backtracking==0 ) {
              ((sql_stmt_scope)sql_stmt_stack.peek()).temp+=(s2!=null?input.toString(s2.start,s2.stop):null)+" ";
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (PythonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException re) {
            errorHandler.reportError(this, re);
            errorHandler.recover(this, input,re);
            retval.tree = (PythonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "sqlorderbyclause"

    public static class sqlorderbyfrag_return extends ParserRuleReturnScope {
        PythonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "sqlorderbyfrag"
    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2120:1: sqlorderbyfrag : ORDER BY ( ( NAME DOT )? NAME ( ASCEND | DESCEND )? )+ ;
    public final PythonParser.sqlorderbyfrag_return sqlorderbyfrag() throws RecognitionException {
        PythonParser.sqlorderbyfrag_return retval = new PythonParser.sqlorderbyfrag_return();
        retval.start = input.LT(1);

        PythonTree root_0 = null;

        Token ORDER452=null;
        Token BY453=null;
        Token NAME454=null;
        Token DOT455=null;
        Token NAME456=null;
        Token set457=null;

        PythonTree ORDER452_tree=null;
        PythonTree BY453_tree=null;
        PythonTree NAME454_tree=null;
        PythonTree DOT455_tree=null;
        PythonTree NAME456_tree=null;
        PythonTree set457_tree=null;

        try {
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2121:9: ( ORDER BY ( ( NAME DOT )? NAME ( ASCEND | DESCEND )? )+ )
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2121:11: ORDER BY ( ( NAME DOT )? NAME ( ASCEND | DESCEND )? )+
            {
            root_0 = (PythonTree)adaptor.nil();

            ORDER452=(Token)match(input,ORDER,FOLLOW_ORDER_in_sqlorderbyfrag8314); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ORDER452_tree = (PythonTree)adaptor.create(ORDER452);
            adaptor.addChild(root_0, ORDER452_tree);
            }
            BY453=(Token)match(input,BY,FOLLOW_BY_in_sqlorderbyfrag8316); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            BY453_tree = (PythonTree)adaptor.create(BY453);
            adaptor.addChild(root_0, BY453_tree);
            }
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2121:20: ( ( NAME DOT )? NAME ( ASCEND | DESCEND )? )+
            int cnt176=0;
            loop176:
            do {
                int alt176=2;
                int LA176_0 = input.LA(1);

                if ( (LA176_0==NAME) ) {
                    alt176=1;
                }


                switch (alt176) {
            	case 1 :
            	    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2121:22: ( NAME DOT )? NAME ( ASCEND | DESCEND )?
            	    {
            	    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2121:22: ( NAME DOT )?
            	    int alt174=2;
            	    int LA174_0 = input.LA(1);

            	    if ( (LA174_0==NAME) ) {
            	        int LA174_1 = input.LA(2);

            	        if ( (LA174_1==DOT) ) {
            	            alt174=1;
            	        }
            	    }
            	    switch (alt174) {
            	        case 1 :
            	            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2121:23: NAME DOT
            	            {
            	            NAME454=(Token)match(input,NAME,FOLLOW_NAME_in_sqlorderbyfrag8321); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            NAME454_tree = (PythonTree)adaptor.create(NAME454);
            	            adaptor.addChild(root_0, NAME454_tree);
            	            }
            	            DOT455=(Token)match(input,DOT,FOLLOW_DOT_in_sqlorderbyfrag8323); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            DOT455_tree = (PythonTree)adaptor.create(DOT455);
            	            adaptor.addChild(root_0, DOT455_tree);
            	            }

            	            }
            	            break;

            	    }

            	    NAME456=(Token)match(input,NAME,FOLLOW_NAME_in_sqlorderbyfrag8327); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    NAME456_tree = (PythonTree)adaptor.create(NAME456);
            	    adaptor.addChild(root_0, NAME456_tree);
            	    }
            	    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2121:39: ( ASCEND | DESCEND )?
            	    int alt175=2;
            	    int LA175_0 = input.LA(1);

            	    if ( ((LA175_0>=ASCEND && LA175_0<=DESCEND)) ) {
            	        alt175=1;
            	    }
            	    switch (alt175) {
            	        case 1 :
            	            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:
            	            {
            	            set457=(Token)input.LT(1);
            	            if ( (input.LA(1)>=ASCEND && input.LA(1)<=DESCEND) ) {
            	                input.consume();
            	                if ( state.backtracking==0 ) adaptor.addChild(root_0, (PythonTree)adaptor.create(set457));
            	                state.errorRecovery=false;state.failed=false;
            	            }
            	            else {
            	                if (state.backtracking>0) {state.failed=true; return retval;}
            	                MismatchedSetException mse = new MismatchedSetException(null,input);
            	                throw mse;
            	            }


            	            }
            	            break;

            	    }


            	    }
            	    break;

            	default :
            	    if ( cnt176 >= 1 ) break loop176;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(176, input);
                        throw eee;
                }
                cnt176++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (PythonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException re) {
            errorHandler.reportError(this, re);
            errorHandler.recover(this, input,re);
            retval.tree = (PythonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "sqlorderbyfrag"

    public static class sqlinsert_return extends ParserRuleReturnScope {
        PythonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "sqlinsert"
    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2125:1: sqlinsert : s0a= INTO s0b= NAME (s1= sqlinsertfrag )? sqlexpr (s2= COMMA sqlexpr )* (s3= RPAREN )? ;
    public final PythonParser.sqlinsert_return sqlinsert() throws RecognitionException {
        PythonParser.sqlinsert_return retval = new PythonParser.sqlinsert_return();
        retval.start = input.LT(1);

        PythonTree root_0 = null;

        Token s0a=null;
        Token s0b=null;
        Token s2=null;
        Token s3=null;
        PythonParser.sqlinsertfrag_return s1 = null;

        PythonParser.sqlexpr_return sqlexpr458 = null;

        PythonParser.sqlexpr_return sqlexpr459 = null;


        PythonTree s0a_tree=null;
        PythonTree s0b_tree=null;
        PythonTree s2_tree=null;
        PythonTree s3_tree=null;

        try {
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2126:5: (s0a= INTO s0b= NAME (s1= sqlinsertfrag )? sqlexpr (s2= COMMA sqlexpr )* (s3= RPAREN )? )
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2126:9: s0a= INTO s0b= NAME (s1= sqlinsertfrag )? sqlexpr (s2= COMMA sqlexpr )* (s3= RPAREN )?
            {
            root_0 = (PythonTree)adaptor.nil();

            s0a=(Token)match(input,INTO,FOLLOW_INTO_in_sqlinsert8365); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            s0a_tree = (PythonTree)adaptor.create(s0a);
            adaptor.addChild(root_0, s0a_tree);
            }
            s0b=(Token)match(input,NAME,FOLLOW_NAME_in_sqlinsert8369); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            s0b_tree = (PythonTree)adaptor.create(s0b);
            adaptor.addChild(root_0, s0b_tree);
            }
            if ( state.backtracking==0 ) {
              ((sql_stmt_scope)sql_stmt_stack.peek()).temp+=(s0a!=null?s0a.getText():null) + " " + (s0b!=null?s0b.getText():null) + " ";
            }
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2127:9: (s1= sqlinsertfrag )?
            int alt177=2;
            alt177 = dfa177.predict(input);
            switch (alt177) {
                case 1 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2127:11: s1= sqlinsertfrag
                    {
                    pushFollow(FOLLOW_sqlinsertfrag_in_sqlinsert8385);
                    s1=sqlinsertfrag();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, s1.getTree());
                    if ( state.backtracking==0 ) {
                      ((sql_stmt_scope)sql_stmt_stack.peek()).temp+=(s1!=null?input.toString(s1.start,s1.stop):null)+" ";
                    }

                    }
                    break;

            }

            pushFollow(FOLLOW_sqlexpr_in_sqlinsert8391);
            sqlexpr458=sqlexpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, sqlexpr458.getTree());
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2128:9: (s2= COMMA sqlexpr )*
            loop178:
            do {
                int alt178=2;
                int LA178_0 = input.LA(1);

                if ( (LA178_0==COMMA) ) {
                    alt178=1;
                }


                switch (alt178) {
            	case 1 :
            	    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2128:11: s2= COMMA sqlexpr
            	    {
            	    s2=(Token)match(input,COMMA,FOLLOW_COMMA_in_sqlinsert8405); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    s2_tree = (PythonTree)adaptor.create(s2);
            	    adaptor.addChild(root_0, s2_tree);
            	    }
            	    if ( state.backtracking==0 ) {
            	      ((sql_stmt_scope)sql_stmt_stack.peek()).temp+=(s2!=null?s2.getText():null)+" ";
            	    }
            	    pushFollow(FOLLOW_sqlexpr_in_sqlinsert8409);
            	    sqlexpr459=sqlexpr();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, sqlexpr459.getTree());

            	    }
            	    break;

            	default :
            	    break loop178;
                }
            } while (true);

            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2129:9: (s3= RPAREN )?
            int alt179=2;
            int LA179_0 = input.LA(1);

            if ( (LA179_0==RPAREN) ) {
                alt179=1;
            }
            switch (alt179) {
                case 1 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2129:11: s3= RPAREN
                    {
                    s3=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_sqlinsert8426); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    s3_tree = (PythonTree)adaptor.create(s3);
                    adaptor.addChild(root_0, s3_tree);
                    }
                    if ( state.backtracking==0 ) {
                      ((sql_stmt_scope)sql_stmt_stack.peek()).temp+=(s3!=null?s3.getText():null)+" ";
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (PythonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException re) {
            errorHandler.reportError(this, re);
            errorHandler.recover(this, input,re);
            retval.tree = (PythonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "sqlinsert"

    public static class sqlinsertfrag_return extends ParserRuleReturnScope {
        PythonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "sqlinsertfrag"
    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2131:1: sqlinsertfrag : LPAREN NAME ( COMMA NAME )* RPAREN VALUES LPAREN ;
    public final PythonParser.sqlinsertfrag_return sqlinsertfrag() throws RecognitionException {
        PythonParser.sqlinsertfrag_return retval = new PythonParser.sqlinsertfrag_return();
        retval.start = input.LT(1);

        PythonTree root_0 = null;

        Token LPAREN460=null;
        Token NAME461=null;
        Token COMMA462=null;
        Token NAME463=null;
        Token RPAREN464=null;
        Token VALUES465=null;
        Token LPAREN466=null;

        PythonTree LPAREN460_tree=null;
        PythonTree NAME461_tree=null;
        PythonTree COMMA462_tree=null;
        PythonTree NAME463_tree=null;
        PythonTree RPAREN464_tree=null;
        PythonTree VALUES465_tree=null;
        PythonTree LPAREN466_tree=null;

        try {
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2132:9: ( LPAREN NAME ( COMMA NAME )* RPAREN VALUES LPAREN )
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2132:11: LPAREN NAME ( COMMA NAME )* RPAREN VALUES LPAREN
            {
            root_0 = (PythonTree)adaptor.nil();

            LPAREN460=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_sqlinsertfrag8451); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LPAREN460_tree = (PythonTree)adaptor.create(LPAREN460);
            adaptor.addChild(root_0, LPAREN460_tree);
            }
            NAME461=(Token)match(input,NAME,FOLLOW_NAME_in_sqlinsertfrag8453); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            NAME461_tree = (PythonTree)adaptor.create(NAME461);
            adaptor.addChild(root_0, NAME461_tree);
            }
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2132:23: ( COMMA NAME )*
            loop180:
            do {
                int alt180=2;
                int LA180_0 = input.LA(1);

                if ( (LA180_0==COMMA) ) {
                    alt180=1;
                }


                switch (alt180) {
            	case 1 :
            	    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2132:25: COMMA NAME
            	    {
            	    COMMA462=(Token)match(input,COMMA,FOLLOW_COMMA_in_sqlinsertfrag8457); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    COMMA462_tree = (PythonTree)adaptor.create(COMMA462);
            	    adaptor.addChild(root_0, COMMA462_tree);
            	    }
            	    NAME463=(Token)match(input,NAME,FOLLOW_NAME_in_sqlinsertfrag8459); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    NAME463_tree = (PythonTree)adaptor.create(NAME463);
            	    adaptor.addChild(root_0, NAME463_tree);
            	    }

            	    }
            	    break;

            	default :
            	    break loop180;
                }
            } while (true);

            RPAREN464=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_sqlinsertfrag8464); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RPAREN464_tree = (PythonTree)adaptor.create(RPAREN464);
            adaptor.addChild(root_0, RPAREN464_tree);
            }
            VALUES465=(Token)match(input,VALUES,FOLLOW_VALUES_in_sqlinsertfrag8466); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            VALUES465_tree = (PythonTree)adaptor.create(VALUES465);
            adaptor.addChild(root_0, VALUES465_tree);
            }
            LPAREN466=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_sqlinsertfrag8468); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LPAREN466_tree = (PythonTree)adaptor.create(LPAREN466);
            adaptor.addChild(root_0, LPAREN466_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (PythonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException re) {
            errorHandler.reportError(this, re);
            errorHandler.recover(this, input,re);
            retval.tree = (PythonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "sqlinsertfrag"

    public static class sqlalter_return extends ParserRuleReturnScope {
        PythonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "sqlalter"
    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2135:1: sqlalter : s1= sqlalterfrag ;
    public final PythonParser.sqlalter_return sqlalter() throws RecognitionException {
        PythonParser.sqlalter_return retval = new PythonParser.sqlalter_return();
        retval.start = input.LT(1);

        PythonTree root_0 = null;

        PythonParser.sqlalterfrag_return s1 = null;



        try {
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2135:9: (s1= sqlalterfrag )
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2135:11: s1= sqlalterfrag
            {
            root_0 = (PythonTree)adaptor.nil();

            pushFollow(FOLLOW_sqlalterfrag_in_sqlalter8486);
            s1=sqlalterfrag();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, s1.getTree());
            if ( state.backtracking==0 ) {
              ((sql_stmt_scope)sql_stmt_stack.peek()).temp+=(s1!=null?input.toString(s1.start,s1.stop):null)+" ";
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (PythonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException re) {
            errorHandler.reportError(this, re);
            errorHandler.recover(this, input,re);
            retval.tree = (PythonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "sqlalter"

    public static class sqlalterfrag_return extends ParserRuleReturnScope {
        PythonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "sqlalterfrag"
    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2137:1: sqlalterfrag : TABLE NAME NAME ( '(' | ')' | ',' | NAME | FLOAT | INT )+ ;
    public final PythonParser.sqlalterfrag_return sqlalterfrag() throws RecognitionException {
        PythonParser.sqlalterfrag_return retval = new PythonParser.sqlalterfrag_return();
        retval.start = input.LT(1);

        PythonTree root_0 = null;

        Token TABLE467=null;
        Token NAME468=null;
        Token NAME469=null;
        Token set470=null;

        PythonTree TABLE467_tree=null;
        PythonTree NAME468_tree=null;
        PythonTree NAME469_tree=null;
        PythonTree set470_tree=null;

        try {
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2138:2: ( TABLE NAME NAME ( '(' | ')' | ',' | NAME | FLOAT | INT )+ )
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2138:3: TABLE NAME NAME ( '(' | ')' | ',' | NAME | FLOAT | INT )+
            {
            root_0 = (PythonTree)adaptor.nil();

            TABLE467=(Token)match(input,TABLE,FOLLOW_TABLE_in_sqlalterfrag8497); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TABLE467_tree = (PythonTree)adaptor.create(TABLE467);
            adaptor.addChild(root_0, TABLE467_tree);
            }
            NAME468=(Token)match(input,NAME,FOLLOW_NAME_in_sqlalterfrag8499); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            NAME468_tree = (PythonTree)adaptor.create(NAME468);
            adaptor.addChild(root_0, NAME468_tree);
            }
            NAME469=(Token)match(input,NAME,FOLLOW_NAME_in_sqlalterfrag8501); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            NAME469_tree = (PythonTree)adaptor.create(NAME469);
            adaptor.addChild(root_0, NAME469_tree);
            }
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2138:20: ( '(' | ')' | ',' | NAME | FLOAT | INT )+
            int cnt181=0;
            loop181:
            do {
                int alt181=2;
                int LA181_0 = input.LA(1);

                if ( (LA181_0==NAME||(LA181_0>=LPAREN && LA181_0<=RPAREN)||LA181_0==COMMA||LA181_0==INT||LA181_0==FLOAT) ) {
                    alt181=1;
                }


                switch (alt181) {
            	case 1 :
            	    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:
            	    {
            	    set470=(Token)input.LT(1);
            	    if ( input.LA(1)==NAME||(input.LA(1)>=LPAREN && input.LA(1)<=RPAREN)||input.LA(1)==COMMA||input.LA(1)==INT||input.LA(1)==FLOAT ) {
            	        input.consume();
            	        if ( state.backtracking==0 ) adaptor.addChild(root_0, (PythonTree)adaptor.create(set470));
            	        state.errorRecovery=false;state.failed=false;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        throw mse;
            	    }


            	    }
            	    break;

            	default :
            	    if ( cnt181 >= 1 ) break loop181;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(181, input);
                        throw eee;
                }
                cnt181++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (PythonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException re) {
            errorHandler.reportError(this, re);
            errorHandler.recover(this, input,re);
            retval.tree = (PythonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "sqlalterfrag"

    public static class sqlupdate_return extends ParserRuleReturnScope {
        PythonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "sqlupdate"
    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2140:1: sqlupdate : s1= sqlupdatefrag sqlexpr (s2= sqlsetfrag sqlexpr )* ( sqlwhereclause )? ;
    public final PythonParser.sqlupdate_return sqlupdate() throws RecognitionException {
        PythonParser.sqlupdate_return retval = new PythonParser.sqlupdate_return();
        retval.start = input.LT(1);

        PythonTree root_0 = null;

        PythonParser.sqlupdatefrag_return s1 = null;

        PythonParser.sqlsetfrag_return s2 = null;

        PythonParser.sqlexpr_return sqlexpr471 = null;

        PythonParser.sqlexpr_return sqlexpr472 = null;

        PythonParser.sqlwhereclause_return sqlwhereclause473 = null;



        try {
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2141:2: (s1= sqlupdatefrag sqlexpr (s2= sqlsetfrag sqlexpr )* ( sqlwhereclause )? )
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2141:4: s1= sqlupdatefrag sqlexpr (s2= sqlsetfrag sqlexpr )* ( sqlwhereclause )?
            {
            root_0 = (PythonTree)adaptor.nil();

            pushFollow(FOLLOW_sqlupdatefrag_in_sqlupdate8533);
            s1=sqlupdatefrag();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, s1.getTree());
            if ( state.backtracking==0 ) {
              ((sql_stmt_scope)sql_stmt_stack.peek()).temp+=(s1!=null?input.toString(s1.start,s1.stop):null)+" ";
            }
            pushFollow(FOLLOW_sqlexpr_in_sqlupdate8538);
            sqlexpr471=sqlexpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, sqlexpr471.getTree());
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2142:2: (s2= sqlsetfrag sqlexpr )*
            loop182:
            do {
                int alt182=2;
                int LA182_0 = input.LA(1);

                if ( (LA182_0==NAME||LA182_0==COMMA) ) {
                    alt182=1;
                }


                switch (alt182) {
            	case 1 :
            	    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2142:4: s2= sqlsetfrag sqlexpr
            	    {
            	    pushFollow(FOLLOW_sqlsetfrag_in_sqlupdate8545);
            	    s2=sqlsetfrag();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, s2.getTree());
            	    if ( state.backtracking==0 ) {
            	      ((sql_stmt_scope)sql_stmt_stack.peek()).temp+=(s2!=null?input.toString(s2.start,s2.stop):null)+" ";
            	    }
            	    pushFollow(FOLLOW_sqlexpr_in_sqlupdate8551);
            	    sqlexpr472=sqlexpr();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, sqlexpr472.getTree());

            	    }
            	    break;

            	default :
            	    break loop182;
                }
            } while (true);

            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2142:63: ( sqlwhereclause )?
            int alt183=2;
            int LA183_0 = input.LA(1);

            if ( (LA183_0==WHERE) ) {
                alt183=1;
            }
            switch (alt183) {
                case 1 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2142:63: sqlwhereclause
                    {
                    pushFollow(FOLLOW_sqlwhereclause_in_sqlupdate8555);
                    sqlwhereclause473=sqlwhereclause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, sqlwhereclause473.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (PythonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException re) {
            errorHandler.reportError(this, re);
            errorHandler.recover(this, input,re);
            retval.tree = (PythonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "sqlupdate"

    public static class sqlupdatefrag_return extends ParserRuleReturnScope {
        PythonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "sqlupdatefrag"
    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2144:1: sqlupdatefrag : NAME SQL_SET sqlsetfrag ;
    public final PythonParser.sqlupdatefrag_return sqlupdatefrag() throws RecognitionException {
        PythonParser.sqlupdatefrag_return retval = new PythonParser.sqlupdatefrag_return();
        retval.start = input.LT(1);

        PythonTree root_0 = null;

        Token NAME474=null;
        Token SQL_SET475=null;
        PythonParser.sqlsetfrag_return sqlsetfrag476 = null;


        PythonTree NAME474_tree=null;
        PythonTree SQL_SET475_tree=null;

        try {
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2145:2: ( NAME SQL_SET sqlsetfrag )
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2145:4: NAME SQL_SET sqlsetfrag
            {
            root_0 = (PythonTree)adaptor.nil();

            NAME474=(Token)match(input,NAME,FOLLOW_NAME_in_sqlupdatefrag8567); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            NAME474_tree = (PythonTree)adaptor.create(NAME474);
            adaptor.addChild(root_0, NAME474_tree);
            }
            SQL_SET475=(Token)match(input,SQL_SET,FOLLOW_SQL_SET_in_sqlupdatefrag8569); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SQL_SET475_tree = (PythonTree)adaptor.create(SQL_SET475);
            adaptor.addChild(root_0, SQL_SET475_tree);
            }
            pushFollow(FOLLOW_sqlsetfrag_in_sqlupdatefrag8571);
            sqlsetfrag476=sqlsetfrag();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, sqlsetfrag476.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (PythonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException re) {
            errorHandler.reportError(this, re);
            errorHandler.recover(this, input,re);
            retval.tree = (PythonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "sqlupdatefrag"

    public static class sqlsetfrag_return extends ParserRuleReturnScope {
        PythonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "sqlsetfrag"
    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2147:1: sqlsetfrag : ( COMMA )? NAME ASSIGN ;
    public final PythonParser.sqlsetfrag_return sqlsetfrag() throws RecognitionException {
        PythonParser.sqlsetfrag_return retval = new PythonParser.sqlsetfrag_return();
        retval.start = input.LT(1);

        PythonTree root_0 = null;

        Token COMMA477=null;
        Token NAME478=null;
        Token ASSIGN479=null;

        PythonTree COMMA477_tree=null;
        PythonTree NAME478_tree=null;
        PythonTree ASSIGN479_tree=null;

        try {
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2148:2: ( ( COMMA )? NAME ASSIGN )
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2148:4: ( COMMA )? NAME ASSIGN
            {
            root_0 = (PythonTree)adaptor.nil();

            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2148:4: ( COMMA )?
            int alt184=2;
            int LA184_0 = input.LA(1);

            if ( (LA184_0==COMMA) ) {
                alt184=1;
            }
            switch (alt184) {
                case 1 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2148:4: COMMA
                    {
                    COMMA477=(Token)match(input,COMMA,FOLLOW_COMMA_in_sqlsetfrag8581); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COMMA477_tree = (PythonTree)adaptor.create(COMMA477);
                    adaptor.addChild(root_0, COMMA477_tree);
                    }

                    }
                    break;

            }

            NAME478=(Token)match(input,NAME,FOLLOW_NAME_in_sqlsetfrag8584); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            NAME478_tree = (PythonTree)adaptor.create(NAME478);
            adaptor.addChild(root_0, NAME478_tree);
            }
            ASSIGN479=(Token)match(input,ASSIGN,FOLLOW_ASSIGN_in_sqlsetfrag8586); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ASSIGN479_tree = (PythonTree)adaptor.create(ASSIGN479);
            adaptor.addChild(root_0, ASSIGN479_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (PythonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException re) {
            errorHandler.reportError(this, re);
            errorHandler.recover(this, input,re);
            retval.tree = (PythonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "sqlsetfrag"

    public static class sqldelete_return extends ParserRuleReturnScope {
        PythonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "sqldelete"
    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2150:1: sqldelete : s1= sqldeletefrag ( sqlwhereclause )? ;
    public final PythonParser.sqldelete_return sqldelete() throws RecognitionException {
        PythonParser.sqldelete_return retval = new PythonParser.sqldelete_return();
        retval.start = input.LT(1);

        PythonTree root_0 = null;

        PythonParser.sqldeletefrag_return s1 = null;

        PythonParser.sqlwhereclause_return sqlwhereclause480 = null;



        try {
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2151:2: (s1= sqldeletefrag ( sqlwhereclause )? )
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2151:5: s1= sqldeletefrag ( sqlwhereclause )?
            {
            root_0 = (PythonTree)adaptor.nil();

            pushFollow(FOLLOW_sqldeletefrag_in_sqldelete8601);
            s1=sqldeletefrag();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, s1.getTree());
            if ( state.backtracking==0 ) {
              ((sql_stmt_scope)sql_stmt_stack.peek()).temp+=(s1!=null?input.toString(s1.start,s1.stop):null)+" ";
            }
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2151:55: ( sqlwhereclause )?
            int alt185=2;
            int LA185_0 = input.LA(1);

            if ( (LA185_0==WHERE) ) {
                alt185=1;
            }
            switch (alt185) {
                case 1 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2151:55: sqlwhereclause
                    {
                    pushFollow(FOLLOW_sqlwhereclause_in_sqldelete8605);
                    sqlwhereclause480=sqlwhereclause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, sqlwhereclause480.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (PythonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException re) {
            errorHandler.reportError(this, re);
            errorHandler.recover(this, input,re);
            retval.tree = (PythonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "sqldelete"

    public static class sqldeletefrag_return extends ParserRuleReturnScope {
        PythonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "sqldeletefrag"
    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2153:1: sqldeletefrag : CAPSFROM NAME ;
    public final PythonParser.sqldeletefrag_return sqldeletefrag() throws RecognitionException {
        PythonParser.sqldeletefrag_return retval = new PythonParser.sqldeletefrag_return();
        retval.start = input.LT(1);

        PythonTree root_0 = null;

        Token CAPSFROM481=null;
        Token NAME482=null;

        PythonTree CAPSFROM481_tree=null;
        PythonTree NAME482_tree=null;

        try {
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2154:2: ( CAPSFROM NAME )
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2154:4: CAPSFROM NAME
            {
            root_0 = (PythonTree)adaptor.nil();

            CAPSFROM481=(Token)match(input,CAPSFROM,FOLLOW_CAPSFROM_in_sqldeletefrag8616); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            CAPSFROM481_tree = (PythonTree)adaptor.create(CAPSFROM481);
            adaptor.addChild(root_0, CAPSFROM481_tree);
            }
            NAME482=(Token)match(input,NAME,FOLLOW_NAME_in_sqldeletefrag8618); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            NAME482_tree = (PythonTree)adaptor.create(NAME482);
            adaptor.addChild(root_0, NAME482_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (PythonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException re) {
            errorHandler.reportError(this, re);
            errorHandler.recover(this, input,re);
            retval.tree = (PythonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "sqldeletefrag"

    public static class sqldrop_return extends ParserRuleReturnScope {
        PythonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "sqldrop"
    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2156:1: sqldrop : s1= sqldropfrag ;
    public final PythonParser.sqldrop_return sqldrop() throws RecognitionException {
        PythonParser.sqldrop_return retval = new PythonParser.sqldrop_return();
        retval.start = input.LT(1);

        PythonTree root_0 = null;

        PythonParser.sqldropfrag_return s1 = null;



        try {
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2157:2: (s1= sqldropfrag )
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2157:4: s1= sqldropfrag
            {
            root_0 = (PythonTree)adaptor.nil();

            pushFollow(FOLLOW_sqldropfrag_in_sqldrop8631);
            s1=sqldropfrag();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, s1.getTree());
            if ( state.backtracking==0 ) {
              ((sql_stmt_scope)sql_stmt_stack.peek()).temp+=(s1!=null?input.toString(s1.start,s1.stop):null)+" ";
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (PythonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException re) {
            errorHandler.reportError(this, re);
            errorHandler.recover(this, input,re);
            retval.tree = (PythonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "sqldrop"

    public static class sqldropfrag_return extends ParserRuleReturnScope {
        PythonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "sqldropfrag"
    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2160:1: sqldropfrag : ( ( TABLE ( NAME DOT )? NAME ( CASCADE CONSTRAINTS )? ( PURGE )? ) | ( VIEW ( NAME DOT )? NAME ( CASCADE CONSTRAINTS )? ( PURGE )? ) | ( INDEX ( NAME DOT )? NAME ( FORCE )? ) | ( FUNCTION ( NAME DOT )? NAME ) | ( OPERATOR ( NAME DOT )? NAME ( FORCE )? ) | ( PROCEDURE ( NAME DOT )? NAME ) | ( TRIGGER ( NAME DOT )? NAME ) | ( TYPE ( NAME DOT )? NAME ( FORCE | VALIDATE )? ) );
    public final PythonParser.sqldropfrag_return sqldropfrag() throws RecognitionException {
        PythonParser.sqldropfrag_return retval = new PythonParser.sqldropfrag_return();
        retval.start = input.LT(1);

        PythonTree root_0 = null;

        Token TABLE483=null;
        Token NAME484=null;
        Token DOT485=null;
        Token NAME486=null;
        Token CASCADE487=null;
        Token CONSTRAINTS488=null;
        Token PURGE489=null;
        Token VIEW490=null;
        Token NAME491=null;
        Token DOT492=null;
        Token NAME493=null;
        Token CASCADE494=null;
        Token CONSTRAINTS495=null;
        Token PURGE496=null;
        Token INDEX497=null;
        Token NAME498=null;
        Token DOT499=null;
        Token NAME500=null;
        Token FORCE501=null;
        Token FUNCTION502=null;
        Token NAME503=null;
        Token DOT504=null;
        Token NAME505=null;
        Token OPERATOR506=null;
        Token NAME507=null;
        Token DOT508=null;
        Token NAME509=null;
        Token FORCE510=null;
        Token PROCEDURE511=null;
        Token NAME512=null;
        Token DOT513=null;
        Token NAME514=null;
        Token TRIGGER515=null;
        Token NAME516=null;
        Token DOT517=null;
        Token NAME518=null;
        Token TYPE519=null;
        Token NAME520=null;
        Token DOT521=null;
        Token NAME522=null;
        Token set523=null;

        PythonTree TABLE483_tree=null;
        PythonTree NAME484_tree=null;
        PythonTree DOT485_tree=null;
        PythonTree NAME486_tree=null;
        PythonTree CASCADE487_tree=null;
        PythonTree CONSTRAINTS488_tree=null;
        PythonTree PURGE489_tree=null;
        PythonTree VIEW490_tree=null;
        PythonTree NAME491_tree=null;
        PythonTree DOT492_tree=null;
        PythonTree NAME493_tree=null;
        PythonTree CASCADE494_tree=null;
        PythonTree CONSTRAINTS495_tree=null;
        PythonTree PURGE496_tree=null;
        PythonTree INDEX497_tree=null;
        PythonTree NAME498_tree=null;
        PythonTree DOT499_tree=null;
        PythonTree NAME500_tree=null;
        PythonTree FORCE501_tree=null;
        PythonTree FUNCTION502_tree=null;
        PythonTree NAME503_tree=null;
        PythonTree DOT504_tree=null;
        PythonTree NAME505_tree=null;
        PythonTree OPERATOR506_tree=null;
        PythonTree NAME507_tree=null;
        PythonTree DOT508_tree=null;
        PythonTree NAME509_tree=null;
        PythonTree FORCE510_tree=null;
        PythonTree PROCEDURE511_tree=null;
        PythonTree NAME512_tree=null;
        PythonTree DOT513_tree=null;
        PythonTree NAME514_tree=null;
        PythonTree TRIGGER515_tree=null;
        PythonTree NAME516_tree=null;
        PythonTree DOT517_tree=null;
        PythonTree NAME518_tree=null;
        PythonTree TYPE519_tree=null;
        PythonTree NAME520_tree=null;
        PythonTree DOT521_tree=null;
        PythonTree NAME522_tree=null;
        PythonTree set523_tree=null;

        try {
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2161:9: ( ( TABLE ( NAME DOT )? NAME ( CASCADE CONSTRAINTS )? ( PURGE )? ) | ( VIEW ( NAME DOT )? NAME ( CASCADE CONSTRAINTS )? ( PURGE )? ) | ( INDEX ( NAME DOT )? NAME ( FORCE )? ) | ( FUNCTION ( NAME DOT )? NAME ) | ( OPERATOR ( NAME DOT )? NAME ( FORCE )? ) | ( PROCEDURE ( NAME DOT )? NAME ) | ( TRIGGER ( NAME DOT )? NAME ) | ( TYPE ( NAME DOT )? NAME ( FORCE | VALIDATE )? ) )
            int alt201=8;
            switch ( input.LA(1) ) {
            case TABLE:
                {
                alt201=1;
                }
                break;
            case VIEW:
                {
                alt201=2;
                }
                break;
            case INDEX:
                {
                alt201=3;
                }
                break;
            case FUNCTION:
                {
                alt201=4;
                }
                break;
            case OPERATOR:
                {
                alt201=5;
                }
                break;
            case PROCEDURE:
                {
                alt201=6;
                }
                break;
            case TRIGGER:
                {
                alt201=7;
                }
                break;
            case TYPE:
                {
                alt201=8;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 201, 0, input);

                throw nvae;
            }

            switch (alt201) {
                case 1 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2161:11: ( TABLE ( NAME DOT )? NAME ( CASCADE CONSTRAINTS )? ( PURGE )? )
                    {
                    root_0 = (PythonTree)adaptor.nil();

                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2161:11: ( TABLE ( NAME DOT )? NAME ( CASCADE CONSTRAINTS )? ( PURGE )? )
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2161:12: TABLE ( NAME DOT )? NAME ( CASCADE CONSTRAINTS )? ( PURGE )?
                    {
                    TABLE483=(Token)match(input,TABLE,FOLLOW_TABLE_in_sqldropfrag8653); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    TABLE483_tree = (PythonTree)adaptor.create(TABLE483);
                    adaptor.addChild(root_0, TABLE483_tree);
                    }
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2161:18: ( NAME DOT )?
                    int alt186=2;
                    int LA186_0 = input.LA(1);

                    if ( (LA186_0==NAME) ) {
                        int LA186_1 = input.LA(2);

                        if ( (LA186_1==DOT) ) {
                            alt186=1;
                        }
                    }
                    switch (alt186) {
                        case 1 :
                            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2161:19: NAME DOT
                            {
                            NAME484=(Token)match(input,NAME,FOLLOW_NAME_in_sqldropfrag8656); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            NAME484_tree = (PythonTree)adaptor.create(NAME484);
                            adaptor.addChild(root_0, NAME484_tree);
                            }
                            DOT485=(Token)match(input,DOT,FOLLOW_DOT_in_sqldropfrag8658); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            DOT485_tree = (PythonTree)adaptor.create(DOT485);
                            adaptor.addChild(root_0, DOT485_tree);
                            }

                            }
                            break;

                    }

                    NAME486=(Token)match(input,NAME,FOLLOW_NAME_in_sqldropfrag8662); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NAME486_tree = (PythonTree)adaptor.create(NAME486);
                    adaptor.addChild(root_0, NAME486_tree);
                    }
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2161:35: ( CASCADE CONSTRAINTS )?
                    int alt187=2;
                    int LA187_0 = input.LA(1);

                    if ( (LA187_0==CASCADE) ) {
                        alt187=1;
                    }
                    switch (alt187) {
                        case 1 :
                            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2161:36: CASCADE CONSTRAINTS
                            {
                            CASCADE487=(Token)match(input,CASCADE,FOLLOW_CASCADE_in_sqldropfrag8665); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            CASCADE487_tree = (PythonTree)adaptor.create(CASCADE487);
                            adaptor.addChild(root_0, CASCADE487_tree);
                            }
                            CONSTRAINTS488=(Token)match(input,CONSTRAINTS,FOLLOW_CONSTRAINTS_in_sqldropfrag8667); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            CONSTRAINTS488_tree = (PythonTree)adaptor.create(CONSTRAINTS488);
                            adaptor.addChild(root_0, CONSTRAINTS488_tree);
                            }

                            }
                            break;

                    }

                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2161:58: ( PURGE )?
                    int alt188=2;
                    int LA188_0 = input.LA(1);

                    if ( (LA188_0==PURGE) ) {
                        alt188=1;
                    }
                    switch (alt188) {
                        case 1 :
                            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2161:58: PURGE
                            {
                            PURGE489=(Token)match(input,PURGE,FOLLOW_PURGE_in_sqldropfrag8671); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            PURGE489_tree = (PythonTree)adaptor.create(PURGE489);
                            adaptor.addChild(root_0, PURGE489_tree);
                            }

                            }
                            break;

                    }


                    }


                    }
                    break;
                case 2 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2162:11: ( VIEW ( NAME DOT )? NAME ( CASCADE CONSTRAINTS )? ( PURGE )? )
                    {
                    root_0 = (PythonTree)adaptor.nil();

                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2162:11: ( VIEW ( NAME DOT )? NAME ( CASCADE CONSTRAINTS )? ( PURGE )? )
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2162:12: VIEW ( NAME DOT )? NAME ( CASCADE CONSTRAINTS )? ( PURGE )?
                    {
                    VIEW490=(Token)match(input,VIEW,FOLLOW_VIEW_in_sqldropfrag8688); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    VIEW490_tree = (PythonTree)adaptor.create(VIEW490);
                    adaptor.addChild(root_0, VIEW490_tree);
                    }
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2162:17: ( NAME DOT )?
                    int alt189=2;
                    int LA189_0 = input.LA(1);

                    if ( (LA189_0==NAME) ) {
                        int LA189_1 = input.LA(2);

                        if ( (LA189_1==DOT) ) {
                            alt189=1;
                        }
                    }
                    switch (alt189) {
                        case 1 :
                            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2162:18: NAME DOT
                            {
                            NAME491=(Token)match(input,NAME,FOLLOW_NAME_in_sqldropfrag8691); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            NAME491_tree = (PythonTree)adaptor.create(NAME491);
                            adaptor.addChild(root_0, NAME491_tree);
                            }
                            DOT492=(Token)match(input,DOT,FOLLOW_DOT_in_sqldropfrag8693); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            DOT492_tree = (PythonTree)adaptor.create(DOT492);
                            adaptor.addChild(root_0, DOT492_tree);
                            }

                            }
                            break;

                    }

                    NAME493=(Token)match(input,NAME,FOLLOW_NAME_in_sqldropfrag8697); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NAME493_tree = (PythonTree)adaptor.create(NAME493);
                    adaptor.addChild(root_0, NAME493_tree);
                    }
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2162:34: ( CASCADE CONSTRAINTS )?
                    int alt190=2;
                    int LA190_0 = input.LA(1);

                    if ( (LA190_0==CASCADE) ) {
                        alt190=1;
                    }
                    switch (alt190) {
                        case 1 :
                            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2162:35: CASCADE CONSTRAINTS
                            {
                            CASCADE494=(Token)match(input,CASCADE,FOLLOW_CASCADE_in_sqldropfrag8700); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            CASCADE494_tree = (PythonTree)adaptor.create(CASCADE494);
                            adaptor.addChild(root_0, CASCADE494_tree);
                            }
                            CONSTRAINTS495=(Token)match(input,CONSTRAINTS,FOLLOW_CONSTRAINTS_in_sqldropfrag8702); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            CONSTRAINTS495_tree = (PythonTree)adaptor.create(CONSTRAINTS495);
                            adaptor.addChild(root_0, CONSTRAINTS495_tree);
                            }

                            }
                            break;

                    }

                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2162:57: ( PURGE )?
                    int alt191=2;
                    int LA191_0 = input.LA(1);

                    if ( (LA191_0==PURGE) ) {
                        alt191=1;
                    }
                    switch (alt191) {
                        case 1 :
                            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2162:57: PURGE
                            {
                            PURGE496=(Token)match(input,PURGE,FOLLOW_PURGE_in_sqldropfrag8706); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            PURGE496_tree = (PythonTree)adaptor.create(PURGE496);
                            adaptor.addChild(root_0, PURGE496_tree);
                            }

                            }
                            break;

                    }


                    }


                    }
                    break;
                case 3 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2163:11: ( INDEX ( NAME DOT )? NAME ( FORCE )? )
                    {
                    root_0 = (PythonTree)adaptor.nil();

                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2163:11: ( INDEX ( NAME DOT )? NAME ( FORCE )? )
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2163:12: INDEX ( NAME DOT )? NAME ( FORCE )?
                    {
                    INDEX497=(Token)match(input,INDEX,FOLLOW_INDEX_in_sqldropfrag8723); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    INDEX497_tree = (PythonTree)adaptor.create(INDEX497);
                    adaptor.addChild(root_0, INDEX497_tree);
                    }
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2163:18: ( NAME DOT )?
                    int alt192=2;
                    int LA192_0 = input.LA(1);

                    if ( (LA192_0==NAME) ) {
                        int LA192_1 = input.LA(2);

                        if ( (LA192_1==DOT) ) {
                            alt192=1;
                        }
                    }
                    switch (alt192) {
                        case 1 :
                            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2163:19: NAME DOT
                            {
                            NAME498=(Token)match(input,NAME,FOLLOW_NAME_in_sqldropfrag8726); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            NAME498_tree = (PythonTree)adaptor.create(NAME498);
                            adaptor.addChild(root_0, NAME498_tree);
                            }
                            DOT499=(Token)match(input,DOT,FOLLOW_DOT_in_sqldropfrag8728); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            DOT499_tree = (PythonTree)adaptor.create(DOT499);
                            adaptor.addChild(root_0, DOT499_tree);
                            }

                            }
                            break;

                    }

                    NAME500=(Token)match(input,NAME,FOLLOW_NAME_in_sqldropfrag8732); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NAME500_tree = (PythonTree)adaptor.create(NAME500);
                    adaptor.addChild(root_0, NAME500_tree);
                    }
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2163:35: ( FORCE )?
                    int alt193=2;
                    int LA193_0 = input.LA(1);

                    if ( (LA193_0==FORCE) ) {
                        alt193=1;
                    }
                    switch (alt193) {
                        case 1 :
                            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2163:35: FORCE
                            {
                            FORCE501=(Token)match(input,FORCE,FOLLOW_FORCE_in_sqldropfrag8734); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            FORCE501_tree = (PythonTree)adaptor.create(FORCE501);
                            adaptor.addChild(root_0, FORCE501_tree);
                            }

                            }
                            break;

                    }


                    }


                    }
                    break;
                case 4 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2164:11: ( FUNCTION ( NAME DOT )? NAME )
                    {
                    root_0 = (PythonTree)adaptor.nil();

                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2164:11: ( FUNCTION ( NAME DOT )? NAME )
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2164:12: FUNCTION ( NAME DOT )? NAME
                    {
                    FUNCTION502=(Token)match(input,FUNCTION,FOLLOW_FUNCTION_in_sqldropfrag8751); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    FUNCTION502_tree = (PythonTree)adaptor.create(FUNCTION502);
                    adaptor.addChild(root_0, FUNCTION502_tree);
                    }
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2164:21: ( NAME DOT )?
                    int alt194=2;
                    int LA194_0 = input.LA(1);

                    if ( (LA194_0==NAME) ) {
                        int LA194_1 = input.LA(2);

                        if ( (LA194_1==DOT) ) {
                            alt194=1;
                        }
                    }
                    switch (alt194) {
                        case 1 :
                            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2164:22: NAME DOT
                            {
                            NAME503=(Token)match(input,NAME,FOLLOW_NAME_in_sqldropfrag8754); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            NAME503_tree = (PythonTree)adaptor.create(NAME503);
                            adaptor.addChild(root_0, NAME503_tree);
                            }
                            DOT504=(Token)match(input,DOT,FOLLOW_DOT_in_sqldropfrag8756); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            DOT504_tree = (PythonTree)adaptor.create(DOT504);
                            adaptor.addChild(root_0, DOT504_tree);
                            }

                            }
                            break;

                    }

                    NAME505=(Token)match(input,NAME,FOLLOW_NAME_in_sqldropfrag8760); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NAME505_tree = (PythonTree)adaptor.create(NAME505);
                    adaptor.addChild(root_0, NAME505_tree);
                    }

                    }


                    }
                    break;
                case 5 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2165:11: ( OPERATOR ( NAME DOT )? NAME ( FORCE )? )
                    {
                    root_0 = (PythonTree)adaptor.nil();

                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2165:11: ( OPERATOR ( NAME DOT )? NAME ( FORCE )? )
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2165:12: OPERATOR ( NAME DOT )? NAME ( FORCE )?
                    {
                    OPERATOR506=(Token)match(input,OPERATOR,FOLLOW_OPERATOR_in_sqldropfrag8776); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    OPERATOR506_tree = (PythonTree)adaptor.create(OPERATOR506);
                    adaptor.addChild(root_0, OPERATOR506_tree);
                    }
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2165:21: ( NAME DOT )?
                    int alt195=2;
                    int LA195_0 = input.LA(1);

                    if ( (LA195_0==NAME) ) {
                        int LA195_1 = input.LA(2);

                        if ( (LA195_1==DOT) ) {
                            alt195=1;
                        }
                    }
                    switch (alt195) {
                        case 1 :
                            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2165:22: NAME DOT
                            {
                            NAME507=(Token)match(input,NAME,FOLLOW_NAME_in_sqldropfrag8779); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            NAME507_tree = (PythonTree)adaptor.create(NAME507);
                            adaptor.addChild(root_0, NAME507_tree);
                            }
                            DOT508=(Token)match(input,DOT,FOLLOW_DOT_in_sqldropfrag8781); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            DOT508_tree = (PythonTree)adaptor.create(DOT508);
                            adaptor.addChild(root_0, DOT508_tree);
                            }

                            }
                            break;

                    }

                    NAME509=(Token)match(input,NAME,FOLLOW_NAME_in_sqldropfrag8785); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NAME509_tree = (PythonTree)adaptor.create(NAME509);
                    adaptor.addChild(root_0, NAME509_tree);
                    }
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2165:38: ( FORCE )?
                    int alt196=2;
                    int LA196_0 = input.LA(1);

                    if ( (LA196_0==FORCE) ) {
                        alt196=1;
                    }
                    switch (alt196) {
                        case 1 :
                            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2165:38: FORCE
                            {
                            FORCE510=(Token)match(input,FORCE,FOLLOW_FORCE_in_sqldropfrag8787); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            FORCE510_tree = (PythonTree)adaptor.create(FORCE510);
                            adaptor.addChild(root_0, FORCE510_tree);
                            }

                            }
                            break;

                    }


                    }


                    }
                    break;
                case 6 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2166:11: ( PROCEDURE ( NAME DOT )? NAME )
                    {
                    root_0 = (PythonTree)adaptor.nil();

                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2166:11: ( PROCEDURE ( NAME DOT )? NAME )
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2166:12: PROCEDURE ( NAME DOT )? NAME
                    {
                    PROCEDURE511=(Token)match(input,PROCEDURE,FOLLOW_PROCEDURE_in_sqldropfrag8804); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PROCEDURE511_tree = (PythonTree)adaptor.create(PROCEDURE511);
                    adaptor.addChild(root_0, PROCEDURE511_tree);
                    }
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2166:22: ( NAME DOT )?
                    int alt197=2;
                    int LA197_0 = input.LA(1);

                    if ( (LA197_0==NAME) ) {
                        int LA197_1 = input.LA(2);

                        if ( (LA197_1==DOT) ) {
                            alt197=1;
                        }
                    }
                    switch (alt197) {
                        case 1 :
                            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2166:23: NAME DOT
                            {
                            NAME512=(Token)match(input,NAME,FOLLOW_NAME_in_sqldropfrag8807); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            NAME512_tree = (PythonTree)adaptor.create(NAME512);
                            adaptor.addChild(root_0, NAME512_tree);
                            }
                            DOT513=(Token)match(input,DOT,FOLLOW_DOT_in_sqldropfrag8809); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            DOT513_tree = (PythonTree)adaptor.create(DOT513);
                            adaptor.addChild(root_0, DOT513_tree);
                            }

                            }
                            break;

                    }

                    NAME514=(Token)match(input,NAME,FOLLOW_NAME_in_sqldropfrag8813); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NAME514_tree = (PythonTree)adaptor.create(NAME514);
                    adaptor.addChild(root_0, NAME514_tree);
                    }

                    }


                    }
                    break;
                case 7 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2167:11: ( TRIGGER ( NAME DOT )? NAME )
                    {
                    root_0 = (PythonTree)adaptor.nil();

                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2167:11: ( TRIGGER ( NAME DOT )? NAME )
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2167:12: TRIGGER ( NAME DOT )? NAME
                    {
                    TRIGGER515=(Token)match(input,TRIGGER,FOLLOW_TRIGGER_in_sqldropfrag8829); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    TRIGGER515_tree = (PythonTree)adaptor.create(TRIGGER515);
                    adaptor.addChild(root_0, TRIGGER515_tree);
                    }
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2167:20: ( NAME DOT )?
                    int alt198=2;
                    int LA198_0 = input.LA(1);

                    if ( (LA198_0==NAME) ) {
                        int LA198_1 = input.LA(2);

                        if ( (LA198_1==DOT) ) {
                            alt198=1;
                        }
                    }
                    switch (alt198) {
                        case 1 :
                            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2167:21: NAME DOT
                            {
                            NAME516=(Token)match(input,NAME,FOLLOW_NAME_in_sqldropfrag8832); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            NAME516_tree = (PythonTree)adaptor.create(NAME516);
                            adaptor.addChild(root_0, NAME516_tree);
                            }
                            DOT517=(Token)match(input,DOT,FOLLOW_DOT_in_sqldropfrag8834); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            DOT517_tree = (PythonTree)adaptor.create(DOT517);
                            adaptor.addChild(root_0, DOT517_tree);
                            }

                            }
                            break;

                    }

                    NAME518=(Token)match(input,NAME,FOLLOW_NAME_in_sqldropfrag8838); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NAME518_tree = (PythonTree)adaptor.create(NAME518);
                    adaptor.addChild(root_0, NAME518_tree);
                    }

                    }


                    }
                    break;
                case 8 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2168:11: ( TYPE ( NAME DOT )? NAME ( FORCE | VALIDATE )? )
                    {
                    root_0 = (PythonTree)adaptor.nil();

                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2168:11: ( TYPE ( NAME DOT )? NAME ( FORCE | VALIDATE )? )
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2168:12: TYPE ( NAME DOT )? NAME ( FORCE | VALIDATE )?
                    {
                    TYPE519=(Token)match(input,TYPE,FOLLOW_TYPE_in_sqldropfrag8854); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    TYPE519_tree = (PythonTree)adaptor.create(TYPE519);
                    adaptor.addChild(root_0, TYPE519_tree);
                    }
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2168:17: ( NAME DOT )?
                    int alt199=2;
                    int LA199_0 = input.LA(1);

                    if ( (LA199_0==NAME) ) {
                        int LA199_1 = input.LA(2);

                        if ( (LA199_1==DOT) ) {
                            alt199=1;
                        }
                    }
                    switch (alt199) {
                        case 1 :
                            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2168:18: NAME DOT
                            {
                            NAME520=(Token)match(input,NAME,FOLLOW_NAME_in_sqldropfrag8857); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            NAME520_tree = (PythonTree)adaptor.create(NAME520);
                            adaptor.addChild(root_0, NAME520_tree);
                            }
                            DOT521=(Token)match(input,DOT,FOLLOW_DOT_in_sqldropfrag8859); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            DOT521_tree = (PythonTree)adaptor.create(DOT521);
                            adaptor.addChild(root_0, DOT521_tree);
                            }

                            }
                            break;

                    }

                    NAME522=(Token)match(input,NAME,FOLLOW_NAME_in_sqldropfrag8863); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NAME522_tree = (PythonTree)adaptor.create(NAME522);
                    adaptor.addChild(root_0, NAME522_tree);
                    }
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2168:34: ( FORCE | VALIDATE )?
                    int alt200=2;
                    int LA200_0 = input.LA(1);

                    if ( (LA200_0==FORCE||LA200_0==VALIDATE) ) {
                        alt200=1;
                    }
                    switch (alt200) {
                        case 1 :
                            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:
                            {
                            set523=(Token)input.LT(1);
                            if ( input.LA(1)==FORCE||input.LA(1)==VALIDATE ) {
                                input.consume();
                                if ( state.backtracking==0 ) adaptor.addChild(root_0, (PythonTree)adaptor.create(set523));
                                state.errorRecovery=false;state.failed=false;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                MismatchedSetException mse = new MismatchedSetException(null,input);
                                throw mse;
                            }


                            }
                            break;

                    }


                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (PythonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException re) {
            errorHandler.reportError(this, re);
            errorHandler.recover(this, input,re);
            retval.tree = (PythonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "sqldropfrag"

    public static class sqlcreate_return extends ParserRuleReturnScope {
        PythonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "sqlcreate"
    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2171:1: sqlcreate : s1= sqlcreatefrag ;
    public final PythonParser.sqlcreate_return sqlcreate() throws RecognitionException {
        PythonParser.sqlcreate_return retval = new PythonParser.sqlcreate_return();
        retval.start = input.LT(1);

        PythonTree root_0 = null;

        PythonParser.sqlcreatefrag_return s1 = null;



        try {
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2172:2: (s1= sqlcreatefrag )
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2172:4: s1= sqlcreatefrag
            {
            root_0 = (PythonTree)adaptor.nil();

            pushFollow(FOLLOW_sqlcreatefrag_in_sqlcreate8893);
            s1=sqlcreatefrag();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, s1.getTree());
            if ( state.backtracking==0 ) {
              ((sql_stmt_scope)sql_stmt_stack.peek()).temp+=(s1!=null?input.toString(s1.start,s1.stop):null)+" ";
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (PythonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException re) {
            errorHandler.reportError(this, re);
            errorHandler.recover(this, input,re);
            retval.tree = (PythonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "sqlcreate"

    public static class sqlcreatefrag_return extends ParserRuleReturnScope {
        PythonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "sqlcreatefrag"
    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2175:1: sqlcreatefrag : TABLE ( NAME DOT )? NAME ( LPAREN sqlrelationalproperties RPAREN )+ ;
    public final PythonParser.sqlcreatefrag_return sqlcreatefrag() throws RecognitionException {
        PythonParser.sqlcreatefrag_return retval = new PythonParser.sqlcreatefrag_return();
        retval.start = input.LT(1);

        PythonTree root_0 = null;

        Token TABLE524=null;
        Token NAME525=null;
        Token DOT526=null;
        Token NAME527=null;
        Token LPAREN528=null;
        Token RPAREN530=null;
        PythonParser.sqlrelationalproperties_return sqlrelationalproperties529 = null;


        PythonTree TABLE524_tree=null;
        PythonTree NAME525_tree=null;
        PythonTree DOT526_tree=null;
        PythonTree NAME527_tree=null;
        PythonTree LPAREN528_tree=null;
        PythonTree RPAREN530_tree=null;

        try {
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2176:9: ( TABLE ( NAME DOT )? NAME ( LPAREN sqlrelationalproperties RPAREN )+ )
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2176:11: TABLE ( NAME DOT )? NAME ( LPAREN sqlrelationalproperties RPAREN )+
            {
            root_0 = (PythonTree)adaptor.nil();

            TABLE524=(Token)match(input,TABLE,FOLLOW_TABLE_in_sqlcreatefrag8915); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            TABLE524_tree = (PythonTree)adaptor.create(TABLE524);
            adaptor.addChild(root_0, TABLE524_tree);
            }
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2176:17: ( NAME DOT )?
            int alt202=2;
            int LA202_0 = input.LA(1);

            if ( (LA202_0==NAME) ) {
                int LA202_1 = input.LA(2);

                if ( (LA202_1==DOT) ) {
                    alt202=1;
                }
            }
            switch (alt202) {
                case 1 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2176:18: NAME DOT
                    {
                    NAME525=(Token)match(input,NAME,FOLLOW_NAME_in_sqlcreatefrag8918); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NAME525_tree = (PythonTree)adaptor.create(NAME525);
                    adaptor.addChild(root_0, NAME525_tree);
                    }
                    DOT526=(Token)match(input,DOT,FOLLOW_DOT_in_sqlcreatefrag8920); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DOT526_tree = (PythonTree)adaptor.create(DOT526);
                    adaptor.addChild(root_0, DOT526_tree);
                    }

                    }
                    break;

            }

            NAME527=(Token)match(input,NAME,FOLLOW_NAME_in_sqlcreatefrag8924); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            NAME527_tree = (PythonTree)adaptor.create(NAME527);
            adaptor.addChild(root_0, NAME527_tree);
            }
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2176:34: ( LPAREN sqlrelationalproperties RPAREN )+
            int cnt203=0;
            loop203:
            do {
                int alt203=2;
                int LA203_0 = input.LA(1);

                if ( (LA203_0==LPAREN) ) {
                    alt203=1;
                }


                switch (alt203) {
            	case 1 :
            	    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2176:35: LPAREN sqlrelationalproperties RPAREN
            	    {
            	    LPAREN528=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_sqlcreatefrag8927); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    LPAREN528_tree = (PythonTree)adaptor.create(LPAREN528);
            	    adaptor.addChild(root_0, LPAREN528_tree);
            	    }
            	    pushFollow(FOLLOW_sqlrelationalproperties_in_sqlcreatefrag8929);
            	    sqlrelationalproperties529=sqlrelationalproperties();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, sqlrelationalproperties529.getTree());
            	    RPAREN530=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_sqlcreatefrag8931); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    RPAREN530_tree = (PythonTree)adaptor.create(RPAREN530);
            	    adaptor.addChild(root_0, RPAREN530_tree);
            	    }

            	    }
            	    break;

            	default :
            	    if ( cnt203 >= 1 ) break loop203;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(203, input);
                        throw eee;
                }
                cnt203++;
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (PythonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException re) {
            errorHandler.reportError(this, re);
            errorHandler.recover(this, input,re);
            retval.tree = (PythonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "sqlcreatefrag"

    public static class sqlrelationalproperties_return extends ParserRuleReturnScope {
        PythonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "sqlrelationalproperties"
    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2179:1: sqlrelationalproperties : sqlcolumndefinition ;
    public final PythonParser.sqlrelationalproperties_return sqlrelationalproperties() throws RecognitionException {
        PythonParser.sqlrelationalproperties_return retval = new PythonParser.sqlrelationalproperties_return();
        retval.start = input.LT(1);

        PythonTree root_0 = null;

        PythonParser.sqlcolumndefinition_return sqlcolumndefinition531 = null;



        try {
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2180:9: ( sqlcolumndefinition )
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2180:11: sqlcolumndefinition
            {
            root_0 = (PythonTree)adaptor.nil();

            pushFollow(FOLLOW_sqlcolumndefinition_in_sqlrelationalproperties8958);
            sqlcolumndefinition531=sqlcolumndefinition();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, sqlcolumndefinition531.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (PythonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException re) {
            errorHandler.reportError(this, re);
            errorHandler.recover(this, input,re);
            retval.tree = (PythonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "sqlrelationalproperties"

    public static class sqlcolumndefinition_return extends ParserRuleReturnScope {
        PythonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "sqlcolumndefinition"
    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2183:1: sqlcolumndefinition : NAME ( NAME | INTTYPE | FLOATTYPE | CHARTYPE | DATETYPE ) ( SORT )? ( DEFAULT sqlexpr )? ( COMMA NAME ( NAME | INTTYPE | FLOATTYPE | CHARTYPE | DATETYPE ) ( SORT )? ( DEFAULT sqlexpr )? )* ;
    public final PythonParser.sqlcolumndefinition_return sqlcolumndefinition() throws RecognitionException {
        PythonParser.sqlcolumndefinition_return retval = new PythonParser.sqlcolumndefinition_return();
        retval.start = input.LT(1);

        PythonTree root_0 = null;

        Token NAME532=null;
        Token set533=null;
        Token SORT534=null;
        Token DEFAULT535=null;
        Token COMMA537=null;
        Token NAME538=null;
        Token set539=null;
        Token SORT540=null;
        Token DEFAULT541=null;
        PythonParser.sqlexpr_return sqlexpr536 = null;

        PythonParser.sqlexpr_return sqlexpr542 = null;


        PythonTree NAME532_tree=null;
        PythonTree set533_tree=null;
        PythonTree SORT534_tree=null;
        PythonTree DEFAULT535_tree=null;
        PythonTree COMMA537_tree=null;
        PythonTree NAME538_tree=null;
        PythonTree set539_tree=null;
        PythonTree SORT540_tree=null;
        PythonTree DEFAULT541_tree=null;

        try {
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2184:9: ( NAME ( NAME | INTTYPE | FLOATTYPE | CHARTYPE | DATETYPE ) ( SORT )? ( DEFAULT sqlexpr )? ( COMMA NAME ( NAME | INTTYPE | FLOATTYPE | CHARTYPE | DATETYPE ) ( SORT )? ( DEFAULT sqlexpr )? )* )
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2184:11: NAME ( NAME | INTTYPE | FLOATTYPE | CHARTYPE | DATETYPE ) ( SORT )? ( DEFAULT sqlexpr )? ( COMMA NAME ( NAME | INTTYPE | FLOATTYPE | CHARTYPE | DATETYPE ) ( SORT )? ( DEFAULT sqlexpr )? )*
            {
            root_0 = (PythonTree)adaptor.nil();

            NAME532=(Token)match(input,NAME,FOLLOW_NAME_in_sqlcolumndefinition8983); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            NAME532_tree = (PythonTree)adaptor.create(NAME532);
            adaptor.addChild(root_0, NAME532_tree);
            }
            set533=(Token)input.LT(1);
            if ( input.LA(1)==NAME||(input.LA(1)>=INTTYPE && input.LA(1)<=DATETYPE) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (PythonTree)adaptor.create(set533));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }

            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2184:67: ( SORT )?
            int alt204=2;
            int LA204_0 = input.LA(1);

            if ( (LA204_0==SORT) ) {
                alt204=1;
            }
            switch (alt204) {
                case 1 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2184:67: SORT
                    {
                    SORT534=(Token)match(input,SORT,FOLLOW_SORT_in_sqlcolumndefinition9005); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SORT534_tree = (PythonTree)adaptor.create(SORT534);
                    adaptor.addChild(root_0, SORT534_tree);
                    }

                    }
                    break;

            }

            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2184:73: ( DEFAULT sqlexpr )?
            int alt205=2;
            int LA205_0 = input.LA(1);

            if ( (LA205_0==DEFAULT) ) {
                alt205=1;
            }
            switch (alt205) {
                case 1 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2184:74: DEFAULT sqlexpr
                    {
                    DEFAULT535=(Token)match(input,DEFAULT,FOLLOW_DEFAULT_in_sqlcolumndefinition9009); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DEFAULT535_tree = (PythonTree)adaptor.create(DEFAULT535);
                    adaptor.addChild(root_0, DEFAULT535_tree);
                    }
                    pushFollow(FOLLOW_sqlexpr_in_sqlcolumndefinition9011);
                    sqlexpr536=sqlexpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, sqlexpr536.getTree());

                    }
                    break;

            }

            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2185:9: ( COMMA NAME ( NAME | INTTYPE | FLOATTYPE | CHARTYPE | DATETYPE ) ( SORT )? ( DEFAULT sqlexpr )? )*
            loop208:
            do {
                int alt208=2;
                int LA208_0 = input.LA(1);

                if ( (LA208_0==COMMA) ) {
                    alt208=1;
                }


                switch (alt208) {
            	case 1 :
            	    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2185:11: COMMA NAME ( NAME | INTTYPE | FLOATTYPE | CHARTYPE | DATETYPE ) ( SORT )? ( DEFAULT sqlexpr )?
            	    {
            	    COMMA537=(Token)match(input,COMMA,FOLLOW_COMMA_in_sqlcolumndefinition9025); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    COMMA537_tree = (PythonTree)adaptor.create(COMMA537);
            	    adaptor.addChild(root_0, COMMA537_tree);
            	    }
            	    NAME538=(Token)match(input,NAME,FOLLOW_NAME_in_sqlcolumndefinition9027); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    NAME538_tree = (PythonTree)adaptor.create(NAME538);
            	    adaptor.addChild(root_0, NAME538_tree);
            	    }
            	    set539=(Token)input.LT(1);
            	    if ( input.LA(1)==NAME||(input.LA(1)>=INTTYPE && input.LA(1)<=DATETYPE) ) {
            	        input.consume();
            	        if ( state.backtracking==0 ) adaptor.addChild(root_0, (PythonTree)adaptor.create(set539));
            	        state.errorRecovery=false;state.failed=false;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        MismatchedSetException mse = new MismatchedSetException(null,input);
            	        throw mse;
            	    }

            	    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2185:73: ( SORT )?
            	    int alt206=2;
            	    int LA206_0 = input.LA(1);

            	    if ( (LA206_0==SORT) ) {
            	        alt206=1;
            	    }
            	    switch (alt206) {
            	        case 1 :
            	            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2185:73: SORT
            	            {
            	            SORT540=(Token)match(input,SORT,FOLLOW_SORT_in_sqlcolumndefinition9049); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            SORT540_tree = (PythonTree)adaptor.create(SORT540);
            	            adaptor.addChild(root_0, SORT540_tree);
            	            }

            	            }
            	            break;

            	    }

            	    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2185:79: ( DEFAULT sqlexpr )?
            	    int alt207=2;
            	    int LA207_0 = input.LA(1);

            	    if ( (LA207_0==DEFAULT) ) {
            	        alt207=1;
            	    }
            	    switch (alt207) {
            	        case 1 :
            	            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2185:80: DEFAULT sqlexpr
            	            {
            	            DEFAULT541=(Token)match(input,DEFAULT,FOLLOW_DEFAULT_in_sqlcolumndefinition9053); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            DEFAULT541_tree = (PythonTree)adaptor.create(DEFAULT541);
            	            adaptor.addChild(root_0, DEFAULT541_tree);
            	            }
            	            pushFollow(FOLLOW_sqlexpr_in_sqlcolumndefinition9055);
            	            sqlexpr542=sqlexpr();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, sqlexpr542.getTree());

            	            }
            	            break;

            	    }


            	    }
            	    break;

            	default :
            	    break loop208;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (PythonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException re) {
            errorHandler.reportError(this, re);
            errorHandler.recover(this, input,re);
            retval.tree = (PythonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "sqlcolumndefinition"

    public static class sqlcolumndefinition2_return extends ParserRuleReturnScope {
        PythonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "sqlcolumndefinition2"
    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2188:1: sqlcolumndefinition2 : COMMA NAME ( NAME | INTTYPE | FLOATTYPE | CHARTYPE | DATETYPE ) ( SORT )? ( DEFAULT sqlexpr )? ;
    public final PythonParser.sqlcolumndefinition2_return sqlcolumndefinition2() throws RecognitionException {
        PythonParser.sqlcolumndefinition2_return retval = new PythonParser.sqlcolumndefinition2_return();
        retval.start = input.LT(1);

        PythonTree root_0 = null;

        Token COMMA543=null;
        Token NAME544=null;
        Token set545=null;
        Token SORT546=null;
        Token DEFAULT547=null;
        PythonParser.sqlexpr_return sqlexpr548 = null;


        PythonTree COMMA543_tree=null;
        PythonTree NAME544_tree=null;
        PythonTree set545_tree=null;
        PythonTree SORT546_tree=null;
        PythonTree DEFAULT547_tree=null;

        try {
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2189:9: ( COMMA NAME ( NAME | INTTYPE | FLOATTYPE | CHARTYPE | DATETYPE ) ( SORT )? ( DEFAULT sqlexpr )? )
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2189:11: COMMA NAME ( NAME | INTTYPE | FLOATTYPE | CHARTYPE | DATETYPE ) ( SORT )? ( DEFAULT sqlexpr )?
            {
            root_0 = (PythonTree)adaptor.nil();

            COMMA543=(Token)match(input,COMMA,FOLLOW_COMMA_in_sqlcolumndefinition29085); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            COMMA543_tree = (PythonTree)adaptor.create(COMMA543);
            adaptor.addChild(root_0, COMMA543_tree);
            }
            NAME544=(Token)match(input,NAME,FOLLOW_NAME_in_sqlcolumndefinition29087); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            NAME544_tree = (PythonTree)adaptor.create(NAME544);
            adaptor.addChild(root_0, NAME544_tree);
            }
            set545=(Token)input.LT(1);
            if ( input.LA(1)==NAME||(input.LA(1)>=INTTYPE && input.LA(1)<=DATETYPE) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (PythonTree)adaptor.create(set545));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }

            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2189:73: ( SORT )?
            int alt209=2;
            int LA209_0 = input.LA(1);

            if ( (LA209_0==SORT) ) {
                alt209=1;
            }
            switch (alt209) {
                case 1 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2189:73: SORT
                    {
                    SORT546=(Token)match(input,SORT,FOLLOW_SORT_in_sqlcolumndefinition29109); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SORT546_tree = (PythonTree)adaptor.create(SORT546);
                    adaptor.addChild(root_0, SORT546_tree);
                    }

                    }
                    break;

            }

            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2189:79: ( DEFAULT sqlexpr )?
            int alt210=2;
            int LA210_0 = input.LA(1);

            if ( (LA210_0==DEFAULT) ) {
                alt210=1;
            }
            switch (alt210) {
                case 1 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2189:80: DEFAULT sqlexpr
                    {
                    DEFAULT547=(Token)match(input,DEFAULT,FOLLOW_DEFAULT_in_sqlcolumndefinition29113); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DEFAULT547_tree = (PythonTree)adaptor.create(DEFAULT547);
                    adaptor.addChild(root_0, DEFAULT547_tree);
                    }
                    pushFollow(FOLLOW_sqlexpr_in_sqlcolumndefinition29115);
                    sqlexpr548=sqlexpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, sqlexpr548.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (PythonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException re) {
            errorHandler.reportError(this, re);
            errorHandler.recover(this, input,re);
            retval.tree = (PythonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "sqlcolumndefinition2"

    public static class sqlwhereclause_return extends ParserRuleReturnScope {
        PythonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "sqlwhereclause"
    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2192:1: sqlwhereclause : s2= sqlwherefrag1 ( sqlsubquery | sqlexpr ) (s3= sqlwherefrag2 ( sqlsubquery | sqlexpr ) )* ;
    public final PythonParser.sqlwhereclause_return sqlwhereclause() throws RecognitionException {
        PythonParser.sqlwhereclause_return retval = new PythonParser.sqlwhereclause_return();
        retval.start = input.LT(1);

        PythonTree root_0 = null;

        PythonParser.sqlwherefrag1_return s2 = null;

        PythonParser.sqlwherefrag2_return s3 = null;

        PythonParser.sqlsubquery_return sqlsubquery549 = null;

        PythonParser.sqlexpr_return sqlexpr550 = null;

        PythonParser.sqlsubquery_return sqlsubquery551 = null;

        PythonParser.sqlexpr_return sqlexpr552 = null;



        try {
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2193:9: (s2= sqlwherefrag1 ( sqlsubquery | sqlexpr ) (s3= sqlwherefrag2 ( sqlsubquery | sqlexpr ) )* )
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2193:11: s2= sqlwherefrag1 ( sqlsubquery | sqlexpr ) (s3= sqlwherefrag2 ( sqlsubquery | sqlexpr ) )*
            {
            root_0 = (PythonTree)adaptor.nil();

            pushFollow(FOLLOW_sqlwherefrag1_in_sqlwhereclause9144);
            s2=sqlwherefrag1();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, s2.getTree());
            if ( state.backtracking==0 ) {
              ((sql_stmt_scope)sql_stmt_stack.peek()).temp+=(s2!=null?input.toString(s2.start,s2.stop):null)+" ";
            }
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2193:61: ( sqlsubquery | sqlexpr )
            int alt211=2;
            alt211 = dfa211.predict(input);
            switch (alt211) {
                case 1 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2193:63: sqlsubquery
                    {
                    pushFollow(FOLLOW_sqlsubquery_in_sqlwhereclause9150);
                    sqlsubquery549=sqlsubquery();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, sqlsubquery549.getTree());

                    }
                    break;
                case 2 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2193:77: sqlexpr
                    {
                    pushFollow(FOLLOW_sqlexpr_in_sqlwhereclause9154);
                    sqlexpr550=sqlexpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, sqlexpr550.getTree());

                    }
                    break;

            }

            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2194:11: (s3= sqlwherefrag2 ( sqlsubquery | sqlexpr ) )*
            loop213:
            do {
                int alt213=2;
                int LA213_0 = input.LA(1);

                if ( ((LA213_0>=CAPSAND && LA213_0<=CAPSOR)) ) {
                    alt213=1;
                }


                switch (alt213) {
            	case 1 :
            	    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2194:13: s3= sqlwherefrag2 ( sqlsubquery | sqlexpr )
            	    {
            	    pushFollow(FOLLOW_sqlwherefrag2_in_sqlwhereclause9171);
            	    s3=sqlwherefrag2();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, s3.getTree());
            	    if ( state.backtracking==0 ) {
            	      ((sql_stmt_scope)sql_stmt_stack.peek()).temp+=(s3!=null?input.toString(s3.start,s3.stop):null)+" ";
            	    }
            	    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2194:63: ( sqlsubquery | sqlexpr )
            	    int alt212=2;
            	    alt212 = dfa212.predict(input);
            	    switch (alt212) {
            	        case 1 :
            	            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2194:65: sqlsubquery
            	            {
            	            pushFollow(FOLLOW_sqlsubquery_in_sqlwhereclause9177);
            	            sqlsubquery551=sqlsubquery();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, sqlsubquery551.getTree());

            	            }
            	            break;
            	        case 2 :
            	            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2194:79: sqlexpr
            	            {
            	            pushFollow(FOLLOW_sqlexpr_in_sqlwhereclause9181);
            	            sqlexpr552=sqlexpr();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) adaptor.addChild(root_0, sqlexpr552.getTree());

            	            }
            	            break;

            	    }


            	    }
            	    break;

            	default :
            	    break loop213;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (PythonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException re) {
            errorHandler.reportError(this, re);
            errorHandler.recover(this, input,re);
            retval.tree = (PythonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "sqlwhereclause"

    public static class sqlwherefrag1_return extends ParserRuleReturnScope {
        PythonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "sqlwherefrag1"
    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2197:1: sqlwherefrag1 : WHERE ( NAME DOT )? NAME ( ASSIGN | LESS | LESSEQUAL | GREATER | GREATEREQUAL | ALT_NOTEQUAL ) ;
    public final PythonParser.sqlwherefrag1_return sqlwherefrag1() throws RecognitionException {
        PythonParser.sqlwherefrag1_return retval = new PythonParser.sqlwherefrag1_return();
        retval.start = input.LT(1);

        PythonTree root_0 = null;

        Token WHERE553=null;
        Token NAME554=null;
        Token DOT555=null;
        Token NAME556=null;
        Token set557=null;

        PythonTree WHERE553_tree=null;
        PythonTree NAME554_tree=null;
        PythonTree DOT555_tree=null;
        PythonTree NAME556_tree=null;
        PythonTree set557_tree=null;

        try {
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2198:9: ( WHERE ( NAME DOT )? NAME ( ASSIGN | LESS | LESSEQUAL | GREATER | GREATEREQUAL | ALT_NOTEQUAL ) )
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2198:11: WHERE ( NAME DOT )? NAME ( ASSIGN | LESS | LESSEQUAL | GREATER | GREATEREQUAL | ALT_NOTEQUAL )
            {
            root_0 = (PythonTree)adaptor.nil();

            WHERE553=(Token)match(input,WHERE,FOLLOW_WHERE_in_sqlwherefrag19210); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            WHERE553_tree = (PythonTree)adaptor.create(WHERE553);
            adaptor.addChild(root_0, WHERE553_tree);
            }
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2198:17: ( NAME DOT )?
            int alt214=2;
            int LA214_0 = input.LA(1);

            if ( (LA214_0==NAME) ) {
                int LA214_1 = input.LA(2);

                if ( (LA214_1==DOT) ) {
                    alt214=1;
                }
            }
            switch (alt214) {
                case 1 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2198:18: NAME DOT
                    {
                    NAME554=(Token)match(input,NAME,FOLLOW_NAME_in_sqlwherefrag19213); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NAME554_tree = (PythonTree)adaptor.create(NAME554);
                    adaptor.addChild(root_0, NAME554_tree);
                    }
                    DOT555=(Token)match(input,DOT,FOLLOW_DOT_in_sqlwherefrag19215); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DOT555_tree = (PythonTree)adaptor.create(DOT555);
                    adaptor.addChild(root_0, DOT555_tree);
                    }

                    }
                    break;

            }

            NAME556=(Token)match(input,NAME,FOLLOW_NAME_in_sqlwherefrag19219); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            NAME556_tree = (PythonTree)adaptor.create(NAME556);
            adaptor.addChild(root_0, NAME556_tree);
            }
            set557=(Token)input.LT(1);
            if ( input.LA(1)==ASSIGN||(input.LA(1)>=LESS && input.LA(1)<=GREATER)||(input.LA(1)>=GREATEREQUAL && input.LA(1)<=ALT_NOTEQUAL) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (PythonTree)adaptor.create(set557));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (PythonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException re) {
            errorHandler.reportError(this, re);
            errorHandler.recover(this, input,re);
            retval.tree = (PythonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "sqlwherefrag1"

    public static class sqlwherefrag2_return extends ParserRuleReturnScope {
        PythonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "sqlwherefrag2"
    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2201:1: sqlwherefrag2 : ( CAPSAND | CAPSOR ) ( NAME DOT )? NAME ( ASSIGN | LESS | LESSEQUAL | GREATER | GREATEREQUAL | ALT_NOTEQUAL ) ;
    public final PythonParser.sqlwherefrag2_return sqlwherefrag2() throws RecognitionException {
        PythonParser.sqlwherefrag2_return retval = new PythonParser.sqlwherefrag2_return();
        retval.start = input.LT(1);

        PythonTree root_0 = null;

        Token set558=null;
        Token NAME559=null;
        Token DOT560=null;
        Token NAME561=null;
        Token set562=null;

        PythonTree set558_tree=null;
        PythonTree NAME559_tree=null;
        PythonTree DOT560_tree=null;
        PythonTree NAME561_tree=null;
        PythonTree set562_tree=null;

        try {
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2202:2: ( ( CAPSAND | CAPSOR ) ( NAME DOT )? NAME ( ASSIGN | LESS | LESSEQUAL | GREATER | GREATEREQUAL | ALT_NOTEQUAL ) )
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2202:4: ( CAPSAND | CAPSOR ) ( NAME DOT )? NAME ( ASSIGN | LESS | LESSEQUAL | GREATER | GREATEREQUAL | ALT_NOTEQUAL )
            {
            root_0 = (PythonTree)adaptor.nil();

            set558=(Token)input.LT(1);
            if ( (input.LA(1)>=CAPSAND && input.LA(1)<=CAPSOR) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (PythonTree)adaptor.create(set558));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }

            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2202:25: ( NAME DOT )?
            int alt215=2;
            int LA215_0 = input.LA(1);

            if ( (LA215_0==NAME) ) {
                int LA215_1 = input.LA(2);

                if ( (LA215_1==DOT) ) {
                    alt215=1;
                }
            }
            switch (alt215) {
                case 1 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2202:26: NAME DOT
                    {
                    NAME559=(Token)match(input,NAME,FOLLOW_NAME_in_sqlwherefrag29274); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NAME559_tree = (PythonTree)adaptor.create(NAME559);
                    adaptor.addChild(root_0, NAME559_tree);
                    }
                    DOT560=(Token)match(input,DOT,FOLLOW_DOT_in_sqlwherefrag29276); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DOT560_tree = (PythonTree)adaptor.create(DOT560);
                    adaptor.addChild(root_0, DOT560_tree);
                    }

                    }
                    break;

            }

            NAME561=(Token)match(input,NAME,FOLLOW_NAME_in_sqlwherefrag29280); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            NAME561_tree = (PythonTree)adaptor.create(NAME561);
            adaptor.addChild(root_0, NAME561_tree);
            }
            set562=(Token)input.LT(1);
            if ( input.LA(1)==ASSIGN||(input.LA(1)>=LESS && input.LA(1)<=GREATER)||(input.LA(1)>=GREATEREQUAL && input.LA(1)<=ALT_NOTEQUAL) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (PythonTree)adaptor.create(set562));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (PythonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException re) {
            errorHandler.reportError(this, re);
            errorHandler.recover(this, input,re);
            retval.tree = (PythonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "sqlwherefrag2"

    public static class sqlsubquery_return extends ParserRuleReturnScope {
        PythonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "sqlsubquery"
    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2207:1: sqlsubquery : ( LPAREN SELECT )=> LPAREN SELECT subquery ;
    public final PythonParser.sqlsubquery_return sqlsubquery() throws RecognitionException {
        PythonParser.sqlsubquery_return retval = new PythonParser.sqlsubquery_return();
        retval.start = input.LT(1);

        PythonTree root_0 = null;

        Token LPAREN563=null;
        Token SELECT564=null;
        PythonParser.subquery_return subquery565 = null;


        PythonTree LPAREN563_tree=null;
        PythonTree SELECT564_tree=null;

        try {
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2208:2: ( ( LPAREN SELECT )=> LPAREN SELECT subquery )
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2209:4: ( LPAREN SELECT )=> LPAREN SELECT subquery
            {
            root_0 = (PythonTree)adaptor.nil();

            LPAREN563=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_sqlsubquery9333); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LPAREN563_tree = (PythonTree)adaptor.create(LPAREN563);
            adaptor.addChild(root_0, LPAREN563_tree);
            }
            SELECT564=(Token)match(input,SELECT,FOLLOW_SELECT_in_sqlsubquery9335); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SELECT564_tree = (PythonTree)adaptor.create(SELECT564);
            adaptor.addChild(root_0, SELECT564_tree);
            }
            if ( state.backtracking==0 ) {
              ((sql_stmt_scope)sql_stmt_stack.peek()).temp+="(SELECT "; System.out.println("Inside sqlsubquery nonterminal."); 
            }
            pushFollow(FOLLOW_subquery_in_sqlsubquery9343);
            subquery565=subquery();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, subquery565.getTree());
            if ( state.backtracking==0 ) {
              ((sql_stmt_scope)sql_stmt_stack.peek()).temp+=")";
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (PythonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException re) {
            errorHandler.reportError(this, re);
            errorHandler.recover(this, input,re);
            retval.tree = (PythonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "sqlsubquery"

    public static class subquery_return extends ParserRuleReturnScope {
        PythonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "subquery"
    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2212:1: subquery : s7= sqlquery RPAREN ;
    public final PythonParser.subquery_return subquery() throws RecognitionException {
        PythonParser.subquery_return retval = new PythonParser.subquery_return();
        retval.start = input.LT(1);

        PythonTree root_0 = null;

        Token RPAREN566=null;
        PythonParser.sqlquery_return s7 = null;


        PythonTree RPAREN566_tree=null;

        try {
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2213:2: (s7= sqlquery RPAREN )
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2214:3: s7= sqlquery RPAREN
            {
            root_0 = (PythonTree)adaptor.nil();

            pushFollow(FOLLOW_sqlquery_in_subquery9359);
            s7=sqlquery();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, s7.getTree());
            RPAREN566=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_subquery9361); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RPAREN566_tree = (PythonTree)adaptor.create(RPAREN566);
            adaptor.addChild(root_0, RPAREN566_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (PythonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException re) {
            errorHandler.reportError(this, re);
            errorHandler.recover(this, input,re);
            retval.tree = (PythonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "subquery"

    public static class sqlexpr_return extends ParserRuleReturnScope {
        PythonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "sqlexpr"
    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2219:1: sqlexpr : e= expr[expr_contextType.Load] ;
    public final PythonParser.sqlexpr_return sqlexpr() throws RecognitionException {
        PythonParser.sqlexpr_return retval = new PythonParser.sqlexpr_return();
        retval.start = input.LT(1);

        PythonTree root_0 = null;

        PythonParser.expr_return e = null;



        try {
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2220:2: (e= expr[expr_contextType.Load] )
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2220:4: e= expr[expr_contextType.Load]
            {
            root_0 = (PythonTree)adaptor.nil();

            pushFollow(FOLLOW_expr_in_sqlexpr9380);
            e=expr(expr_contextType.Load);

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, e.getTree());
            if ( state.backtracking==0 ) {
              ((sql_stmt_scope)sql_stmt_stack.peek()).exprs.add(actions.castExpr((e!=null?((PythonTree)e.tree):null)));((sql_stmt_scope)sql_stmt_stack.peek()).strings.add(((sql_stmt_scope)sql_stmt_stack.peek()).temp);((sql_stmt_scope)sql_stmt_stack.peek()).temp =""; 
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (PythonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException re) {
            errorHandler.reportError(this, re);
            errorHandler.recover(this, input,re);
            retval.tree = (PythonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "sqlexpr"

    protected static class sim_stmt_scope {
        List strings;
        List exprs;
        String temp;
    }
    protected Stack sim_stmt_stack = new Stack();

    public static class sim_stmt_return extends ParserRuleReturnScope {
        PythonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "sim_stmt"
    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2224:1: sim_stmt : ( ( MODIFY modifystmt SEMI -> ^( MODIFY[$sim_stmt.start, actions.castExprs($sim_stmt::exprs), $expr::ctype, $sim_stmt::strings, \"SIM\"] ) ) | ( CAPSFROM retrievestmt -> ^( FROM[$sim_stmt.start, actions.castExprs($sim_stmt::exprs), $expr::ctype, $sim_stmt::strings, \"SIM\"] ) ) | ( INSERT insertstmt SEMI -> ^( FROM[$sim_stmt.start, actions.castExprs($sim_stmt::exprs), $expr::ctype, $sim_stmt::strings, \"SIM\"] ) ) | ( CAPSCLASS class_stmt SEMI -> ^( CAPSCLASS[$sim_stmt.start, actions.castExprs($sim_stmt::exprs), $expr::ctype, $sim_stmt::strings, \"SIM\"] ) ) | ( SUBCLASS subclass_stmt SEMI -> ^( SUBCLASS[$sim_stmt.start, actions.castExprs($sim_stmt::exprs), $expr::ctype, $sim_stmt::strings, \"SIM\"] ) ) ) ;
    public final PythonParser.sim_stmt_return sim_stmt() throws RecognitionException {
        connection_stack.push(new connection_scope());
        sim_stmt_stack.push(new sim_stmt_scope());
        PythonParser.sim_stmt_return retval = new PythonParser.sim_stmt_return();
        retval.start = input.LT(1);

        PythonTree root_0 = null;

        Token MODIFY567=null;
        Token SEMI569=null;
        Token CAPSFROM570=null;
        Token INSERT572=null;
        Token SEMI574=null;
        Token CAPSCLASS575=null;
        Token SEMI577=null;
        Token SUBCLASS578=null;
        Token SEMI580=null;
        PythonParser.modifystmt_return modifystmt568 = null;

        PythonParser.retrievestmt_return retrievestmt571 = null;

        PythonParser.insertstmt_return insertstmt573 = null;

        PythonParser.class_stmt_return class_stmt576 = null;

        PythonParser.subclass_stmt_return subclass_stmt579 = null;


        PythonTree MODIFY567_tree=null;
        PythonTree SEMI569_tree=null;
        PythonTree CAPSFROM570_tree=null;
        PythonTree INSERT572_tree=null;
        PythonTree SEMI574_tree=null;
        PythonTree CAPSCLASS575_tree=null;
        PythonTree SEMI577_tree=null;
        PythonTree SUBCLASS578_tree=null;
        PythonTree SEMI580_tree=null;
        RewriteRuleTokenStream stream_MODIFY=new RewriteRuleTokenStream(adaptor,"token MODIFY");
        RewriteRuleTokenStream stream_SUBCLASS=new RewriteRuleTokenStream(adaptor,"token SUBCLASS");
        RewriteRuleTokenStream stream_CAPSFROM=new RewriteRuleTokenStream(adaptor,"token CAPSFROM");
        RewriteRuleTokenStream stream_CAPSCLASS=new RewriteRuleTokenStream(adaptor,"token CAPSCLASS");
        RewriteRuleTokenStream stream_INSERT=new RewriteRuleTokenStream(adaptor,"token INSERT");
        RewriteRuleTokenStream stream_SEMI=new RewriteRuleTokenStream(adaptor,"token SEMI");
        RewriteRuleSubtreeStream stream_class_stmt=new RewriteRuleSubtreeStream(adaptor,"rule class_stmt");
        RewriteRuleSubtreeStream stream_insertstmt=new RewriteRuleSubtreeStream(adaptor,"rule insertstmt");
        RewriteRuleSubtreeStream stream_retrievestmt=new RewriteRuleSubtreeStream(adaptor,"rule retrievestmt");
        RewriteRuleSubtreeStream stream_subclass_stmt=new RewriteRuleSubtreeStream(adaptor,"rule subclass_stmt");
        RewriteRuleSubtreeStream stream_modifystmt=new RewriteRuleSubtreeStream(adaptor,"rule modifystmt");

            expr etype = null;

        try {
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2239:5: ( ( ( MODIFY modifystmt SEMI -> ^( MODIFY[$sim_stmt.start, actions.castExprs($sim_stmt::exprs), $expr::ctype, $sim_stmt::strings, \"SIM\"] ) ) | ( CAPSFROM retrievestmt -> ^( FROM[$sim_stmt.start, actions.castExprs($sim_stmt::exprs), $expr::ctype, $sim_stmt::strings, \"SIM\"] ) ) | ( INSERT insertstmt SEMI -> ^( FROM[$sim_stmt.start, actions.castExprs($sim_stmt::exprs), $expr::ctype, $sim_stmt::strings, \"SIM\"] ) ) | ( CAPSCLASS class_stmt SEMI -> ^( CAPSCLASS[$sim_stmt.start, actions.castExprs($sim_stmt::exprs), $expr::ctype, $sim_stmt::strings, \"SIM\"] ) ) | ( SUBCLASS subclass_stmt SEMI -> ^( SUBCLASS[$sim_stmt.start, actions.castExprs($sim_stmt::exprs), $expr::ctype, $sim_stmt::strings, \"SIM\"] ) ) ) )
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2240:9: ( ( MODIFY modifystmt SEMI -> ^( MODIFY[$sim_stmt.start, actions.castExprs($sim_stmt::exprs), $expr::ctype, $sim_stmt::strings, \"SIM\"] ) ) | ( CAPSFROM retrievestmt -> ^( FROM[$sim_stmt.start, actions.castExprs($sim_stmt::exprs), $expr::ctype, $sim_stmt::strings, \"SIM\"] ) ) | ( INSERT insertstmt SEMI -> ^( FROM[$sim_stmt.start, actions.castExprs($sim_stmt::exprs), $expr::ctype, $sim_stmt::strings, \"SIM\"] ) ) | ( CAPSCLASS class_stmt SEMI -> ^( CAPSCLASS[$sim_stmt.start, actions.castExprs($sim_stmt::exprs), $expr::ctype, $sim_stmt::strings, \"SIM\"] ) ) | ( SUBCLASS subclass_stmt SEMI -> ^( SUBCLASS[$sim_stmt.start, actions.castExprs($sim_stmt::exprs), $expr::ctype, $sim_stmt::strings, \"SIM\"] ) ) )
            {
            if ( state.backtracking==0 ) {

                         ((sim_stmt_scope)sim_stmt_stack.peek()).strings = new ArrayList<String>();
                         ((sim_stmt_scope)sim_stmt_stack.peek()).exprs = new ArrayList<expr>();
                         ((sim_stmt_scope)sim_stmt_stack.peek()).temp ="";
                      
            }
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2245:9: ( ( MODIFY modifystmt SEMI -> ^( MODIFY[$sim_stmt.start, actions.castExprs($sim_stmt::exprs), $expr::ctype, $sim_stmt::strings, \"SIM\"] ) ) | ( CAPSFROM retrievestmt -> ^( FROM[$sim_stmt.start, actions.castExprs($sim_stmt::exprs), $expr::ctype, $sim_stmt::strings, \"SIM\"] ) ) | ( INSERT insertstmt SEMI -> ^( FROM[$sim_stmt.start, actions.castExprs($sim_stmt::exprs), $expr::ctype, $sim_stmt::strings, \"SIM\"] ) ) | ( CAPSCLASS class_stmt SEMI -> ^( CAPSCLASS[$sim_stmt.start, actions.castExprs($sim_stmt::exprs), $expr::ctype, $sim_stmt::strings, \"SIM\"] ) ) | ( SUBCLASS subclass_stmt SEMI -> ^( SUBCLASS[$sim_stmt.start, actions.castExprs($sim_stmt::exprs), $expr::ctype, $sim_stmt::strings, \"SIM\"] ) ) )
            int alt216=5;
            switch ( input.LA(1) ) {
            case MODIFY:
                {
                alt216=1;
                }
                break;
            case CAPSFROM:
                {
                alt216=2;
                }
                break;
            case INSERT:
                {
                alt216=3;
                }
                break;
            case CAPSCLASS:
                {
                alt216=4;
                }
                break;
            case SUBCLASS:
                {
                alt216=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 216, 0, input);

                throw nvae;
            }

            switch (alt216) {
                case 1 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2246:2: ( MODIFY modifystmt SEMI -> ^( MODIFY[$sim_stmt.start, actions.castExprs($sim_stmt::exprs), $expr::ctype, $sim_stmt::strings, \"SIM\"] ) )
                    {
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2246:2: ( MODIFY modifystmt SEMI -> ^( MODIFY[$sim_stmt.start, actions.castExprs($sim_stmt::exprs), $expr::ctype, $sim_stmt::strings, \"SIM\"] ) )
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2246:3: MODIFY modifystmt SEMI
                    {
                    MODIFY567=(Token)match(input,MODIFY,FOLLOW_MODIFY_in_sim_stmt9440); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_MODIFY.add(MODIFY567);

                    pushFollow(FOLLOW_modifystmt_in_sim_stmt9442);
                    modifystmt568=modifystmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_modifystmt.add(modifystmt568.getTree());
                    SEMI569=(Token)match(input,SEMI,FOLLOW_SEMI_in_sim_stmt9444); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SEMI.add(SEMI569);

                    if ( state.backtracking==0 ) {
                      ((sim_stmt_scope)sim_stmt_stack.peek()).strings.add(((sim_stmt_scope)sim_stmt_stack.peek()).temp);
                    }


                    // AST REWRITE
                    // elements: MODIFY
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (PythonTree)adaptor.nil();
                    // 2247:9: -> ^( MODIFY[$sim_stmt.start, actions.castExprs($sim_stmt::exprs), $expr::ctype, $sim_stmt::strings, \"SIM\"] )
                    {
                        // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2247:12: ^( MODIFY[$sim_stmt.start, actions.castExprs($sim_stmt::exprs), $expr::ctype, $sim_stmt::strings, \"SIM\"] )
                        {
                        PythonTree root_1 = (PythonTree)adaptor.nil();
                        root_1 = (PythonTree)adaptor.becomeRoot(new Tuple(MODIFY, ((Token)retval.start), actions.castExprs(((sim_stmt_scope)sim_stmt_stack.peek()).exprs), ((expr_scope)expr_stack.peek()).ctype, ((sim_stmt_scope)sim_stmt_stack.peek()).strings, "SIM"), root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }


                    }
                    break;
                case 2 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2248:4: ( CAPSFROM retrievestmt -> ^( FROM[$sim_stmt.start, actions.castExprs($sim_stmt::exprs), $expr::ctype, $sim_stmt::strings, \"SIM\"] ) )
                    {
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2248:4: ( CAPSFROM retrievestmt -> ^( FROM[$sim_stmt.start, actions.castExprs($sim_stmt::exprs), $expr::ctype, $sim_stmt::strings, \"SIM\"] ) )
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2248:5: CAPSFROM retrievestmt
                    {
                    CAPSFROM570=(Token)match(input,CAPSFROM,FOLLOW_CAPSFROM_in_sim_stmt9471); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CAPSFROM.add(CAPSFROM570);

                    pushFollow(FOLLOW_retrievestmt_in_sim_stmt9473);
                    retrievestmt571=retrievestmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_retrievestmt.add(retrievestmt571.getTree());
                    if ( state.backtracking==0 ) {
                      ((sim_stmt_scope)sim_stmt_stack.peek()).strings.add(((sim_stmt_scope)sim_stmt_stack.peek()).temp);
                    }


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (PythonTree)adaptor.nil();
                    // 2249:9: -> ^( FROM[$sim_stmt.start, actions.castExprs($sim_stmt::exprs), $expr::ctype, $sim_stmt::strings, \"SIM\"] )
                    {
                        // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2249:12: ^( FROM[$sim_stmt.start, actions.castExprs($sim_stmt::exprs), $expr::ctype, $sim_stmt::strings, \"SIM\"] )
                        {
                        PythonTree root_1 = (PythonTree)adaptor.nil();
                        root_1 = (PythonTree)adaptor.becomeRoot(new Tuple(FROM, ((Token)retval.start), actions.castExprs(((sim_stmt_scope)sim_stmt_stack.peek()).exprs), ((expr_scope)expr_stack.peek()).ctype, ((sim_stmt_scope)sim_stmt_stack.peek()).strings, "SIM"), root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }


                    }
                    break;
                case 3 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2250:4: ( INSERT insertstmt SEMI -> ^( FROM[$sim_stmt.start, actions.castExprs($sim_stmt::exprs), $expr::ctype, $sim_stmt::strings, \"SIM\"] ) )
                    {
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2250:4: ( INSERT insertstmt SEMI -> ^( FROM[$sim_stmt.start, actions.castExprs($sim_stmt::exprs), $expr::ctype, $sim_stmt::strings, \"SIM\"] ) )
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2250:5: INSERT insertstmt SEMI
                    {
                    INSERT572=(Token)match(input,INSERT,FOLLOW_INSERT_in_sim_stmt9500); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_INSERT.add(INSERT572);

                    pushFollow(FOLLOW_insertstmt_in_sim_stmt9502);
                    insertstmt573=insertstmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_insertstmt.add(insertstmt573.getTree());
                    SEMI574=(Token)match(input,SEMI,FOLLOW_SEMI_in_sim_stmt9504); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SEMI.add(SEMI574);

                    if ( state.backtracking==0 ) {
                      ((sim_stmt_scope)sim_stmt_stack.peek()).strings.add(((sim_stmt_scope)sim_stmt_stack.peek()).temp);
                    }


                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (PythonTree)adaptor.nil();
                    // 2251:9: -> ^( FROM[$sim_stmt.start, actions.castExprs($sim_stmt::exprs), $expr::ctype, $sim_stmt::strings, \"SIM\"] )
                    {
                        // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2251:12: ^( FROM[$sim_stmt.start, actions.castExprs($sim_stmt::exprs), $expr::ctype, $sim_stmt::strings, \"SIM\"] )
                        {
                        PythonTree root_1 = (PythonTree)adaptor.nil();
                        root_1 = (PythonTree)adaptor.becomeRoot(new Tuple(FROM, ((Token)retval.start), actions.castExprs(((sim_stmt_scope)sim_stmt_stack.peek()).exprs), ((expr_scope)expr_stack.peek()).ctype, ((sim_stmt_scope)sim_stmt_stack.peek()).strings, "SIM"), root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }


                    }
                    break;
                case 4 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2252:4: ( CAPSCLASS class_stmt SEMI -> ^( CAPSCLASS[$sim_stmt.start, actions.castExprs($sim_stmt::exprs), $expr::ctype, $sim_stmt::strings, \"SIM\"] ) )
                    {
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2252:4: ( CAPSCLASS class_stmt SEMI -> ^( CAPSCLASS[$sim_stmt.start, actions.castExprs($sim_stmt::exprs), $expr::ctype, $sim_stmt::strings, \"SIM\"] ) )
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2252:5: CAPSCLASS class_stmt SEMI
                    {
                    CAPSCLASS575=(Token)match(input,CAPSCLASS,FOLLOW_CAPSCLASS_in_sim_stmt9532); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CAPSCLASS.add(CAPSCLASS575);

                    pushFollow(FOLLOW_class_stmt_in_sim_stmt9534);
                    class_stmt576=class_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_class_stmt.add(class_stmt576.getTree());
                    SEMI577=(Token)match(input,SEMI,FOLLOW_SEMI_in_sim_stmt9536); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SEMI.add(SEMI577);

                    if ( state.backtracking==0 ) {
                      ((sim_stmt_scope)sim_stmt_stack.peek()).strings.add(((sim_stmt_scope)sim_stmt_stack.peek()).temp);
                    }


                    // AST REWRITE
                    // elements: CAPSCLASS
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (PythonTree)adaptor.nil();
                    // 2253:9: -> ^( CAPSCLASS[$sim_stmt.start, actions.castExprs($sim_stmt::exprs), $expr::ctype, $sim_stmt::strings, \"SIM\"] )
                    {
                        // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2253:12: ^( CAPSCLASS[$sim_stmt.start, actions.castExprs($sim_stmt::exprs), $expr::ctype, $sim_stmt::strings, \"SIM\"] )
                        {
                        PythonTree root_1 = (PythonTree)adaptor.nil();
                        root_1 = (PythonTree)adaptor.becomeRoot(new Tuple(CAPSCLASS, ((Token)retval.start), actions.castExprs(((sim_stmt_scope)sim_stmt_stack.peek()).exprs), ((expr_scope)expr_stack.peek()).ctype, ((sim_stmt_scope)sim_stmt_stack.peek()).strings, "SIM"), root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }


                    }
                    break;
                case 5 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2254:4: ( SUBCLASS subclass_stmt SEMI -> ^( SUBCLASS[$sim_stmt.start, actions.castExprs($sim_stmt::exprs), $expr::ctype, $sim_stmt::strings, \"SIM\"] ) )
                    {
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2254:4: ( SUBCLASS subclass_stmt SEMI -> ^( SUBCLASS[$sim_stmt.start, actions.castExprs($sim_stmt::exprs), $expr::ctype, $sim_stmt::strings, \"SIM\"] ) )
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2254:5: SUBCLASS subclass_stmt SEMI
                    {
                    SUBCLASS578=(Token)match(input,SUBCLASS,FOLLOW_SUBCLASS_in_sim_stmt9563); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SUBCLASS.add(SUBCLASS578);

                    pushFollow(FOLLOW_subclass_stmt_in_sim_stmt9565);
                    subclass_stmt579=subclass_stmt();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_subclass_stmt.add(subclass_stmt579.getTree());
                    SEMI580=(Token)match(input,SEMI,FOLLOW_SEMI_in_sim_stmt9567); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SEMI.add(SEMI580);

                    if ( state.backtracking==0 ) {
                      ((sim_stmt_scope)sim_stmt_stack.peek()).strings.add(((sim_stmt_scope)sim_stmt_stack.peek()).temp);
                    }


                    // AST REWRITE
                    // elements: SUBCLASS
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (PythonTree)adaptor.nil();
                    // 2255:9: -> ^( SUBCLASS[$sim_stmt.start, actions.castExprs($sim_stmt::exprs), $expr::ctype, $sim_stmt::strings, \"SIM\"] )
                    {
                        // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2255:12: ^( SUBCLASS[$sim_stmt.start, actions.castExprs($sim_stmt::exprs), $expr::ctype, $sim_stmt::strings, \"SIM\"] )
                        {
                        PythonTree root_1 = (PythonTree)adaptor.nil();
                        root_1 = (PythonTree)adaptor.becomeRoot(new Tuple(SUBCLASS, ((Token)retval.start), actions.castExprs(((sim_stmt_scope)sim_stmt_stack.peek()).exprs), ((expr_scope)expr_stack.peek()).ctype, ((sim_stmt_scope)sim_stmt_stack.peek()).strings, "SIM"), root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (PythonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {

                  if (etype != null) {
                      retval.tree = etype;
                  }

            }
        }

        catch (RecognitionException re) {
            errorHandler.reportError(this, re);
            errorHandler.recover(this, input,re);
            retval.tree = (PythonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
        }
        finally {
            connection_stack.pop();
            sim_stmt_stack.pop();
        }
        return retval;
    }
    // $ANTLR end "sim_stmt"

    public static class modifystmt_return extends ParserRuleReturnScope {
        PythonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "modifystmt"
    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2259:10: fragment modifystmt : ( limitfrag )? classfrag LPAREN assignment_expression ( COMMA assignment_expression )* RPAREN whereclausefrag ;
    public final PythonParser.modifystmt_return modifystmt() throws RecognitionException {
        PythonParser.modifystmt_return retval = new PythonParser.modifystmt_return();
        retval.start = input.LT(1);

        PythonTree root_0 = null;

        Token LPAREN583=null;
        Token COMMA585=null;
        Token RPAREN587=null;
        PythonParser.limitfrag_return limitfrag581 = null;

        PythonParser.classfrag_return classfrag582 = null;

        PythonParser.assignment_expression_return assignment_expression584 = null;

        PythonParser.assignment_expression_return assignment_expression586 = null;

        PythonParser.whereclausefrag_return whereclausefrag588 = null;


        PythonTree LPAREN583_tree=null;
        PythonTree COMMA585_tree=null;
        PythonTree RPAREN587_tree=null;

        try {
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2260:2: ( ( limitfrag )? classfrag LPAREN assignment_expression ( COMMA assignment_expression )* RPAREN whereclausefrag )
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2261:2: ( limitfrag )? classfrag LPAREN assignment_expression ( COMMA assignment_expression )* RPAREN whereclausefrag
            {
            root_0 = (PythonTree)adaptor.nil();

            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2261:2: ( limitfrag )?
            int alt217=2;
            int LA217_0 = input.LA(1);

            if ( (LA217_0==LIMIT) ) {
                alt217=1;
            }
            switch (alt217) {
                case 1 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2261:2: limitfrag
                    {
                    pushFollow(FOLLOW_limitfrag_in_modifystmt9607);
                    limitfrag581=limitfrag();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, limitfrag581.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_classfrag_in_modifystmt9610);
            classfrag582=classfrag();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, classfrag582.getTree());
            LPAREN583=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_modifystmt9612); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LPAREN583_tree = (PythonTree)adaptor.create(LPAREN583);
            adaptor.addChild(root_0, LPAREN583_tree);
            }
            pushFollow(FOLLOW_assignment_expression_in_modifystmt9614);
            assignment_expression584=assignment_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, assignment_expression584.getTree());
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2261:52: ( COMMA assignment_expression )*
            loop218:
            do {
                int alt218=2;
                int LA218_0 = input.LA(1);

                if ( (LA218_0==COMMA) ) {
                    alt218=1;
                }


                switch (alt218) {
            	case 1 :
            	    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2261:53: COMMA assignment_expression
            	    {
            	    COMMA585=(Token)match(input,COMMA,FOLLOW_COMMA_in_modifystmt9617); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    COMMA585_tree = (PythonTree)adaptor.create(COMMA585);
            	    adaptor.addChild(root_0, COMMA585_tree);
            	    }
            	    pushFollow(FOLLOW_assignment_expression_in_modifystmt9619);
            	    assignment_expression586=assignment_expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, assignment_expression586.getTree());

            	    }
            	    break;

            	default :
            	    break loop218;
                }
            } while (true);

            RPAREN587=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_modifystmt9623); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RPAREN587_tree = (PythonTree)adaptor.create(RPAREN587);
            adaptor.addChild(root_0, RPAREN587_tree);
            }
            pushFollow(FOLLOW_whereclausefrag_in_modifystmt9625);
            whereclausefrag588=whereclausefrag();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, whereclausefrag588.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (PythonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException re) {
            errorHandler.reportError(this, re);
            errorHandler.recover(this, input,re);
            retval.tree = (PythonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "modifystmt"

    public static class retrievestmt_return extends ParserRuleReturnScope {
        PythonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "retrievestmt"
    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2264:10: fragment retrievestmt : classfrag ret= RETRIEVE selectattributefrag ( COMMA selectattributefrag )* fromwherefrag ;
    public final PythonParser.retrievestmt_return retrievestmt() throws RecognitionException {
        PythonParser.retrievestmt_return retval = new PythonParser.retrievestmt_return();
        retval.start = input.LT(1);

        PythonTree root_0 = null;

        Token ret=null;
        Token COMMA591=null;
        PythonParser.classfrag_return classfrag589 = null;

        PythonParser.selectattributefrag_return selectattributefrag590 = null;

        PythonParser.selectattributefrag_return selectattributefrag592 = null;

        PythonParser.fromwherefrag_return fromwherefrag593 = null;


        PythonTree ret_tree=null;
        PythonTree COMMA591_tree=null;

        try {
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2265:2: ( classfrag ret= RETRIEVE selectattributefrag ( COMMA selectattributefrag )* fromwherefrag )
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2266:2: classfrag ret= RETRIEVE selectattributefrag ( COMMA selectattributefrag )* fromwherefrag
            {
            root_0 = (PythonTree)adaptor.nil();

            pushFollow(FOLLOW_classfrag_in_retrievestmt9639);
            classfrag589=classfrag();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, classfrag589.getTree());
            ret=(Token)match(input,RETRIEVE,FOLLOW_RETRIEVE_in_retrievestmt9643); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ret_tree = (PythonTree)adaptor.create(ret);
            adaptor.addChild(root_0, ret_tree);
            }
            if ( state.backtracking==0 ) {
              ((sim_stmt_scope)sim_stmt_stack.peek()).strings.add((ret!=null?ret.getText():null));
            }
            pushFollow(FOLLOW_selectattributefrag_in_retrievestmt9647);
            selectattributefrag590=selectattributefrag();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, selectattributefrag590.getTree());
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2266:82: ( COMMA selectattributefrag )*
            loop219:
            do {
                int alt219=2;
                int LA219_0 = input.LA(1);

                if ( (LA219_0==COMMA) ) {
                    alt219=1;
                }


                switch (alt219) {
            	case 1 :
            	    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2266:83: COMMA selectattributefrag
            	    {
            	    COMMA591=(Token)match(input,COMMA,FOLLOW_COMMA_in_retrievestmt9650); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    COMMA591_tree = (PythonTree)adaptor.create(COMMA591);
            	    adaptor.addChild(root_0, COMMA591_tree);
            	    }
            	    pushFollow(FOLLOW_selectattributefrag_in_retrievestmt9652);
            	    selectattributefrag592=selectattributefrag();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, selectattributefrag592.getTree());

            	    }
            	    break;

            	default :
            	    break loop219;
                }
            } while (true);

            pushFollow(FOLLOW_fromwherefrag_in_retrievestmt9656);
            fromwherefrag593=fromwherefrag();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, fromwherefrag593.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (PythonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException re) {
            errorHandler.reportError(this, re);
            errorHandler.recover(this, input,re);
            retval.tree = (PythonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "retrievestmt"

    public static class insertstmt_return extends ParserRuleReturnScope {
        PythonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "insertstmt"
    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2269:10: fragment insertstmt : classfrag ( from_insert )? LPAREN assignment_expression ( COMMA assignment_expression )* RPAREN ;
    public final PythonParser.insertstmt_return insertstmt() throws RecognitionException {
        PythonParser.insertstmt_return retval = new PythonParser.insertstmt_return();
        retval.start = input.LT(1);

        PythonTree root_0 = null;

        Token LPAREN596=null;
        Token COMMA598=null;
        Token RPAREN600=null;
        PythonParser.classfrag_return classfrag594 = null;

        PythonParser.from_insert_return from_insert595 = null;

        PythonParser.assignment_expression_return assignment_expression597 = null;

        PythonParser.assignment_expression_return assignment_expression599 = null;


        PythonTree LPAREN596_tree=null;
        PythonTree COMMA598_tree=null;
        PythonTree RPAREN600_tree=null;

        try {
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2270:2: ( classfrag ( from_insert )? LPAREN assignment_expression ( COMMA assignment_expression )* RPAREN )
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2271:2: classfrag ( from_insert )? LPAREN assignment_expression ( COMMA assignment_expression )* RPAREN
            {
            root_0 = (PythonTree)adaptor.nil();

            pushFollow(FOLLOW_classfrag_in_insertstmt9670);
            classfrag594=classfrag();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, classfrag594.getTree());
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2271:12: ( from_insert )?
            int alt220=2;
            int LA220_0 = input.LA(1);

            if ( (LA220_0==CAPSFROM) ) {
                alt220=1;
            }
            switch (alt220) {
                case 1 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2271:13: from_insert
                    {
                    pushFollow(FOLLOW_from_insert_in_insertstmt9673);
                    from_insert595=from_insert();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, from_insert595.getTree());

                    }
                    break;

            }

            LPAREN596=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_insertstmt9677); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LPAREN596_tree = (PythonTree)adaptor.create(LPAREN596);
            adaptor.addChild(root_0, LPAREN596_tree);
            }
            pushFollow(FOLLOW_assignment_expression_in_insertstmt9679);
            assignment_expression597=assignment_expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, assignment_expression597.getTree());
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2271:56: ( COMMA assignment_expression )*
            loop221:
            do {
                int alt221=2;
                int LA221_0 = input.LA(1);

                if ( (LA221_0==COMMA) ) {
                    alt221=1;
                }


                switch (alt221) {
            	case 1 :
            	    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2271:57: COMMA assignment_expression
            	    {
            	    COMMA598=(Token)match(input,COMMA,FOLLOW_COMMA_in_insertstmt9682); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    COMMA598_tree = (PythonTree)adaptor.create(COMMA598);
            	    adaptor.addChild(root_0, COMMA598_tree);
            	    }
            	    pushFollow(FOLLOW_assignment_expression_in_insertstmt9684);
            	    assignment_expression599=assignment_expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, assignment_expression599.getTree());

            	    }
            	    break;

            	default :
            	    break loop221;
                }
            } while (true);

            RPAREN600=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_insertstmt9688); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RPAREN600_tree = (PythonTree)adaptor.create(RPAREN600);
            adaptor.addChild(root_0, RPAREN600_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (PythonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException re) {
            errorHandler.reportError(this, re);
            errorHandler.recover(this, input,re);
            retval.tree = (PythonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "insertstmt"

    public static class class_stmt_return extends ParserRuleReturnScope {
        PythonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "class_stmt"
    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2274:10: fragment class_stmt : clname= NAME ( comment_frag )? LPAREN ( options {backtrack=true; } : dva_attr | eva_attr )* RPAREN ;
    public final PythonParser.class_stmt_return class_stmt() throws RecognitionException {
        PythonParser.class_stmt_return retval = new PythonParser.class_stmt_return();
        retval.start = input.LT(1);

        PythonTree root_0 = null;

        Token clname=null;
        Token LPAREN602=null;
        Token RPAREN605=null;
        PythonParser.comment_frag_return comment_frag601 = null;

        PythonParser.dva_attr_return dva_attr603 = null;

        PythonParser.eva_attr_return eva_attr604 = null;


        PythonTree clname_tree=null;
        PythonTree LPAREN602_tree=null;
        PythonTree RPAREN605_tree=null;

        try {
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2275:2: (clname= NAME ( comment_frag )? LPAREN ( options {backtrack=true; } : dva_attr | eva_attr )* RPAREN )
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2276:2: clname= NAME ( comment_frag )? LPAREN ( options {backtrack=true; } : dva_attr | eva_attr )* RPAREN
            {
            root_0 = (PythonTree)adaptor.nil();

            clname=(Token)match(input,NAME,FOLLOW_NAME_in_class_stmt9704); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            clname_tree = (PythonTree)adaptor.create(clname);
            adaptor.addChild(root_0, clname_tree);
            }
            if ( state.backtracking==0 ) {
              ((sim_stmt_scope)sim_stmt_stack.peek()).strings.add((clname!=null?clname.getText():null));
            }
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2276:54: ( comment_frag )?
            int alt222=2;
            int LA222_0 = input.LA(1);

            if ( (LA222_0==STRING) ) {
                alt222=1;
            }
            switch (alt222) {
                case 1 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2276:55: comment_frag
                    {
                    pushFollow(FOLLOW_comment_frag_in_class_stmt9709);
                    comment_frag601=comment_frag();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, comment_frag601.getTree());

                    }
                    break;

            }

            LPAREN602=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_class_stmt9713); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LPAREN602_tree = (PythonTree)adaptor.create(LPAREN602);
            adaptor.addChild(root_0, LPAREN602_tree);
            }
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2276:77: ( options {backtrack=true; } : dva_attr | eva_attr )*
            loop223:
            do {
                int alt223=3;
                int LA223_0 = input.LA(1);

                if ( (LA223_0==NAME) ) {
                    int LA223_2 = input.LA(2);

                    if ( (LA223_2==STRING) ) {
                        int LA223_3 = input.LA(3);

                        if ( (LA223_3==COLON) ) {
                            int LA223_4 = input.LA(4);

                            if ( (LA223_4==NAME) ) {
                                alt223=2;
                            }
                            else if ( ((LA223_4>=189 && LA223_4<=191)) ) {
                                alt223=1;
                            }


                        }


                    }
                    else if ( (LA223_2==COLON) ) {
                        int LA223_4 = input.LA(3);

                        if ( (LA223_4==NAME) ) {
                            alt223=2;
                        }
                        else if ( ((LA223_4>=189 && LA223_4<=191)) ) {
                            alt223=1;
                        }


                    }


                }


                switch (alt223) {
            	case 1 :
            	    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2276:106: dva_attr
            	    {
            	    pushFollow(FOLLOW_dva_attr_in_class_stmt9725);
            	    dva_attr603=dva_attr();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, dva_attr603.getTree());

            	    }
            	    break;
            	case 2 :
            	    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2276:117: eva_attr
            	    {
            	    pushFollow(FOLLOW_eva_attr_in_class_stmt9729);
            	    eva_attr604=eva_attr();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, eva_attr604.getTree());

            	    }
            	    break;

            	default :
            	    break loop223;
                }
            } while (true);

            RPAREN605=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_class_stmt9733); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RPAREN605_tree = (PythonTree)adaptor.create(RPAREN605);
            adaptor.addChild(root_0, RPAREN605_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (PythonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException re) {
            errorHandler.reportError(this, re);
            errorHandler.recover(this, input,re);
            retval.tree = (PythonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "class_stmt"

    public static class subclass_stmt_return extends ParserRuleReturnScope {
        PythonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "subclass_stmt"
    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2279:10: fragment subclass_stmt : subclname= NAME ( comment_frag )? OF clname= NAME LPAREN ( options {backtrack=true; } : dva_attr | eva_attr )* RPAREN ;
    public final PythonParser.subclass_stmt_return subclass_stmt() throws RecognitionException {
        PythonParser.subclass_stmt_return retval = new PythonParser.subclass_stmt_return();
        retval.start = input.LT(1);

        PythonTree root_0 = null;

        Token subclname=null;
        Token clname=null;
        Token OF607=null;
        Token LPAREN608=null;
        Token RPAREN611=null;
        PythonParser.comment_frag_return comment_frag606 = null;

        PythonParser.dva_attr_return dva_attr609 = null;

        PythonParser.eva_attr_return eva_attr610 = null;


        PythonTree subclname_tree=null;
        PythonTree clname_tree=null;
        PythonTree OF607_tree=null;
        PythonTree LPAREN608_tree=null;
        PythonTree RPAREN611_tree=null;

        try {
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2280:2: (subclname= NAME ( comment_frag )? OF clname= NAME LPAREN ( options {backtrack=true; } : dva_attr | eva_attr )* RPAREN )
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2281:2: subclname= NAME ( comment_frag )? OF clname= NAME LPAREN ( options {backtrack=true; } : dva_attr | eva_attr )* RPAREN
            {
            root_0 = (PythonTree)adaptor.nil();

            subclname=(Token)match(input,NAME,FOLLOW_NAME_in_subclass_stmt9749); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            subclname_tree = (PythonTree)adaptor.create(subclname);
            adaptor.addChild(root_0, subclname_tree);
            }
            if ( state.backtracking==0 ) {
              ((sim_stmt_scope)sim_stmt_stack.peek()).strings.add((subclname!=null?subclname.getText():null));
            }
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2281:60: ( comment_frag )?
            int alt224=2;
            int LA224_0 = input.LA(1);

            if ( (LA224_0==STRING) ) {
                alt224=1;
            }
            switch (alt224) {
                case 1 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2281:61: comment_frag
                    {
                    pushFollow(FOLLOW_comment_frag_in_subclass_stmt9754);
                    comment_frag606=comment_frag();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, comment_frag606.getTree());

                    }
                    break;

            }

            OF607=(Token)match(input,OF,FOLLOW_OF_in_subclass_stmt9758); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            OF607_tree = (PythonTree)adaptor.create(OF607);
            adaptor.addChild(root_0, OF607_tree);
            }
            clname=(Token)match(input,NAME,FOLLOW_NAME_in_subclass_stmt9762); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            clname_tree = (PythonTree)adaptor.create(clname);
            adaptor.addChild(root_0, clname_tree);
            }
            if ( state.backtracking==0 ) {
              ((sim_stmt_scope)sim_stmt_stack.peek()).strings.add("SUPERCLASS"); ((sim_stmt_scope)sim_stmt_stack.peek()).strings.add((clname!=null?clname.getText():null));
            }
            LPAREN608=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_subclass_stmt9766); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LPAREN608_tree = (PythonTree)adaptor.create(LPAREN608);
            adaptor.addChild(root_0, LPAREN608_tree);
            }
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2281:176: ( options {backtrack=true; } : dva_attr | eva_attr )*
            loop225:
            do {
                int alt225=3;
                int LA225_0 = input.LA(1);

                if ( (LA225_0==NAME) ) {
                    int LA225_2 = input.LA(2);

                    if ( (LA225_2==STRING) ) {
                        int LA225_3 = input.LA(3);

                        if ( (LA225_3==COLON) ) {
                            int LA225_4 = input.LA(4);

                            if ( (LA225_4==NAME) ) {
                                alt225=2;
                            }
                            else if ( ((LA225_4>=189 && LA225_4<=191)) ) {
                                alt225=1;
                            }


                        }


                    }
                    else if ( (LA225_2==COLON) ) {
                        int LA225_4 = input.LA(3);

                        if ( (LA225_4==NAME) ) {
                            alt225=2;
                        }
                        else if ( ((LA225_4>=189 && LA225_4<=191)) ) {
                            alt225=1;
                        }


                    }


                }


                switch (alt225) {
            	case 1 :
            	    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2281:205: dva_attr
            	    {
            	    pushFollow(FOLLOW_dva_attr_in_subclass_stmt9778);
            	    dva_attr609=dva_attr();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, dva_attr609.getTree());

            	    }
            	    break;
            	case 2 :
            	    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2281:216: eva_attr
            	    {
            	    pushFollow(FOLLOW_eva_attr_in_subclass_stmt9782);
            	    eva_attr610=eva_attr();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, eva_attr610.getTree());

            	    }
            	    break;

            	default :
            	    break loop225;
                }
            } while (true);

            RPAREN611=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_subclass_stmt9786); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RPAREN611_tree = (PythonTree)adaptor.create(RPAREN611);
            adaptor.addChild(root_0, RPAREN611_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (PythonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException re) {
            errorHandler.reportError(this, re);
            errorHandler.recover(this, input,re);
            retval.tree = (PythonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "subclass_stmt"

    public static class eva_attr_return extends ParserRuleReturnScope {
        PythonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "eva_attr"
    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2284:1: eva_attr : eva= NAME ( comment_frag )? COLON clname= NAME ( ( COMMA )? eva_options )? ( COMMA eva_options )* SEMI ;
    public final PythonParser.eva_attr_return eva_attr() throws RecognitionException {
        PythonParser.eva_attr_return retval = new PythonParser.eva_attr_return();
        retval.start = input.LT(1);

        PythonTree root_0 = null;

        Token eva=null;
        Token clname=null;
        Token COLON613=null;
        Token COMMA614=null;
        Token COMMA616=null;
        Token SEMI618=null;
        PythonParser.comment_frag_return comment_frag612 = null;

        PythonParser.eva_options_return eva_options615 = null;

        PythonParser.eva_options_return eva_options617 = null;


        PythonTree eva_tree=null;
        PythonTree clname_tree=null;
        PythonTree COLON613_tree=null;
        PythonTree COMMA614_tree=null;
        PythonTree COMMA616_tree=null;
        PythonTree SEMI618_tree=null;

        try {
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2285:2: (eva= NAME ( comment_frag )? COLON clname= NAME ( ( COMMA )? eva_options )? ( COMMA eva_options )* SEMI )
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2286:2: eva= NAME ( comment_frag )? COLON clname= NAME ( ( COMMA )? eva_options )? ( COMMA eva_options )* SEMI
            {
            root_0 = (PythonTree)adaptor.nil();

            eva=(Token)match(input,NAME,FOLLOW_NAME_in_eva_attr9800); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            eva_tree = (PythonTree)adaptor.create(eva);
            adaptor.addChild(root_0, eva_tree);
            }
            if ( state.backtracking==0 ) {
              ((sim_stmt_scope)sim_stmt_stack.peek()).strings.add("evaAttribute");((sim_stmt_scope)sim_stmt_stack.peek()).strings.add((eva!=null?eva.getText():null));
            }
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2286:87: ( comment_frag )?
            int alt226=2;
            int LA226_0 = input.LA(1);

            if ( (LA226_0==STRING) ) {
                alt226=1;
            }
            switch (alt226) {
                case 1 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2286:87: comment_frag
                    {
                    pushFollow(FOLLOW_comment_frag_in_eva_attr9804);
                    comment_frag612=comment_frag();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, comment_frag612.getTree());

                    }
                    break;

            }

            COLON613=(Token)match(input,COLON,FOLLOW_COLON_in_eva_attr9807); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            COLON613_tree = (PythonTree)adaptor.create(COLON613);
            adaptor.addChild(root_0, COLON613_tree);
            }
            clname=(Token)match(input,NAME,FOLLOW_NAME_in_eva_attr9811); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            clname_tree = (PythonTree)adaptor.create(clname);
            adaptor.addChild(root_0, clname_tree);
            }
            if ( state.backtracking==0 ) {
              ((sim_stmt_scope)sim_stmt_stack.peek()).strings.add("targetClass");((sim_stmt_scope)sim_stmt_stack.peek()).strings.add((clname!=null?clname.getText():null));
            }
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2286:197: ( ( COMMA )? eva_options )?
            int alt228=2;
            alt228 = dfa228.predict(input);
            switch (alt228) {
                case 1 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2286:198: ( COMMA )? eva_options
                    {
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2286:198: ( COMMA )?
                    int alt227=2;
                    int LA227_0 = input.LA(1);

                    if ( (LA227_0==COMMA) ) {
                        alt227=1;
                    }
                    switch (alt227) {
                        case 1 :
                            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2286:199: COMMA
                            {
                            COMMA614=(Token)match(input,COMMA,FOLLOW_COMMA_in_eva_attr9817); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            COMMA614_tree = (PythonTree)adaptor.create(COMMA614);
                            adaptor.addChild(root_0, COMMA614_tree);
                            }

                            }
                            break;

                    }

                    if ( state.backtracking==0 ) {
                      ((sim_stmt_scope)sim_stmt_stack.peek()).strings.add("EVAOPTIONS");
                    }
                    pushFollow(FOLLOW_eva_options_in_eva_attr9823);
                    eva_options615=eva_options();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, eva_options615.getTree());

                    }
                    break;

            }

            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2286:261: ( COMMA eva_options )*
            loop229:
            do {
                int alt229=2;
                int LA229_0 = input.LA(1);

                if ( (LA229_0==COMMA) ) {
                    alt229=1;
                }


                switch (alt229) {
            	case 1 :
            	    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2286:262: COMMA eva_options
            	    {
            	    COMMA616=(Token)match(input,COMMA,FOLLOW_COMMA_in_eva_attr9828); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    COMMA616_tree = (PythonTree)adaptor.create(COMMA616);
            	    adaptor.addChild(root_0, COMMA616_tree);
            	    }
            	    pushFollow(FOLLOW_eva_options_in_eva_attr9830);
            	    eva_options617=eva_options();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, eva_options617.getTree());

            	    }
            	    break;

            	default :
            	    break loop229;
                }
            } while (true);

            SEMI618=(Token)match(input,SEMI,FOLLOW_SEMI_in_eva_attr9834); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SEMI618_tree = (PythonTree)adaptor.create(SEMI618);
            adaptor.addChild(root_0, SEMI618_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (PythonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException re) {
            errorHandler.reportError(this, re);
            errorHandler.recover(this, input,re);
            retval.tree = (PythonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "eva_attr"

    public static class dva_attr_return extends ParserRuleReturnScope {
        PythonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dva_attr"
    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2289:1: dva_attr : dva= NAME ( comment_frag )? COLON data_type ( ( COMMA )? dva_options )* SEMI ;
    public final PythonParser.dva_attr_return dva_attr() throws RecognitionException {
        PythonParser.dva_attr_return retval = new PythonParser.dva_attr_return();
        retval.start = input.LT(1);

        PythonTree root_0 = null;

        Token dva=null;
        Token COLON620=null;
        Token COMMA622=null;
        Token SEMI624=null;
        PythonParser.comment_frag_return comment_frag619 = null;

        PythonParser.data_type_return data_type621 = null;

        PythonParser.dva_options_return dva_options623 = null;


        PythonTree dva_tree=null;
        PythonTree COLON620_tree=null;
        PythonTree COMMA622_tree=null;
        PythonTree SEMI624_tree=null;

        try {
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2290:2: (dva= NAME ( comment_frag )? COLON data_type ( ( COMMA )? dva_options )* SEMI )
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2291:2: dva= NAME ( comment_frag )? COLON data_type ( ( COMMA )? dva_options )* SEMI
            {
            root_0 = (PythonTree)adaptor.nil();

            dva=(Token)match(input,NAME,FOLLOW_NAME_in_dva_attr9848); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            dva_tree = (PythonTree)adaptor.create(dva);
            adaptor.addChild(root_0, dva_tree);
            }
            if ( state.backtracking==0 ) {
              ((sim_stmt_scope)sim_stmt_stack.peek()).strings.add("dvaAttribute");((sim_stmt_scope)sim_stmt_stack.peek()).strings.add((dva!=null?dva.getText():null));
            }
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2291:87: ( comment_frag )?
            int alt230=2;
            int LA230_0 = input.LA(1);

            if ( (LA230_0==STRING) ) {
                alt230=1;
            }
            switch (alt230) {
                case 1 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2291:87: comment_frag
                    {
                    pushFollow(FOLLOW_comment_frag_in_dva_attr9852);
                    comment_frag619=comment_frag();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, comment_frag619.getTree());

                    }
                    break;

            }

            COLON620=(Token)match(input,COLON,FOLLOW_COLON_in_dva_attr9855); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            COLON620_tree = (PythonTree)adaptor.create(COLON620);
            adaptor.addChild(root_0, COLON620_tree);
            }
            pushFollow(FOLLOW_data_type_in_dva_attr9857);
            data_type621=data_type();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, data_type621.getTree());
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2291:117: ( ( COMMA )? dva_options )*
            loop232:
            do {
                int alt232=2;
                int LA232_0 = input.LA(1);

                if ( (LA232_0==COMMA||(LA232_0>=REQD && LA232_0<=INITVAL)) ) {
                    alt232=1;
                }


                switch (alt232) {
            	case 1 :
            	    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2291:118: ( COMMA )? dva_options
            	    {
            	    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2291:118: ( COMMA )?
            	    int alt231=2;
            	    int LA231_0 = input.LA(1);

            	    if ( (LA231_0==COMMA) ) {
            	        alt231=1;
            	    }
            	    switch (alt231) {
            	        case 1 :
            	            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2291:119: COMMA
            	            {
            	            COMMA622=(Token)match(input,COMMA,FOLLOW_COMMA_in_dva_attr9861); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            COMMA622_tree = (PythonTree)adaptor.create(COMMA622);
            	            adaptor.addChild(root_0, COMMA622_tree);
            	            }

            	            }
            	            break;

            	    }

            	    if ( state.backtracking==0 ) {
            	      ((sim_stmt_scope)sim_stmt_stack.peek()).strings.add("DVAOPTIONS");
            	    }
            	    pushFollow(FOLLOW_dva_options_in_dva_attr9867);
            	    dva_options623=dva_options();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, dva_options623.getTree());

            	    }
            	    break;

            	default :
            	    break loop232;
                }
            } while (true);

            SEMI624=(Token)match(input,SEMI,FOLLOW_SEMI_in_dva_attr9871); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            SEMI624_tree = (PythonTree)adaptor.create(SEMI624);
            adaptor.addChild(root_0, SEMI624_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (PythonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException re) {
            errorHandler.reportError(this, re);
            errorHandler.recover(this, input,re);
            retval.tree = (PythonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "dva_attr"

    public static class comment_frag_return extends ParserRuleReturnScope {
        PythonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "comment_frag"
    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2294:1: comment_frag : comm= STRING ;
    public final PythonParser.comment_frag_return comment_frag() throws RecognitionException {
        PythonParser.comment_frag_return retval = new PythonParser.comment_frag_return();
        retval.start = input.LT(1);

        PythonTree root_0 = null;

        Token comm=null;

        PythonTree comm_tree=null;

        try {
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2295:2: (comm= STRING )
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2296:2: comm= STRING
            {
            root_0 = (PythonTree)adaptor.nil();

            comm=(Token)match(input,STRING,FOLLOW_STRING_in_comment_frag9885); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            comm_tree = (PythonTree)adaptor.create(comm);
            adaptor.addChild(root_0, comm_tree);
            }
            if ( state.backtracking==0 ) {
              ((sim_stmt_scope)sim_stmt_stack.peek()).strings.add("COMMENT");((sim_stmt_scope)sim_stmt_stack.peek()).strings.add((comm!=null?comm.getText():null));
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (PythonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException re) {
            errorHandler.reportError(this, re);
            errorHandler.recover(this, input,re);
            retval.tree = (PythonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "comment_frag"

    public static class data_type_return extends ParserRuleReturnScope {
        PythonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "data_type"
    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2299:1: data_type : dt= ( 'INTEGERDATA' | 'STRINGDATA' | 'BOOLEANDATA' ) ;
    public final PythonParser.data_type_return data_type() throws RecognitionException {
        PythonParser.data_type_return retval = new PythonParser.data_type_return();
        retval.start = input.LT(1);

        PythonTree root_0 = null;

        Token dt=null;

        PythonTree dt_tree=null;

        try {
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2300:2: (dt= ( 'INTEGERDATA' | 'STRINGDATA' | 'BOOLEANDATA' ) )
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2301:3: dt= ( 'INTEGERDATA' | 'STRINGDATA' | 'BOOLEANDATA' )
            {
            root_0 = (PythonTree)adaptor.nil();

            dt=(Token)input.LT(1);
            if ( (input.LA(1)>=189 && input.LA(1)<=191) ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (PythonTree)adaptor.create(dt));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }

            if ( state.backtracking==0 ) {
              ((sim_stmt_scope)sim_stmt_stack.peek()).strings.add("targetType");((sim_stmt_scope)sim_stmt_stack.peek()).strings.add((dt!=null?dt.getText():null));
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (PythonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException re) {
            errorHandler.reportError(this, re);
            errorHandler.recover(this, input,re);
            retval.tree = (PythonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "data_type"

    public static class dva_options_return extends ParserRuleReturnScope {
        PythonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dva_options"
    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2304:1: dva_options : ( ( REQD ) | ( INITVAL val= expr[expr_contextType.Load] ) ) ;
    public final PythonParser.dva_options_return dva_options() throws RecognitionException {
        PythonParser.dva_options_return retval = new PythonParser.dva_options_return();
        retval.start = input.LT(1);

        PythonTree root_0 = null;

        Token REQD625=null;
        Token INITVAL626=null;
        PythonParser.expr_return val = null;


        PythonTree REQD625_tree=null;
        PythonTree INITVAL626_tree=null;

        try {
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2305:2: ( ( ( REQD ) | ( INITVAL val= expr[expr_contextType.Load] ) ) )
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2306:2: ( ( REQD ) | ( INITVAL val= expr[expr_contextType.Load] ) )
            {
            root_0 = (PythonTree)adaptor.nil();

            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2306:2: ( ( REQD ) | ( INITVAL val= expr[expr_contextType.Load] ) )
            int alt233=2;
            int LA233_0 = input.LA(1);

            if ( (LA233_0==REQD) ) {
                alt233=1;
            }
            else if ( (LA233_0==INITVAL) ) {
                alt233=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 233, 0, input);

                throw nvae;
            }
            switch (alt233) {
                case 1 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2306:3: ( REQD )
                    {
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2306:3: ( REQD )
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2306:4: REQD
                    {
                    REQD625=(Token)match(input,REQD,FOLLOW_REQD_in_dva_options9926); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    REQD625_tree = (PythonTree)adaptor.create(REQD625);
                    adaptor.addChild(root_0, REQD625_tree);
                    }
                    if ( state.backtracking==0 ) {
                      ((sim_stmt_scope)sim_stmt_stack.peek()).strings.add("REQUIRED");
                    }

                    }


                    }
                    break;
                case 2 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2306:50: ( INITVAL val= expr[expr_contextType.Load] )
                    {
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2306:50: ( INITVAL val= expr[expr_contextType.Load] )
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2306:51: INITVAL val= expr[expr_contextType.Load]
                    {
                    INITVAL626=(Token)match(input,INITVAL,FOLLOW_INITVAL_in_dva_options9934); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    INITVAL626_tree = (PythonTree)adaptor.create(INITVAL626);
                    adaptor.addChild(root_0, INITVAL626_tree);
                    }
                    pushFollow(FOLLOW_expr_in_dva_options9938);
                    val=expr(expr_contextType.Load);

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, val.getTree());
                    if ( state.backtracking==0 ) {
                      ((sim_stmt_scope)sim_stmt_stack.peek()).strings.add("INITIALVALUE"); ((sim_stmt_scope)sim_stmt_stack.peek()).exprs.add(actions.castExpr((val!=null?((PythonTree)val.tree):null)));
                    }

                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (PythonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException re) {
            errorHandler.reportError(this, re);
            errorHandler.recover(this, input,re);
            retval.tree = (PythonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "dva_options"

    public static class eva_options_return extends ParserRuleReturnScope {
        PythonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "eva_options"
    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2309:1: eva_options : ( ( REQD ) | ( SV ) | ( MV ( LPAREN eva_multivalued ( COMMA eva_multivalued )* RPAREN )? ) | ( INVERSE CAPSIS iname= NAME ) ) ;
    public final PythonParser.eva_options_return eva_options() throws RecognitionException {
        PythonParser.eva_options_return retval = new PythonParser.eva_options_return();
        retval.start = input.LT(1);

        PythonTree root_0 = null;

        Token iname=null;
        Token REQD627=null;
        Token SV628=null;
        Token MV629=null;
        Token LPAREN630=null;
        Token COMMA632=null;
        Token RPAREN634=null;
        Token INVERSE635=null;
        Token CAPSIS636=null;
        PythonParser.eva_multivalued_return eva_multivalued631 = null;

        PythonParser.eva_multivalued_return eva_multivalued633 = null;


        PythonTree iname_tree=null;
        PythonTree REQD627_tree=null;
        PythonTree SV628_tree=null;
        PythonTree MV629_tree=null;
        PythonTree LPAREN630_tree=null;
        PythonTree COMMA632_tree=null;
        PythonTree RPAREN634_tree=null;
        PythonTree INVERSE635_tree=null;
        PythonTree CAPSIS636_tree=null;

        try {
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2310:2: ( ( ( REQD ) | ( SV ) | ( MV ( LPAREN eva_multivalued ( COMMA eva_multivalued )* RPAREN )? ) | ( INVERSE CAPSIS iname= NAME ) ) )
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2311:2: ( ( REQD ) | ( SV ) | ( MV ( LPAREN eva_multivalued ( COMMA eva_multivalued )* RPAREN )? ) | ( INVERSE CAPSIS iname= NAME ) )
            {
            root_0 = (PythonTree)adaptor.nil();

            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2311:2: ( ( REQD ) | ( SV ) | ( MV ( LPAREN eva_multivalued ( COMMA eva_multivalued )* RPAREN )? ) | ( INVERSE CAPSIS iname= NAME ) )
            int alt236=4;
            switch ( input.LA(1) ) {
            case REQD:
                {
                alt236=1;
                }
                break;
            case SV:
                {
                alt236=2;
                }
                break;
            case MV:
                {
                alt236=3;
                }
                break;
            case INVERSE:
                {
                alt236=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 236, 0, input);

                throw nvae;
            }

            switch (alt236) {
                case 1 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2311:3: ( REQD )
                    {
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2311:3: ( REQD )
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2311:4: REQD
                    {
                    REQD627=(Token)match(input,REQD,FOLLOW_REQD_in_eva_options9956); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    REQD627_tree = (PythonTree)adaptor.create(REQD627);
                    adaptor.addChild(root_0, REQD627_tree);
                    }
                    if ( state.backtracking==0 ) {
                      ((sim_stmt_scope)sim_stmt_stack.peek()).strings.add("REQUIRED");
                    }

                    }


                    }
                    break;
                case 2 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2312:4: ( SV )
                    {
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2312:4: ( SV )
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2312:5: SV
                    {
                    SV628=(Token)match(input,SV,FOLLOW_SV_in_eva_options9966); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SV628_tree = (PythonTree)adaptor.create(SV628);
                    adaptor.addChild(root_0, SV628_tree);
                    }
                    if ( state.backtracking==0 ) {
                      ((sim_stmt_scope)sim_stmt_stack.peek()).strings.add("SV");
                    }

                    }


                    }
                    break;
                case 3 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2313:4: ( MV ( LPAREN eva_multivalued ( COMMA eva_multivalued )* RPAREN )? )
                    {
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2313:4: ( MV ( LPAREN eva_multivalued ( COMMA eva_multivalued )* RPAREN )? )
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2313:5: MV ( LPAREN eva_multivalued ( COMMA eva_multivalued )* RPAREN )?
                    {
                    MV629=(Token)match(input,MV,FOLLOW_MV_in_eva_options9975); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MV629_tree = (PythonTree)adaptor.create(MV629);
                    adaptor.addChild(root_0, MV629_tree);
                    }
                    if ( state.backtracking==0 ) {
                      ((sim_stmt_scope)sim_stmt_stack.peek()).strings.add("MV");
                    }
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2313:40: ( LPAREN eva_multivalued ( COMMA eva_multivalued )* RPAREN )?
                    int alt235=2;
                    int LA235_0 = input.LA(1);

                    if ( (LA235_0==LPAREN) ) {
                        alt235=1;
                    }
                    switch (alt235) {
                        case 1 :
                            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2313:41: LPAREN eva_multivalued ( COMMA eva_multivalued )* RPAREN
                            {
                            LPAREN630=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_eva_options9980); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            LPAREN630_tree = (PythonTree)adaptor.create(LPAREN630);
                            adaptor.addChild(root_0, LPAREN630_tree);
                            }
                            if ( state.backtracking==0 ) {
                              ((sim_stmt_scope)sim_stmt_stack.peek()).strings.add("MVOPTIONS");
                            }
                            pushFollow(FOLLOW_eva_multivalued_in_eva_options9984);
                            eva_multivalued631=eva_multivalued();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, eva_multivalued631.getTree());
                            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2313:103: ( COMMA eva_multivalued )*
                            loop234:
                            do {
                                int alt234=2;
                                int LA234_0 = input.LA(1);

                                if ( (LA234_0==COMMA) ) {
                                    alt234=1;
                                }


                                switch (alt234) {
                            	case 1 :
                            	    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2313:104: COMMA eva_multivalued
                            	    {
                            	    COMMA632=(Token)match(input,COMMA,FOLLOW_COMMA_in_eva_options9987); if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {
                            	    COMMA632_tree = (PythonTree)adaptor.create(COMMA632);
                            	    adaptor.addChild(root_0, COMMA632_tree);
                            	    }
                            	    pushFollow(FOLLOW_eva_multivalued_in_eva_options9989);
                            	    eva_multivalued633=eva_multivalued();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, eva_multivalued633.getTree());

                            	    }
                            	    break;

                            	default :
                            	    break loop234;
                                }
                            } while (true);

                            RPAREN634=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_eva_options9993); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            RPAREN634_tree = (PythonTree)adaptor.create(RPAREN634);
                            adaptor.addChild(root_0, RPAREN634_tree);
                            }
                            if ( state.backtracking==0 ) {
                              ((sim_stmt_scope)sim_stmt_stack.peek()).strings.add("MVOPTIONSEND");
                            }

                            }
                            break;

                    }


                    }


                    }
                    break;
                case 4 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2314:4: ( INVERSE CAPSIS iname= NAME )
                    {
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2314:4: ( INVERSE CAPSIS iname= NAME )
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2314:5: INVERSE CAPSIS iname= NAME
                    {
                    INVERSE635=(Token)match(input,INVERSE,FOLLOW_INVERSE_in_eva_options10004); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    INVERSE635_tree = (PythonTree)adaptor.create(INVERSE635);
                    adaptor.addChild(root_0, INVERSE635_tree);
                    }
                    CAPSIS636=(Token)match(input,CAPSIS,FOLLOW_CAPSIS_in_eva_options10006); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    CAPSIS636_tree = (PythonTree)adaptor.create(CAPSIS636);
                    adaptor.addChild(root_0, CAPSIS636_tree);
                    }
                    iname=(Token)match(input,NAME,FOLLOW_NAME_in_eva_options10010); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    iname_tree = (PythonTree)adaptor.create(iname);
                    adaptor.addChild(root_0, iname_tree);
                    }
                    if ( state.backtracking==0 ) {
                      ((sim_stmt_scope)sim_stmt_stack.peek()).strings.add("INVERSEIS"); ((sim_stmt_scope)sim_stmt_stack.peek()).strings.add((iname!=null?iname.getText():null));
                    }

                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (PythonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException re) {
            errorHandler.reportError(this, re);
            errorHandler.recover(this, input,re);
            retval.tree = (PythonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "eva_options"

    public static class eva_multivalued_return extends ParserRuleReturnScope {
        PythonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "eva_multivalued"
    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2317:1: eva_multivalued : ( ( DISTINCT ) | ( MAXVAL mval= INT ) ) ;
    public final PythonParser.eva_multivalued_return eva_multivalued() throws RecognitionException {
        PythonParser.eva_multivalued_return retval = new PythonParser.eva_multivalued_return();
        retval.start = input.LT(1);

        PythonTree root_0 = null;

        Token mval=null;
        Token DISTINCT637=null;
        Token MAXVAL638=null;

        PythonTree mval_tree=null;
        PythonTree DISTINCT637_tree=null;
        PythonTree MAXVAL638_tree=null;

        try {
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2318:2: ( ( ( DISTINCT ) | ( MAXVAL mval= INT ) ) )
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2319:2: ( ( DISTINCT ) | ( MAXVAL mval= INT ) )
            {
            root_0 = (PythonTree)adaptor.nil();

            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2319:2: ( ( DISTINCT ) | ( MAXVAL mval= INT ) )
            int alt237=2;
            int LA237_0 = input.LA(1);

            if ( (LA237_0==DISTINCT) ) {
                alt237=1;
            }
            else if ( (LA237_0==MAXVAL) ) {
                alt237=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 237, 0, input);

                throw nvae;
            }
            switch (alt237) {
                case 1 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2319:3: ( DISTINCT )
                    {
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2319:3: ( DISTINCT )
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2319:4: DISTINCT
                    {
                    DISTINCT637=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_eva_multivalued10029); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DISTINCT637_tree = (PythonTree)adaptor.create(DISTINCT637);
                    adaptor.addChild(root_0, DISTINCT637_tree);
                    }
                    if ( state.backtracking==0 ) {
                      ((sim_stmt_scope)sim_stmt_stack.peek()).strings.add("DISTINCT");
                    }

                    }


                    }
                    break;
                case 2 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2319:53: ( MAXVAL mval= INT )
                    {
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2319:53: ( MAXVAL mval= INT )
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2319:54: MAXVAL mval= INT
                    {
                    MAXVAL638=(Token)match(input,MAXVAL,FOLLOW_MAXVAL_in_eva_multivalued10036); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MAXVAL638_tree = (PythonTree)adaptor.create(MAXVAL638);
                    adaptor.addChild(root_0, MAXVAL638_tree);
                    }
                    mval=(Token)match(input,INT,FOLLOW_INT_in_eva_multivalued10040); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    mval_tree = (PythonTree)adaptor.create(mval);
                    adaptor.addChild(root_0, mval_tree);
                    }
                    if ( state.backtracking==0 ) {
                      ((sim_stmt_scope)sim_stmt_stack.peek()).strings.add("MAXVAL"); ((sim_stmt_scope)sim_stmt_stack.peek()).strings.add((mval!=null?mval.getText():null));
                    }

                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (PythonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException re) {
            errorHandler.reportError(this, re);
            errorHandler.recover(this, input,re);
            retval.tree = (PythonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "eva_multivalued"

    public static class from_insert_return extends ParserRuleReturnScope {
        PythonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "from_insert"
    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2322:1: from_insert : fr= CAPSFROM classfrag whereclausefrag ;
    public final PythonParser.from_insert_return from_insert() throws RecognitionException {
        PythonParser.from_insert_return retval = new PythonParser.from_insert_return();
        retval.start = input.LT(1);

        PythonTree root_0 = null;

        Token fr=null;
        PythonParser.classfrag_return classfrag639 = null;

        PythonParser.whereclausefrag_return whereclausefrag640 = null;


        PythonTree fr_tree=null;

        try {
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2323:2: (fr= CAPSFROM classfrag whereclausefrag )
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2324:2: fr= CAPSFROM classfrag whereclausefrag
            {
            root_0 = (PythonTree)adaptor.nil();

            fr=(Token)match(input,CAPSFROM,FOLLOW_CAPSFROM_in_from_insert10058); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            fr_tree = (PythonTree)adaptor.create(fr);
            adaptor.addChild(root_0, fr_tree);
            }
            if ( state.backtracking==0 ) {
              ((sim_stmt_scope)sim_stmt_stack.peek()).strings.add((fr!=null?fr.getText():null));
            }
            pushFollow(FOLLOW_classfrag_in_from_insert10062);
            classfrag639=classfrag();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, classfrag639.getTree());
            pushFollow(FOLLOW_whereclausefrag_in_from_insert10064);
            whereclausefrag640=whereclausefrag();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, whereclausefrag640.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (PythonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException re) {
            errorHandler.reportError(this, re);
            errorHandler.recover(this, input,re);
            retval.tree = (PythonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "from_insert"

    public static class fromwherefrag_return extends ParserRuleReturnScope {
        PythonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "fromwherefrag"
    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2327:1: fromwherefrag : whr= WHERE ( (tname= NAME SEMI ) | (atname= NAME ASSIGN val= expr[expr_contextType.Load] ( CAPSAND atname= NAME ASSIGN val= expr[expr_contextType.Load] )* SEMI ) ) ;
    public final PythonParser.fromwherefrag_return fromwherefrag() throws RecognitionException {
        PythonParser.fromwherefrag_return retval = new PythonParser.fromwherefrag_return();
        retval.start = input.LT(1);

        PythonTree root_0 = null;

        Token whr=null;
        Token tname=null;
        Token atname=null;
        Token SEMI641=null;
        Token ASSIGN642=null;
        Token CAPSAND643=null;
        Token ASSIGN644=null;
        Token SEMI645=null;
        PythonParser.expr_return val = null;


        PythonTree whr_tree=null;
        PythonTree tname_tree=null;
        PythonTree atname_tree=null;
        PythonTree SEMI641_tree=null;
        PythonTree ASSIGN642_tree=null;
        PythonTree CAPSAND643_tree=null;
        PythonTree ASSIGN644_tree=null;
        PythonTree SEMI645_tree=null;

        try {
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2328:2: (whr= WHERE ( (tname= NAME SEMI ) | (atname= NAME ASSIGN val= expr[expr_contextType.Load] ( CAPSAND atname= NAME ASSIGN val= expr[expr_contextType.Load] )* SEMI ) ) )
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2329:9: whr= WHERE ( (tname= NAME SEMI ) | (atname= NAME ASSIGN val= expr[expr_contextType.Load] ( CAPSAND atname= NAME ASSIGN val= expr[expr_contextType.Load] )* SEMI ) )
            {
            root_0 = (PythonTree)adaptor.nil();

            whr=(Token)match(input,WHERE,FOLLOW_WHERE_in_fromwherefrag10085); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            whr_tree = (PythonTree)adaptor.create(whr);
            adaptor.addChild(root_0, whr_tree);
            }
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2330:2: ( (tname= NAME SEMI ) | (atname= NAME ASSIGN val= expr[expr_contextType.Load] ( CAPSAND atname= NAME ASSIGN val= expr[expr_contextType.Load] )* SEMI ) )
            int alt239=2;
            int LA239_0 = input.LA(1);

            if ( (LA239_0==NAME) ) {
                int LA239_1 = input.LA(2);

                if ( (LA239_1==SEMI) ) {
                    alt239=1;
                }
                else if ( (LA239_1==ASSIGN) ) {
                    alt239=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 239, 1, input);

                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 239, 0, input);

                throw nvae;
            }
            switch (alt239) {
                case 1 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2330:3: (tname= NAME SEMI )
                    {
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2330:3: (tname= NAME SEMI )
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2330:4: tname= NAME SEMI
                    {
                    tname=(Token)match(input,NAME,FOLLOW_NAME_in_fromwherefrag10092); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    tname_tree = (PythonTree)adaptor.create(tname);
                    adaptor.addChild(root_0, tname_tree);
                    }
                    SEMI641=(Token)match(input,SEMI,FOLLOW_SEMI_in_fromwherefrag10094); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SEMI641_tree = (PythonTree)adaptor.create(SEMI641);
                    adaptor.addChild(root_0, SEMI641_tree);
                    }

                    }


                    }
                    break;
                case 2 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2331:9: (atname= NAME ASSIGN val= expr[expr_contextType.Load] ( CAPSAND atname= NAME ASSIGN val= expr[expr_contextType.Load] )* SEMI )
                    {
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2331:9: (atname= NAME ASSIGN val= expr[expr_contextType.Load] ( CAPSAND atname= NAME ASSIGN val= expr[expr_contextType.Load] )* SEMI )
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2331:10: atname= NAME ASSIGN val= expr[expr_contextType.Load] ( CAPSAND atname= NAME ASSIGN val= expr[expr_contextType.Load] )* SEMI
                    {
                    atname=(Token)match(input,NAME,FOLLOW_NAME_in_fromwherefrag10109); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    atname_tree = (PythonTree)adaptor.create(atname);
                    adaptor.addChild(root_0, atname_tree);
                    }
                    ASSIGN642=(Token)match(input,ASSIGN,FOLLOW_ASSIGN_in_fromwherefrag10111); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ASSIGN642_tree = (PythonTree)adaptor.create(ASSIGN642);
                    adaptor.addChild(root_0, ASSIGN642_tree);
                    }
                    pushFollow(FOLLOW_expr_in_fromwherefrag10115);
                    val=expr(expr_contextType.Load);

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, val.getTree());
                    if ( state.backtracking==0 ) {
                      ((sim_stmt_scope)sim_stmt_stack.peek()).strings.add((whr!=null?whr.getText():null)); ((sim_stmt_scope)sim_stmt_stack.peek()).strings.add((atname!=null?atname.getText():null));((sim_stmt_scope)sim_stmt_stack.peek()).exprs.add(actions.castExpr((val!=null?((PythonTree)val.tree):null)));
                    }
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2333:9: ( CAPSAND atname= NAME ASSIGN val= expr[expr_contextType.Load] )*
                    loop238:
                    do {
                        int alt238=2;
                        int LA238_0 = input.LA(1);

                        if ( (LA238_0==CAPSAND) ) {
                            alt238=1;
                        }


                        switch (alt238) {
                    	case 1 :
                    	    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2333:10: CAPSAND atname= NAME ASSIGN val= expr[expr_contextType.Load]
                    	    {
                    	    CAPSAND643=(Token)match(input,CAPSAND,FOLLOW_CAPSAND_in_fromwherefrag10131); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    CAPSAND643_tree = (PythonTree)adaptor.create(CAPSAND643);
                    	    adaptor.addChild(root_0, CAPSAND643_tree);
                    	    }
                    	    atname=(Token)match(input,NAME,FOLLOW_NAME_in_fromwherefrag10135); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    atname_tree = (PythonTree)adaptor.create(atname);
                    	    adaptor.addChild(root_0, atname_tree);
                    	    }
                    	    if ( state.backtracking==0 ) {
                    	      ((sim_stmt_scope)sim_stmt_stack.peek()).strings.add((atname!=null?atname.getText():null));
                    	    }
                    	    ASSIGN644=(Token)match(input,ASSIGN,FOLLOW_ASSIGN_in_fromwherefrag10140); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    ASSIGN644_tree = (PythonTree)adaptor.create(ASSIGN644);
                    	    adaptor.addChild(root_0, ASSIGN644_tree);
                    	    }
                    	    pushFollow(FOLLOW_expr_in_fromwherefrag10144);
                    	    val=expr(expr_contextType.Load);

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, val.getTree());
                    	    if ( state.backtracking==0 ) {
                    	      ((sim_stmt_scope)sim_stmt_stack.peek()).exprs.add(actions.castExpr((val!=null?((PythonTree)val.tree):null)));
                    	    }

                    	    }
                    	    break;

                    	default :
                    	    break loop238;
                        }
                    } while (true);

                    SEMI645=(Token)match(input,SEMI,FOLLOW_SEMI_in_fromwherefrag10152); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SEMI645_tree = (PythonTree)adaptor.create(SEMI645);
                    adaptor.addChild(root_0, SEMI645_tree);
                    }

                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (PythonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException re) {
            errorHandler.reportError(this, re);
            errorHandler.recover(this, input,re);
            retval.tree = (PythonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "fromwherefrag"

    public static class selectattributefrag_return extends ParserRuleReturnScope {
        PythonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "selectattributefrag"
    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2336:1: selectattributefrag : dva= ( NAME | STAR ) (evaconnector= OF eva= NAME (evaconnector= OF eva= NAME )* )? ;
    public final PythonParser.selectattributefrag_return selectattributefrag() throws RecognitionException {
        PythonParser.selectattributefrag_return retval = new PythonParser.selectattributefrag_return();
        retval.start = input.LT(1);

        PythonTree root_0 = null;

        Token dva=null;
        Token evaconnector=null;
        Token eva=null;

        PythonTree dva_tree=null;
        PythonTree evaconnector_tree=null;
        PythonTree eva_tree=null;

        try {
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2337:2: (dva= ( NAME | STAR ) (evaconnector= OF eva= NAME (evaconnector= OF eva= NAME )* )? )
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2338:2: dva= ( NAME | STAR ) (evaconnector= OF eva= NAME (evaconnector= OF eva= NAME )* )?
            {
            root_0 = (PythonTree)adaptor.nil();

            dva=(Token)input.LT(1);
            if ( input.LA(1)==NAME||input.LA(1)==STAR ) {
                input.consume();
                if ( state.backtracking==0 ) adaptor.addChild(root_0, (PythonTree)adaptor.create(dva));
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }

            if ( state.backtracking==0 ) {
              ((sim_stmt_scope)sim_stmt_stack.peek()).strings.add((dva!=null?dva.getText():null));
            }
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2338:57: (evaconnector= OF eva= NAME (evaconnector= OF eva= NAME )* )?
            int alt241=2;
            int LA241_0 = input.LA(1);

            if ( (LA241_0==OF) ) {
                alt241=1;
            }
            switch (alt241) {
                case 1 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2338:59: evaconnector= OF eva= NAME (evaconnector= OF eva= NAME )*
                    {
                    evaconnector=(Token)match(input,OF,FOLLOW_OF_in_selectattributefrag10182); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    evaconnector_tree = (PythonTree)adaptor.create(evaconnector);
                    adaptor.addChild(root_0, evaconnector_tree);
                    }
                    eva=(Token)match(input,NAME,FOLLOW_NAME_in_selectattributefrag10186); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    eva_tree = (PythonTree)adaptor.create(eva);
                    adaptor.addChild(root_0, eva_tree);
                    }
                    if ( state.backtracking==0 ) {
                      ((sim_stmt_scope)sim_stmt_stack.peek()).strings.add((evaconnector!=null?evaconnector.getText():null) + " " + (eva!=null?eva.getText():null));
                    }
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2338:148: (evaconnector= OF eva= NAME )*
                    loop240:
                    do {
                        int alt240=2;
                        int LA240_0 = input.LA(1);

                        if ( (LA240_0==OF) ) {
                            alt240=1;
                        }


                        switch (alt240) {
                    	case 1 :
                    	    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2338:150: evaconnector= OF eva= NAME
                    	    {
                    	    evaconnector=(Token)match(input,OF,FOLLOW_OF_in_selectattributefrag10194); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    evaconnector_tree = (PythonTree)adaptor.create(evaconnector);
                    	    adaptor.addChild(root_0, evaconnector_tree);
                    	    }
                    	    eva=(Token)match(input,NAME,FOLLOW_NAME_in_selectattributefrag10198); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    eva_tree = (PythonTree)adaptor.create(eva);
                    	    adaptor.addChild(root_0, eva_tree);
                    	    }
                    	    if ( state.backtracking==0 ) {
                    	      ((sim_stmt_scope)sim_stmt_stack.peek()).strings.add((evaconnector!=null?evaconnector.getText():null) + " " + (eva!=null?eva.getText():null));
                    	    }

                    	    }
                    	    break;

                    	default :
                    	    break loop240;
                        }
                    } while (true);


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (PythonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException re) {
            errorHandler.reportError(this, re);
            errorHandler.recover(this, input,re);
            retval.tree = (PythonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "selectattributefrag"

    public static class limitfrag_return extends ParserRuleReturnScope {
        PythonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "limitfrag"
    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2341:1: limitfrag : (lim= LIMIT ASSIGN e= expr[expr_contextType.Load] ) ;
    public final PythonParser.limitfrag_return limitfrag() throws RecognitionException {
        PythonParser.limitfrag_return retval = new PythonParser.limitfrag_return();
        retval.start = input.LT(1);

        PythonTree root_0 = null;

        Token lim=null;
        Token ASSIGN646=null;
        PythonParser.expr_return e = null;


        PythonTree lim_tree=null;
        PythonTree ASSIGN646_tree=null;

        try {
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2342:9: ( (lim= LIMIT ASSIGN e= expr[expr_contextType.Load] ) )
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2343:2: (lim= LIMIT ASSIGN e= expr[expr_contextType.Load] )
            {
            root_0 = (PythonTree)adaptor.nil();

            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2343:2: (lim= LIMIT ASSIGN e= expr[expr_contextType.Load] )
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2343:3: lim= LIMIT ASSIGN e= expr[expr_contextType.Load]
            {
            lim=(Token)match(input,LIMIT,FOLLOW_LIMIT_in_limitfrag10229); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            lim_tree = (PythonTree)adaptor.create(lim);
            adaptor.addChild(root_0, lim_tree);
            }
            ASSIGN646=(Token)match(input,ASSIGN,FOLLOW_ASSIGN_in_limitfrag10231); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ASSIGN646_tree = (PythonTree)adaptor.create(ASSIGN646);
            adaptor.addChild(root_0, ASSIGN646_tree);
            }
            pushFollow(FOLLOW_expr_in_limitfrag10235);
            e=expr(expr_contextType.Load);

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, e.getTree());
            if ( state.backtracking==0 ) {
              ((sim_stmt_scope)sim_stmt_stack.peek()).strings.add((lim!=null?lim.getText():null));((sim_stmt_scope)sim_stmt_stack.peek()).exprs.add(actions.castExpr((e!=null?((PythonTree)e.tree):null)));
            }

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (PythonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException re) {
            errorHandler.reportError(this, re);
            errorHandler.recover(this, input,re);
            retval.tree = (PythonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "limitfrag"

    public static class assignment_expression_return extends ParserRuleReturnScope {
        PythonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "assignment_expression"
    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2346:1: assignment_expression : attributefrag ( evafrag | dvafrag ) ;
    public final PythonParser.assignment_expression_return assignment_expression() throws RecognitionException {
        PythonParser.assignment_expression_return retval = new PythonParser.assignment_expression_return();
        retval.start = input.LT(1);

        PythonTree root_0 = null;

        PythonParser.attributefrag_return attributefrag647 = null;

        PythonParser.evafrag_return evafrag648 = null;

        PythonParser.dvafrag_return dvafrag649 = null;



        try {
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2347:2: ( attributefrag ( evafrag | dvafrag ) )
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2348:3: attributefrag ( evafrag | dvafrag )
            {
            root_0 = (PythonTree)adaptor.nil();

            pushFollow(FOLLOW_attributefrag_in_assignment_expression10258);
            attributefrag647=attributefrag();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, attributefrag647.getTree());
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2348:17: ( evafrag | dvafrag )
            int alt242=2;
            switch ( input.LA(1) ) {
            case INCLUDE:
                {
                alt242=1;
                }
                break;
            case NAME:
                {
                int LA242_2 = input.LA(2);

                if ( (LA242_2==DOT||(LA242_2>=LPAREN && LA242_2<=RPAREN)||(LA242_2>=COMMA && LA242_2<=DOUBLESTAR)||LA242_2==RIGHTSHIFT||(LA242_2>=VBAR && LA242_2<=DOUBLESLASH)||LA242_2==LBRACK) ) {
                    alt242=2;
                }
                else if ( (LA242_2==CAPSWITH) ) {
                    alt242=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 242, 2, input);

                    throw nvae;
                }
                }
                break;
            case LPAREN:
            case PLUS:
            case MINUS:
            case TILDE:
            case LBRACK:
            case LCURLY:
            case BACKQUOTE:
            case INT:
            case LONGINT:
            case FLOAT:
            case COMPLEX:
            case STRING:
            case PRO:
            case PRO_SELECT:
            case ASP:
            case ASP_SELECT:
            case ASP_PATH:
            case SELECT:
            case INSERT:
            case CREATE:
            case DROP:
            case UPDATE:
            case SQL_DELETE:
            case ALTER:
            case MAKECONNECT:
            case ASPSELECT:
            case RDFSELECT:
            case CAPSFROM:
            case MODIFY:
            case CAPSCLASS:
            case SUBCLASS:
                {
                alt242=2;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 242, 0, input);

                throw nvae;
            }

            switch (alt242) {
                case 1 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2348:18: evafrag
                    {
                    pushFollow(FOLLOW_evafrag_in_assignment_expression10261);
                    evafrag648=evafrag();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, evafrag648.getTree());

                    }
                    break;
                case 2 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2348:28: dvafrag
                    {
                    pushFollow(FOLLOW_dvafrag_in_assignment_expression10265);
                    dvafrag649=dvafrag();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, dvafrag649.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (PythonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException re) {
            errorHandler.reportError(this, re);
            errorHandler.recover(this, input,re);
            retval.tree = (PythonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "assignment_expression"

    public static class classfrag_return extends ParserRuleReturnScope {
        PythonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "classfrag"
    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2350:1: classfrag : classname= NAME ;
    public final PythonParser.classfrag_return classfrag() throws RecognitionException {
        PythonParser.classfrag_return retval = new PythonParser.classfrag_return();
        retval.start = input.LT(1);

        PythonTree root_0 = null;

        Token classname=null;

        PythonTree classname_tree=null;

        try {
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2351:2: (classname= NAME )
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2352:2: classname= NAME
            {
            root_0 = (PythonTree)adaptor.nil();

            classname=(Token)match(input,NAME,FOLLOW_NAME_in_classfrag10279); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            classname_tree = (PythonTree)adaptor.create(classname);
            adaptor.addChild(root_0, classname_tree);
            }
            if ( state.backtracking==0 ) {
              ((sim_stmt_scope)sim_stmt_stack.peek()).strings.add((classname!=null?classname.getText():null));
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (PythonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException re) {
            errorHandler.reportError(this, re);
            errorHandler.recover(this, input,re);
            retval.tree = (PythonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "classfrag"

    public static class attributefrag_return extends ParserRuleReturnScope {
        PythonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "attributefrag"
    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2355:1: attributefrag : attname= NAME PRIMP ;
    public final PythonParser.attributefrag_return attributefrag() throws RecognitionException {
        PythonParser.attributefrag_return retval = new PythonParser.attributefrag_return();
        retval.start = input.LT(1);

        PythonTree root_0 = null;

        Token attname=null;
        Token PRIMP650=null;

        PythonTree attname_tree=null;
        PythonTree PRIMP650_tree=null;

        try {
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2356:2: (attname= NAME PRIMP )
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2357:9: attname= NAME PRIMP
            {
            root_0 = (PythonTree)adaptor.nil();

            attname=(Token)match(input,NAME,FOLLOW_NAME_in_attributefrag10302); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            attname_tree = (PythonTree)adaptor.create(attname);
            adaptor.addChild(root_0, attname_tree);
            }
            if ( state.backtracking==0 ) {
              ((sim_stmt_scope)sim_stmt_stack.peek()).strings.add("attributeToChange"); ((sim_stmt_scope)sim_stmt_stack.peek()).strings.add((attname!=null?attname.getText():null));
            }
            PRIMP650=(Token)match(input,PRIMP,FOLLOW_PRIMP_in_attributefrag10306); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            PRIMP650_tree = (PythonTree)adaptor.create(PRIMP650);
            adaptor.addChild(root_0, PRIMP650_tree);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (PythonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException re) {
            errorHandler.reportError(this, re);
            errorHandler.recover(this, input,re);
            retval.tree = (PythonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "attributefrag"

    public static class evafrag_return extends ParserRuleReturnScope {
        PythonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "evafrag"
    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2360:1: evafrag : ( (in= INCLUDE )? evaValue= NAME CAPSWITH LPAREN atname= NAME ASSIGN val= expr[expr_contextType.Load] ( CAPSAND atname= NAME ASSIGN val= expr[expr_contextType.Load] )* RPAREN ) ;
    public final PythonParser.evafrag_return evafrag() throws RecognitionException {
        PythonParser.evafrag_return retval = new PythonParser.evafrag_return();
        retval.start = input.LT(1);

        PythonTree root_0 = null;

        Token in=null;
        Token evaValue=null;
        Token atname=null;
        Token CAPSWITH651=null;
        Token LPAREN652=null;
        Token ASSIGN653=null;
        Token CAPSAND654=null;
        Token ASSIGN655=null;
        Token RPAREN656=null;
        PythonParser.expr_return val = null;


        PythonTree in_tree=null;
        PythonTree evaValue_tree=null;
        PythonTree atname_tree=null;
        PythonTree CAPSWITH651_tree=null;
        PythonTree LPAREN652_tree=null;
        PythonTree ASSIGN653_tree=null;
        PythonTree CAPSAND654_tree=null;
        PythonTree ASSIGN655_tree=null;
        PythonTree RPAREN656_tree=null;

        try {
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2361:2: ( ( (in= INCLUDE )? evaValue= NAME CAPSWITH LPAREN atname= NAME ASSIGN val= expr[expr_contextType.Load] ( CAPSAND atname= NAME ASSIGN val= expr[expr_contextType.Load] )* RPAREN ) )
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2362:2: ( (in= INCLUDE )? evaValue= NAME CAPSWITH LPAREN atname= NAME ASSIGN val= expr[expr_contextType.Load] ( CAPSAND atname= NAME ASSIGN val= expr[expr_contextType.Load] )* RPAREN )
            {
            root_0 = (PythonTree)adaptor.nil();

            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2362:2: ( (in= INCLUDE )? evaValue= NAME CAPSWITH LPAREN atname= NAME ASSIGN val= expr[expr_contextType.Load] ( CAPSAND atname= NAME ASSIGN val= expr[expr_contextType.Load] )* RPAREN )
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2362:4: (in= INCLUDE )? evaValue= NAME CAPSWITH LPAREN atname= NAME ASSIGN val= expr[expr_contextType.Load] ( CAPSAND atname= NAME ASSIGN val= expr[expr_contextType.Load] )* RPAREN
            {
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2362:4: (in= INCLUDE )?
            int alt243=2;
            int LA243_0 = input.LA(1);

            if ( (LA243_0==INCLUDE) ) {
                alt243=1;
            }
            switch (alt243) {
                case 1 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2362:5: in= INCLUDE
                    {
                    in=(Token)match(input,INCLUDE,FOLLOW_INCLUDE_in_evafrag10323); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    in_tree = (PythonTree)adaptor.create(in);
                    adaptor.addChild(root_0, in_tree);
                    }
                    if ( state.backtracking==0 ) {
                      ((sim_stmt_scope)sim_stmt_stack.peek()).strings.add("evaValue"); ((sim_stmt_scope)sim_stmt_stack.peek()).strings.add((in!=null?in.getText():null));
                    }

                    }
                    break;

            }

            evaValue=(Token)match(input,NAME,FOLLOW_NAME_in_evafrag10340); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            evaValue_tree = (PythonTree)adaptor.create(evaValue);
            adaptor.addChild(root_0, evaValue_tree);
            }
            if ( state.backtracking==0 ) {
              if ((in!=null?in.getText():null) == null) {((sim_stmt_scope)sim_stmt_stack.peek()).strings.add("evaValue");} ((sim_stmt_scope)sim_stmt_stack.peek()).strings.add((evaValue!=null?evaValue.getText():null)); 
            }
            CAPSWITH651=(Token)match(input,CAPSWITH,FOLLOW_CAPSWITH_in_evafrag10344); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            CAPSWITH651_tree = (PythonTree)adaptor.create(CAPSWITH651);
            adaptor.addChild(root_0, CAPSWITH651_tree);
            }
            LPAREN652=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_evafrag10346); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LPAREN652_tree = (PythonTree)adaptor.create(LPAREN652);
            adaptor.addChild(root_0, LPAREN652_tree);
            }
            atname=(Token)match(input,NAME,FOLLOW_NAME_in_evafrag10358); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            atname_tree = (PythonTree)adaptor.create(atname);
            adaptor.addChild(root_0, atname_tree);
            }
            if ( state.backtracking==0 ) {
              ((sim_stmt_scope)sim_stmt_stack.peek()).strings.add((atname!=null?atname.getText():null));
            }
            ASSIGN653=(Token)match(input,ASSIGN,FOLLOW_ASSIGN_in_evafrag10362); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ASSIGN653_tree = (PythonTree)adaptor.create(ASSIGN653);
            adaptor.addChild(root_0, ASSIGN653_tree);
            }
            pushFollow(FOLLOW_expr_in_evafrag10368);
            val=expr(expr_contextType.Load);

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, val.getTree());
            if ( state.backtracking==0 ) {
              ((sim_stmt_scope)sim_stmt_stack.peek()).exprs.add(actions.castExpr((val!=null?((PythonTree)val.tree):null)));
            }
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2366:9: ( CAPSAND atname= NAME ASSIGN val= expr[expr_contextType.Load] )*
            loop244:
            do {
                int alt244=2;
                int LA244_0 = input.LA(1);

                if ( (LA244_0==CAPSAND) ) {
                    alt244=1;
                }


                switch (alt244) {
            	case 1 :
            	    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2366:10: CAPSAND atname= NAME ASSIGN val= expr[expr_contextType.Load]
            	    {
            	    CAPSAND654=(Token)match(input,CAPSAND,FOLLOW_CAPSAND_in_evafrag10383); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    CAPSAND654_tree = (PythonTree)adaptor.create(CAPSAND654);
            	    adaptor.addChild(root_0, CAPSAND654_tree);
            	    }
            	    atname=(Token)match(input,NAME,FOLLOW_NAME_in_evafrag10387); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    atname_tree = (PythonTree)adaptor.create(atname);
            	    adaptor.addChild(root_0, atname_tree);
            	    }
            	    if ( state.backtracking==0 ) {
            	      ((sim_stmt_scope)sim_stmt_stack.peek()).strings.add((atname!=null?atname.getText():null));
            	    }
            	    ASSIGN655=(Token)match(input,ASSIGN,FOLLOW_ASSIGN_in_evafrag10392); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    ASSIGN655_tree = (PythonTree)adaptor.create(ASSIGN655);
            	    adaptor.addChild(root_0, ASSIGN655_tree);
            	    }
            	    pushFollow(FOLLOW_expr_in_evafrag10396);
            	    val=expr(expr_contextType.Load);

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, val.getTree());
            	    if ( state.backtracking==0 ) {
            	      ((sim_stmt_scope)sim_stmt_stack.peek()).exprs.add(actions.castExpr((val!=null?((PythonTree)val.tree):null)));
            	    }

            	    }
            	    break;

            	default :
            	    break loop244;
                }
            } while (true);

            RPAREN656=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_evafrag10404); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            RPAREN656_tree = (PythonTree)adaptor.create(RPAREN656);
            adaptor.addChild(root_0, RPAREN656_tree);
            }

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (PythonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException re) {
            errorHandler.reportError(this, re);
            errorHandler.recover(this, input,re);
            retval.tree = (PythonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "evafrag"

    public static class dvafrag_return extends ParserRuleReturnScope {
        PythonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dvafrag"
    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2370:1: dvafrag : (dvaValue= expr[expr_contextType.Load] ) ;
    public final PythonParser.dvafrag_return dvafrag() throws RecognitionException {
        PythonParser.dvafrag_return retval = new PythonParser.dvafrag_return();
        retval.start = input.LT(1);

        PythonTree root_0 = null;

        PythonParser.expr_return dvaValue = null;



        try {
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2371:2: ( (dvaValue= expr[expr_contextType.Load] ) )
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2372:2: (dvaValue= expr[expr_contextType.Load] )
            {
            root_0 = (PythonTree)adaptor.nil();

            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2372:2: (dvaValue= expr[expr_contextType.Load] )
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2372:3: dvaValue= expr[expr_contextType.Load]
            {
            pushFollow(FOLLOW_expr_in_dvafrag10423);
            dvaValue=expr(expr_contextType.Load);

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, dvaValue.getTree());
            if ( state.backtracking==0 ) {
              ((sim_stmt_scope)sim_stmt_stack.peek()).strings.add("dvaValue"); ((sim_stmt_scope)sim_stmt_stack.peek()).exprs.add(actions.castExpr((dvaValue!=null?((PythonTree)dvaValue.tree):null)));
            }

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (PythonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException re) {
            errorHandler.reportError(this, re);
            errorHandler.recover(this, input,re);
            retval.tree = (PythonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "dvafrag"

    public static class whereclausefrag_return extends ParserRuleReturnScope {
        PythonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "whereclausefrag"
    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2376:1: whereclausefrag : whr= WHERE atname= NAME ASSIGN val= expr[expr_contextType.Load] ( CAPSAND atname= NAME ASSIGN val= expr[expr_contextType.Load] )* ;
    public final PythonParser.whereclausefrag_return whereclausefrag() throws RecognitionException {
        PythonParser.whereclausefrag_return retval = new PythonParser.whereclausefrag_return();
        retval.start = input.LT(1);

        PythonTree root_0 = null;

        Token whr=null;
        Token atname=null;
        Token ASSIGN657=null;
        Token CAPSAND658=null;
        Token ASSIGN659=null;
        PythonParser.expr_return val = null;


        PythonTree whr_tree=null;
        PythonTree atname_tree=null;
        PythonTree ASSIGN657_tree=null;
        PythonTree CAPSAND658_tree=null;
        PythonTree ASSIGN659_tree=null;

        try {
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2377:2: (whr= WHERE atname= NAME ASSIGN val= expr[expr_contextType.Load] ( CAPSAND atname= NAME ASSIGN val= expr[expr_contextType.Load] )* )
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2378:2: whr= WHERE atname= NAME ASSIGN val= expr[expr_contextType.Load] ( CAPSAND atname= NAME ASSIGN val= expr[expr_contextType.Load] )*
            {
            root_0 = (PythonTree)adaptor.nil();

            whr=(Token)match(input,WHERE,FOLLOW_WHERE_in_whereclausefrag10441); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            whr_tree = (PythonTree)adaptor.create(whr);
            adaptor.addChild(root_0, whr_tree);
            }
            if ( state.backtracking==0 ) {
              ((sim_stmt_scope)sim_stmt_stack.peek()).strings.add((whr!=null?whr.getText():null));
            }
            atname=(Token)match(input,NAME,FOLLOW_NAME_in_whereclausefrag10457); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            atname_tree = (PythonTree)adaptor.create(atname);
            adaptor.addChild(root_0, atname_tree);
            }
            if ( state.backtracking==0 ) {
              ((sim_stmt_scope)sim_stmt_stack.peek()).strings.add((atname!=null?atname.getText():null));
            }
            ASSIGN657=(Token)match(input,ASSIGN,FOLLOW_ASSIGN_in_whereclausefrag10461); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ASSIGN657_tree = (PythonTree)adaptor.create(ASSIGN657);
            adaptor.addChild(root_0, ASSIGN657_tree);
            }
            pushFollow(FOLLOW_expr_in_whereclausefrag10467);
            val=expr(expr_contextType.Load);

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, val.getTree());
            if ( state.backtracking==0 ) {
              ((sim_stmt_scope)sim_stmt_stack.peek()).exprs.add(actions.castExpr((val!=null?((PythonTree)val.tree):null)));
            }
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2381:9: ( CAPSAND atname= NAME ASSIGN val= expr[expr_contextType.Load] )*
            loop245:
            do {
                int alt245=2;
                int LA245_0 = input.LA(1);

                if ( (LA245_0==CAPSAND) ) {
                    alt245=1;
                }


                switch (alt245) {
            	case 1 :
            	    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2381:10: CAPSAND atname= NAME ASSIGN val= expr[expr_contextType.Load]
            	    {
            	    CAPSAND658=(Token)match(input,CAPSAND,FOLLOW_CAPSAND_in_whereclausefrag10482); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    CAPSAND658_tree = (PythonTree)adaptor.create(CAPSAND658);
            	    adaptor.addChild(root_0, CAPSAND658_tree);
            	    }
            	    atname=(Token)match(input,NAME,FOLLOW_NAME_in_whereclausefrag10486); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    atname_tree = (PythonTree)adaptor.create(atname);
            	    adaptor.addChild(root_0, atname_tree);
            	    }
            	    if ( state.backtracking==0 ) {
            	      ((sim_stmt_scope)sim_stmt_stack.peek()).strings.add((atname!=null?atname.getText():null));
            	    }
            	    ASSIGN659=(Token)match(input,ASSIGN,FOLLOW_ASSIGN_in_whereclausefrag10491); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    ASSIGN659_tree = (PythonTree)adaptor.create(ASSIGN659);
            	    adaptor.addChild(root_0, ASSIGN659_tree);
            	    }
            	    pushFollow(FOLLOW_expr_in_whereclausefrag10495);
            	    val=expr(expr_contextType.Load);

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, val.getTree());
            	    if ( state.backtracking==0 ) {
            	      ((sim_stmt_scope)sim_stmt_stack.peek()).exprs.add(actions.castExpr((val!=null?((PythonTree)val.tree):null)));
            	    }

            	    }
            	    break;

            	default :
            	    break loop245;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (PythonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException re) {
            errorHandler.reportError(this, re);
            errorHandler.recover(this, input,re);
            retval.tree = (PythonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "whereclausefrag"

    public static class sim_expr_return extends ParserRuleReturnScope {
        PythonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "sim_expr"
    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2384:1: sim_expr : expr[expr_contextType.Load] ;
    public final PythonParser.sim_expr_return sim_expr() throws RecognitionException {
        PythonParser.sim_expr_return retval = new PythonParser.sim_expr_return();
        retval.start = input.LT(1);

        PythonTree root_0 = null;

        PythonParser.expr_return expr660 = null;



        try {
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2385:2: ( expr[expr_contextType.Load] )
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2386:2: expr[expr_contextType.Load]
            {
            root_0 = (PythonTree)adaptor.nil();

            pushFollow(FOLLOW_expr_in_sim_expr10513);
            expr660=expr(expr_contextType.Load);

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expr660.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (PythonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException re) {
            errorHandler.reportError(this, re);
            errorHandler.recover(this, input,re);
            retval.tree = (PythonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "sim_expr"

    public static class listmaker_return extends ParserRuleReturnScope {
        PythonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "listmaker"
    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2392:1: listmaker[Token lbrack] : t+= test[$expr::ctype] ( list_for[gens] | ( options {greedy=true; } : COMMA t+= test[$expr::ctype] )* ) ( COMMA )? ;
    public final PythonParser.listmaker_return listmaker(Token lbrack) throws RecognitionException {
        PythonParser.listmaker_return retval = new PythonParser.listmaker_return();
        retval.start = input.LT(1);

        PythonTree root_0 = null;

        Token COMMA662=null;
        Token COMMA663=null;
        List list_t=null;
        PythonParser.list_for_return list_for661 = null;

        PythonParser.test_return t = null;
         t = null;
        PythonTree COMMA662_tree=null;
        PythonTree COMMA663_tree=null;


            List gens = new ArrayList();
            expr etype = null;

        try {
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2400:5: (t+= test[$expr::ctype] ( list_for[gens] | ( options {greedy=true; } : COMMA t+= test[$expr::ctype] )* ) ( COMMA )? )
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2400:7: t+= test[$expr::ctype] ( list_for[gens] | ( options {greedy=true; } : COMMA t+= test[$expr::ctype] )* ) ( COMMA )?
            {
            root_0 = (PythonTree)adaptor.nil();

            pushFollow(FOLLOW_test_in_listmaker10544);
            t=test(((expr_scope)expr_stack.peek()).ctype);

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, t.getTree());
            if (list_t==null) list_t=new ArrayList();
            list_t.add(t.getTree());

            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2401:9: ( list_for[gens] | ( options {greedy=true; } : COMMA t+= test[$expr::ctype] )* )
            int alt247=2;
            int LA247_0 = input.LA(1);

            if ( (LA247_0==FOR) ) {
                alt247=1;
            }
            else if ( (LA247_0==COMMA||LA247_0==RBRACK) ) {
                alt247=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 247, 0, input);

                throw nvae;
            }
            switch (alt247) {
                case 1 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2401:10: list_for[gens]
                    {
                    pushFollow(FOLLOW_list_for_in_listmaker10556);
                    list_for661=list_for(gens);

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, list_for661.getTree());
                    if ( state.backtracking==0 ) {

                                   Collections.reverse(gens);
                                   List<comprehension> c = gens;
                                   etype = new ListComp(((Token)retval.start), actions.castExpr(list_t.get(0)), c);
                               
                    }

                    }
                    break;
                case 2 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2407:11: ( options {greedy=true; } : COMMA t+= test[$expr::ctype] )*
                    {
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2407:11: ( options {greedy=true; } : COMMA t+= test[$expr::ctype] )*
                    loop246:
                    do {
                        int alt246=2;
                        int LA246_0 = input.LA(1);

                        if ( (LA246_0==COMMA) ) {
                            int LA246_1 = input.LA(2);

                            if ( (LA246_1==NAME||(LA246_1>=LAMBDA && LA246_1<=NOT)||LA246_1==LPAREN||(LA246_1>=PLUS && LA246_1<=MINUS)||(LA246_1>=TILDE && LA246_1<=LBRACK)||LA246_1==LCURLY||(LA246_1>=BACKQUOTE && LA246_1<=PRO)||LA246_1==PRO_SELECT||LA246_1==ASP||LA246_1==ASP_SELECT||LA246_1==ASP_PATH||(LA246_1>=SELECT && LA246_1<=RDFSELECT)||LA246_1==CAPSFROM||(LA246_1>=MODIFY && LA246_1<=SUBCLASS)) ) {
                                alt246=1;
                            }


                        }


                        switch (alt246) {
                    	case 1 :
                    	    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2407:35: COMMA t+= test[$expr::ctype]
                    	    {
                    	    COMMA662=(Token)match(input,COMMA,FOLLOW_COMMA_in_listmaker10588); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    COMMA662_tree = (PythonTree)adaptor.create(COMMA662);
                    	    adaptor.addChild(root_0, COMMA662_tree);
                    	    }
                    	    pushFollow(FOLLOW_test_in_listmaker10592);
                    	    t=test(((expr_scope)expr_stack.peek()).ctype);

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, t.getTree());
                    	    if (list_t==null) list_t=new ArrayList();
                    	    list_t.add(t.getTree());


                    	    }
                    	    break;

                    	default :
                    	    break loop246;
                        }
                    } while (true);

                    if ( state.backtracking==0 ) {

                                     etype = new org.python.antlr.ast.List(lbrack, actions.castExprs(list_t), ((expr_scope)expr_stack.peek()).ctype);
                                 
                    }

                    }
                    break;

            }

            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2411:11: ( COMMA )?
            int alt248=2;
            int LA248_0 = input.LA(1);

            if ( (LA248_0==COMMA) ) {
                alt248=1;
            }
            switch (alt248) {
                case 1 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2411:12: COMMA
                    {
                    COMMA663=(Token)match(input,COMMA,FOLLOW_COMMA_in_listmaker10621); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COMMA663_tree = (PythonTree)adaptor.create(COMMA663);
                    adaptor.addChild(root_0, COMMA663_tree);
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (PythonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {

                 retval.tree = etype;

            }
        }

        catch (RecognitionException re) {
            errorHandler.reportError(this, re);
            errorHandler.recover(this, input,re);
            retval.tree = (PythonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "listmaker"

    public static class testlist_gexp_return extends ParserRuleReturnScope {
        PythonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "testlist_gexp"
    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2415:1: testlist_gexp : t+= test[$expr::ctype] ( ( options {k=2; } : c1= COMMA t+= test[$expr::ctype] )* (c2= COMMA )? {...}? | -> test | ( gen_for[gens] ) ) ;
    public final PythonParser.testlist_gexp_return testlist_gexp() throws RecognitionException {
        PythonParser.testlist_gexp_return retval = new PythonParser.testlist_gexp_return();
        retval.start = input.LT(1);

        PythonTree root_0 = null;

        Token c1=null;
        Token c2=null;
        List list_t=null;
        PythonParser.gen_for_return gen_for664 = null;

        PythonParser.test_return t = null;
         t = null;
        PythonTree c1_tree=null;
        PythonTree c2_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_test=new RewriteRuleSubtreeStream(adaptor,"rule test");
        RewriteRuleSubtreeStream stream_gen_for=new RewriteRuleSubtreeStream(adaptor,"rule gen_for");

            expr etype = null;
            List gens = new ArrayList();

        try {
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2425:5: (t+= test[$expr::ctype] ( ( options {k=2; } : c1= COMMA t+= test[$expr::ctype] )* (c2= COMMA )? {...}? | -> test | ( gen_for[gens] ) ) )
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2425:7: t+= test[$expr::ctype] ( ( options {k=2; } : c1= COMMA t+= test[$expr::ctype] )* (c2= COMMA )? {...}? | -> test | ( gen_for[gens] ) )
            {
            pushFollow(FOLLOW_test_in_testlist_gexp10653);
            t=test(((expr_scope)expr_stack.peek()).ctype);

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_test.add(t.getTree());
            if (list_t==null) list_t=new ArrayList();
            list_t.add(t.getTree());

            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2426:9: ( ( options {k=2; } : c1= COMMA t+= test[$expr::ctype] )* (c2= COMMA )? {...}? | -> test | ( gen_for[gens] ) )
            int alt251=3;
            switch ( input.LA(1) ) {
            case COMMA:
                {
                alt251=1;
                }
                break;
            case RPAREN:
                {
                int LA251_2 = input.LA(2);

                if ( (( c1 != null || c2 != null )) ) {
                    alt251=1;
                }
                else if ( (true) ) {
                    alt251=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 251, 2, input);

                    throw nvae;
                }
                }
                break;
            case FOR:
                {
                alt251=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 251, 0, input);

                throw nvae;
            }

            switch (alt251) {
                case 1 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2426:11: ( options {k=2; } : c1= COMMA t+= test[$expr::ctype] )* (c2= COMMA )? {...}?
                    {
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2426:11: ( options {k=2; } : c1= COMMA t+= test[$expr::ctype] )*
                    loop249:
                    do {
                        int alt249=2;
                        alt249 = dfa249.predict(input);
                        switch (alt249) {
                    	case 1 :
                    	    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2426:28: c1= COMMA t+= test[$expr::ctype]
                    	    {
                    	    c1=(Token)match(input,COMMA,FOLLOW_COMMA_in_testlist_gexp10677); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(c1);

                    	    pushFollow(FOLLOW_test_in_testlist_gexp10681);
                    	    t=test(((expr_scope)expr_stack.peek()).ctype);

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_test.add(t.getTree());
                    	    if (list_t==null) list_t=new ArrayList();
                    	    list_t.add(t.getTree());


                    	    }
                    	    break;

                    	default :
                    	    break loop249;
                        }
                    } while (true);

                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2426:61: (c2= COMMA )?
                    int alt250=2;
                    int LA250_0 = input.LA(1);

                    if ( (LA250_0==COMMA) ) {
                        alt250=1;
                    }
                    switch (alt250) {
                        case 1 :
                            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2426:62: c2= COMMA
                            {
                            c2=(Token)match(input,COMMA,FOLLOW_COMMA_in_testlist_gexp10689); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_COMMA.add(c2);


                            }
                            break;

                    }

                    if ( !(( c1 != null || c2 != null )) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "testlist_gexp", " $c1 != null || $c2 != null ");
                    }
                    if ( state.backtracking==0 ) {

                                     etype = new Tuple(((Token)retval.start), actions.castExprs(list_t), ((expr_scope)expr_stack.peek()).ctype);
                                 
                    }

                    }
                    break;
                case 2 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2431:11: 
                    {

                    // AST REWRITE
                    // elements: test
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (PythonTree)adaptor.nil();
                    // 2431:11: -> test
                    {
                        adaptor.addChild(root_0, stream_test.nextTree());

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2432:11: ( gen_for[gens] )
                    {
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2432:11: ( gen_for[gens] )
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2432:12: gen_for[gens]
                    {
                    pushFollow(FOLLOW_gen_for_in_testlist_gexp10743);
                    gen_for664=gen_for(gens);

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_gen_for.add(gen_for664.getTree());
                    if ( state.backtracking==0 ) {

                                     Collections.reverse(gens);
                                     List<comprehension> c = gens;
                                     expr e = actions.castExpr(list_t.get(0));
                                     if (e instanceof Context) {
                                         ((Context)e).setContext(expr_contextType.Load);
                                     }
                                     etype = new GeneratorExp(((Token)retval.start), actions.castExpr(list_t.get(0)), c);
                                 
                    }

                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (PythonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {

                  if (etype != null) {
                      retval.tree = etype;
                  }

            }
        }

        catch (RecognitionException re) {
            errorHandler.reportError(this, re);
            errorHandler.recover(this, input,re);
            retval.tree = (PythonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "testlist_gexp"

    public static class lambdef_return extends ParserRuleReturnScope {
        PythonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "lambdef"
    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2447:1: lambdef : LAMBDA ( varargslist )? COLON test[expr_contextType.Load] ;
    public final PythonParser.lambdef_return lambdef() throws RecognitionException {
        PythonParser.lambdef_return retval = new PythonParser.lambdef_return();
        retval.start = input.LT(1);

        PythonTree root_0 = null;

        Token LAMBDA665=null;
        Token COLON667=null;
        PythonParser.varargslist_return varargslist666 = null;

        PythonParser.test_return test668 = null;


        PythonTree LAMBDA665_tree=null;
        PythonTree COLON667_tree=null;


            expr etype = null;

        try {
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2454:5: ( LAMBDA ( varargslist )? COLON test[expr_contextType.Load] )
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2454:7: LAMBDA ( varargslist )? COLON test[expr_contextType.Load]
            {
            root_0 = (PythonTree)adaptor.nil();

            LAMBDA665=(Token)match(input,LAMBDA,FOLLOW_LAMBDA_in_lambdef10807); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LAMBDA665_tree = (PythonTree)adaptor.create(LAMBDA665);
            adaptor.addChild(root_0, LAMBDA665_tree);
            }
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2454:14: ( varargslist )?
            int alt252=2;
            int LA252_0 = input.LA(1);

            if ( (LA252_0==NAME||LA252_0==LPAREN||(LA252_0>=STAR && LA252_0<=DOUBLESTAR)) ) {
                alt252=1;
            }
            switch (alt252) {
                case 1 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2454:15: varargslist
                    {
                    pushFollow(FOLLOW_varargslist_in_lambdef10810);
                    varargslist666=varargslist();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, varargslist666.getTree());

                    }
                    break;

            }

            COLON667=(Token)match(input,COLON,FOLLOW_COLON_in_lambdef10814); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            COLON667_tree = (PythonTree)adaptor.create(COLON667);
            adaptor.addChild(root_0, COLON667_tree);
            }
            pushFollow(FOLLOW_test_in_lambdef10816);
            test668=test(expr_contextType.Load);

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, test668.getTree());
            if ( state.backtracking==0 ) {

                        arguments a = (varargslist666!=null?varargslist666.args:null);
                        if (a == null) {
                            a = new arguments(LAMBDA665, new ArrayList<expr>(), null, null, new ArrayList<expr>());
                        }
                        etype = new Lambda(LAMBDA665, a, actions.castExpr((test668!=null?((PythonTree)test668.tree):null)));
                    
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (PythonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {

                  retval.tree = etype;

            }
        }

        catch (RecognitionException re) {
            errorHandler.reportError(this, re);
            errorHandler.recover(this, input,re);
            retval.tree = (PythonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "lambdef"

    public static class trailer_return extends ParserRuleReturnScope {
        PythonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "trailer"
    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2465:1: trailer[Token begin, PythonTree ptree] : ( LPAREN ( arglist | ) RPAREN | LBRACK subscriptlist[$begin] RBRACK | DOT attr );
    public final PythonParser.trailer_return trailer(Token begin, PythonTree ptree) throws RecognitionException {
        PythonParser.trailer_return retval = new PythonParser.trailer_return();
        retval.start = input.LT(1);

        PythonTree root_0 = null;

        Token LPAREN669=null;
        Token RPAREN671=null;
        Token LBRACK672=null;
        Token RBRACK674=null;
        Token DOT675=null;
        PythonParser.arglist_return arglist670 = null;

        PythonParser.subscriptlist_return subscriptlist673 = null;

        PythonParser.attr_return attr676 = null;


        PythonTree LPAREN669_tree=null;
        PythonTree RPAREN671_tree=null;
        PythonTree LBRACK672_tree=null;
        PythonTree RBRACK674_tree=null;
        PythonTree DOT675_tree=null;


            expr etype = null;

        try {
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2474:5: ( LPAREN ( arglist | ) RPAREN | LBRACK subscriptlist[$begin] RBRACK | DOT attr )
            int alt254=3;
            switch ( input.LA(1) ) {
            case LPAREN:
                {
                alt254=1;
                }
                break;
            case LBRACK:
                {
                alt254=2;
                }
                break;
            case DOT:
                {
                alt254=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 254, 0, input);

                throw nvae;
            }

            switch (alt254) {
                case 1 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2474:7: LPAREN ( arglist | ) RPAREN
                    {
                    root_0 = (PythonTree)adaptor.nil();

                    LPAREN669=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_trailer10855); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LPAREN669_tree = (PythonTree)adaptor.create(LPAREN669);
                    adaptor.addChild(root_0, LPAREN669_tree);
                    }
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2475:7: ( arglist | )
                    int alt253=2;
                    int LA253_0 = input.LA(1);

                    if ( (LA253_0==NAME||(LA253_0>=LAMBDA && LA253_0<=NOT)||LA253_0==LPAREN||(LA253_0>=STAR && LA253_0<=DOUBLESTAR)||(LA253_0>=PLUS && LA253_0<=MINUS)||(LA253_0>=TILDE && LA253_0<=LBRACK)||LA253_0==LCURLY||(LA253_0>=BACKQUOTE && LA253_0<=PRO)||LA253_0==PRO_SELECT||LA253_0==ASP||LA253_0==ASP_SELECT||LA253_0==ASP_PATH||(LA253_0>=SELECT && LA253_0<=RDFSELECT)||LA253_0==CAPSFROM||(LA253_0>=MODIFY && LA253_0<=SUBCLASS)) ) {
                        alt253=1;
                    }
                    else if ( (LA253_0==RPAREN) ) {
                        alt253=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 253, 0, input);

                        throw nvae;
                    }
                    switch (alt253) {
                        case 1 :
                            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2475:8: arglist
                            {
                            pushFollow(FOLLOW_arglist_in_trailer10864);
                            arglist670=arglist();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, arglist670.getTree());
                            if ( state.backtracking==0 ) {

                                         etype = new Call(begin, actions.castExpr(ptree), actions.castExprs((arglist670!=null?arglist670.args:null)),
                                           actions.makeKeywords((arglist670!=null?arglist670.keywords:null)), (arglist670!=null?arglist670.starargs:null), (arglist670!=null?arglist670.kwargs:null));
                                     
                            }

                            }
                            break;
                        case 2 :
                            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2481:8: 
                            {
                            if ( state.backtracking==0 ) {

                                         etype = new Call(begin, actions.castExpr(ptree), new ArrayList<expr>(), new ArrayList<keyword>(), null, null);
                                     
                            }

                            }
                            break;

                    }

                    RPAREN671=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_trailer10906); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RPAREN671_tree = (PythonTree)adaptor.create(RPAREN671);
                    adaptor.addChild(root_0, RPAREN671_tree);
                    }

                    }
                    break;
                case 2 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2486:7: LBRACK subscriptlist[$begin] RBRACK
                    {
                    root_0 = (PythonTree)adaptor.nil();

                    LBRACK672=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_trailer10914); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LBRACK672_tree = (PythonTree)adaptor.create(LBRACK672);
                    adaptor.addChild(root_0, LBRACK672_tree);
                    }
                    pushFollow(FOLLOW_subscriptlist_in_trailer10916);
                    subscriptlist673=subscriptlist(begin);

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, subscriptlist673.getTree());
                    RBRACK674=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_trailer10919); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RBRACK674_tree = (PythonTree)adaptor.create(RBRACK674);
                    adaptor.addChild(root_0, RBRACK674_tree);
                    }
                    if ( state.backtracking==0 ) {

                                etype = new Subscript(begin, actions.castExpr(ptree), actions.castSlice((subscriptlist673!=null?((PythonTree)subscriptlist673.tree):null)), ((expr_scope)expr_stack.peek()).ctype);
                            
                    }

                    }
                    break;
                case 3 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2490:7: DOT attr
                    {
                    root_0 = (PythonTree)adaptor.nil();

                    DOT675=(Token)match(input,DOT,FOLLOW_DOT_in_trailer10935); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DOT675_tree = (PythonTree)adaptor.create(DOT675);
                    adaptor.addChild(root_0, DOT675_tree);
                    }
                    pushFollow(FOLLOW_attr_in_trailer10937);
                    attr676=attr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, attr676.getTree());
                    if ( state.backtracking==0 ) {

                                etype = new Attribute(begin, actions.castExpr(ptree), new Name((attr676!=null?((PythonTree)attr676.tree):null), (attr676!=null?input.toString(attr676.start,attr676.stop):null), expr_contextType.Load), ((expr_scope)expr_stack.peek()).ctype);
                            
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (PythonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {

                  if (etype != null) {
                      retval.tree = etype;
                  }

            }
        }

        catch (RecognitionException re) {
            errorHandler.reportError(this, re);
            errorHandler.recover(this, input,re);
            retval.tree = (PythonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "trailer"

    public static class subscriptlist_return extends ParserRuleReturnScope {
        PythonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "subscriptlist"
    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2497:1: subscriptlist[Token begin] : sub+= subscript ( options {greedy=true; } : c1= COMMA sub+= subscript )* (c2= COMMA )? ;
    public final PythonParser.subscriptlist_return subscriptlist(Token begin) throws RecognitionException {
        PythonParser.subscriptlist_return retval = new PythonParser.subscriptlist_return();
        retval.start = input.LT(1);

        PythonTree root_0 = null;

        Token c1=null;
        Token c2=null;
        List list_sub=null;
        PythonParser.subscript_return sub = null;
         sub = null;
        PythonTree c1_tree=null;
        PythonTree c2_tree=null;


            slice sltype = null;

        try {
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2504:5: (sub+= subscript ( options {greedy=true; } : c1= COMMA sub+= subscript )* (c2= COMMA )? )
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2504:7: sub+= subscript ( options {greedy=true; } : c1= COMMA sub+= subscript )* (c2= COMMA )?
            {
            root_0 = (PythonTree)adaptor.nil();

            pushFollow(FOLLOW_subscript_in_subscriptlist10976);
            sub=subscript();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, sub.getTree());
            if (list_sub==null) list_sub=new ArrayList();
            list_sub.add(sub.getTree());

            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2504:22: ( options {greedy=true; } : c1= COMMA sub+= subscript )*
            loop255:
            do {
                int alt255=2;
                int LA255_0 = input.LA(1);

                if ( (LA255_0==COMMA) ) {
                    int LA255_1 = input.LA(2);

                    if ( ((LA255_1>=NAME && LA255_1<=DOT)||(LA255_1>=LAMBDA && LA255_1<=NOT)||LA255_1==LPAREN||LA255_1==COLON||(LA255_1>=PLUS && LA255_1<=MINUS)||(LA255_1>=TILDE && LA255_1<=LBRACK)||LA255_1==LCURLY||(LA255_1>=BACKQUOTE && LA255_1<=PRO)||LA255_1==PRO_SELECT||LA255_1==ASP||LA255_1==ASP_SELECT||LA255_1==ASP_PATH||(LA255_1>=SELECT && LA255_1<=RDFSELECT)||LA255_1==CAPSFROM||(LA255_1>=MODIFY && LA255_1<=SUBCLASS)) ) {
                        alt255=1;
                    }


                }


                switch (alt255) {
            	case 1 :
            	    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2504:46: c1= COMMA sub+= subscript
            	    {
            	    c1=(Token)match(input,COMMA,FOLLOW_COMMA_in_subscriptlist10988); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    c1_tree = (PythonTree)adaptor.create(c1);
            	    adaptor.addChild(root_0, c1_tree);
            	    }
            	    pushFollow(FOLLOW_subscript_in_subscriptlist10992);
            	    sub=subscript();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, sub.getTree());
            	    if (list_sub==null) list_sub=new ArrayList();
            	    list_sub.add(sub.getTree());


            	    }
            	    break;

            	default :
            	    break loop255;
                }
            } while (true);

            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2504:72: (c2= COMMA )?
            int alt256=2;
            int LA256_0 = input.LA(1);

            if ( (LA256_0==COMMA) ) {
                alt256=1;
            }
            switch (alt256) {
                case 1 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2504:73: c2= COMMA
                    {
                    c2=(Token)match(input,COMMA,FOLLOW_COMMA_in_subscriptlist10999); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    c2_tree = (PythonTree)adaptor.create(c2);
                    adaptor.addChild(root_0, c2_tree);
                    }

                    }
                    break;

            }

            if ( state.backtracking==0 ) {

                        sltype = actions.makeSliceType(begin, c1, c2, list_sub);
                    
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (PythonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {

                 retval.tree = sltype;

            }
        }

        catch (RecognitionException re) {
            errorHandler.reportError(this, re);
            errorHandler.recover(this, input,re);
            retval.tree = (PythonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "subscriptlist"

    public static class subscript_return extends ParserRuleReturnScope {
        public slice sltype;
        PythonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "subscript"
    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2511:1: subscript returns [slice sltype] : (d1= DOT DOT DOT | ( test[null] COLON )=>lower= test[expr_contextType.Load] (c1= COLON (upper1= test[expr_contextType.Load] )? ( sliceop )? )? | ( COLON )=>c2= COLON (upper2= test[expr_contextType.Load] )? ( sliceop )? | test[expr_contextType.Load] );
    public final PythonParser.subscript_return subscript() throws RecognitionException {
        PythonParser.subscript_return retval = new PythonParser.subscript_return();
        retval.start = input.LT(1);

        PythonTree root_0 = null;

        Token d1=null;
        Token c1=null;
        Token c2=null;
        Token DOT677=null;
        Token DOT678=null;
        PythonParser.test_return lower = null;

        PythonParser.test_return upper1 = null;

        PythonParser.test_return upper2 = null;

        PythonParser.sliceop_return sliceop679 = null;

        PythonParser.sliceop_return sliceop680 = null;

        PythonParser.test_return test681 = null;


        PythonTree d1_tree=null;
        PythonTree c1_tree=null;
        PythonTree c2_tree=null;
        PythonTree DOT677_tree=null;
        PythonTree DOT678_tree=null;

        try {
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2516:5: (d1= DOT DOT DOT | ( test[null] COLON )=>lower= test[expr_contextType.Load] (c1= COLON (upper1= test[expr_contextType.Load] )? ( sliceop )? )? | ( COLON )=>c2= COLON (upper2= test[expr_contextType.Load] )? ( sliceop )? | test[expr_contextType.Load] )
            int alt262=4;
            alt262 = dfa262.predict(input);
            switch (alt262) {
                case 1 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2516:7: d1= DOT DOT DOT
                    {
                    root_0 = (PythonTree)adaptor.nil();

                    d1=(Token)match(input,DOT,FOLLOW_DOT_in_subscript11042); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    d1_tree = (PythonTree)adaptor.create(d1);
                    adaptor.addChild(root_0, d1_tree);
                    }
                    DOT677=(Token)match(input,DOT,FOLLOW_DOT_in_subscript11044); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DOT677_tree = (PythonTree)adaptor.create(DOT677);
                    adaptor.addChild(root_0, DOT677_tree);
                    }
                    DOT678=(Token)match(input,DOT,FOLLOW_DOT_in_subscript11046); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DOT678_tree = (PythonTree)adaptor.create(DOT678);
                    adaptor.addChild(root_0, DOT678_tree);
                    }
                    if ( state.backtracking==0 ) {

                                retval.sltype = new Ellipsis(d1);
                            
                    }

                    }
                    break;
                case 2 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2520:7: ( test[null] COLON )=>lower= test[expr_contextType.Load] (c1= COLON (upper1= test[expr_contextType.Load] )? ( sliceop )? )?
                    {
                    root_0 = (PythonTree)adaptor.nil();

                    pushFollow(FOLLOW_test_in_subscript11076);
                    lower=test(expr_contextType.Load);

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lower.getTree());
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2521:41: (c1= COLON (upper1= test[expr_contextType.Load] )? ( sliceop )? )?
                    int alt259=2;
                    int LA259_0 = input.LA(1);

                    if ( (LA259_0==COLON) ) {
                        alt259=1;
                    }
                    switch (alt259) {
                        case 1 :
                            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2521:42: c1= COLON (upper1= test[expr_contextType.Load] )? ( sliceop )?
                            {
                            c1=(Token)match(input,COLON,FOLLOW_COLON_in_subscript11082); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            c1_tree = (PythonTree)adaptor.create(c1);
                            adaptor.addChild(root_0, c1_tree);
                            }
                            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2521:51: (upper1= test[expr_contextType.Load] )?
                            int alt257=2;
                            int LA257_0 = input.LA(1);

                            if ( (LA257_0==NAME||(LA257_0>=LAMBDA && LA257_0<=NOT)||LA257_0==LPAREN||(LA257_0>=PLUS && LA257_0<=MINUS)||(LA257_0>=TILDE && LA257_0<=LBRACK)||LA257_0==LCURLY||(LA257_0>=BACKQUOTE && LA257_0<=PRO)||LA257_0==PRO_SELECT||LA257_0==ASP||LA257_0==ASP_SELECT||LA257_0==ASP_PATH||(LA257_0>=SELECT && LA257_0<=RDFSELECT)||LA257_0==CAPSFROM||(LA257_0>=MODIFY && LA257_0<=SUBCLASS)) ) {
                                alt257=1;
                            }
                            switch (alt257) {
                                case 1 :
                                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2521:52: upper1= test[expr_contextType.Load]
                                    {
                                    pushFollow(FOLLOW_test_in_subscript11087);
                                    upper1=test(expr_contextType.Load);

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) adaptor.addChild(root_0, upper1.getTree());

                                    }
                                    break;

                            }

                            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2521:89: ( sliceop )?
                            int alt258=2;
                            int LA258_0 = input.LA(1);

                            if ( (LA258_0==COLON) ) {
                                alt258=1;
                            }
                            switch (alt258) {
                                case 1 :
                                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2521:90: sliceop
                                    {
                                    pushFollow(FOLLOW_sliceop_in_subscript11093);
                                    sliceop679=sliceop();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) adaptor.addChild(root_0, sliceop679.getTree());

                                    }
                                    break;

                            }


                            }
                            break;

                    }

                    if ( state.backtracking==0 ) {

                                retval.sltype = actions.makeSubscript((lower!=null?((PythonTree)lower.tree):null), c1, (upper1!=null?((PythonTree)upper1.tree):null), (sliceop679!=null?((PythonTree)sliceop679.tree):null));
                            
                    }

                    }
                    break;
                case 3 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2525:7: ( COLON )=>c2= COLON (upper2= test[expr_contextType.Load] )? ( sliceop )?
                    {
                    root_0 = (PythonTree)adaptor.nil();

                    c2=(Token)match(input,COLON,FOLLOW_COLON_in_subscript11124); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    c2_tree = (PythonTree)adaptor.create(c2);
                    adaptor.addChild(root_0, c2_tree);
                    }
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2526:16: (upper2= test[expr_contextType.Load] )?
                    int alt260=2;
                    int LA260_0 = input.LA(1);

                    if ( (LA260_0==NAME||(LA260_0>=LAMBDA && LA260_0<=NOT)||LA260_0==LPAREN||(LA260_0>=PLUS && LA260_0<=MINUS)||(LA260_0>=TILDE && LA260_0<=LBRACK)||LA260_0==LCURLY||(LA260_0>=BACKQUOTE && LA260_0<=PRO)||LA260_0==PRO_SELECT||LA260_0==ASP||LA260_0==ASP_SELECT||LA260_0==ASP_PATH||(LA260_0>=SELECT && LA260_0<=RDFSELECT)||LA260_0==CAPSFROM||(LA260_0>=MODIFY && LA260_0<=SUBCLASS)) ) {
                        alt260=1;
                    }
                    switch (alt260) {
                        case 1 :
                            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2526:17: upper2= test[expr_contextType.Load]
                            {
                            pushFollow(FOLLOW_test_in_subscript11129);
                            upper2=test(expr_contextType.Load);

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, upper2.getTree());

                            }
                            break;

                    }

                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2526:54: ( sliceop )?
                    int alt261=2;
                    int LA261_0 = input.LA(1);

                    if ( (LA261_0==COLON) ) {
                        alt261=1;
                    }
                    switch (alt261) {
                        case 1 :
                            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2526:55: sliceop
                            {
                            pushFollow(FOLLOW_sliceop_in_subscript11135);
                            sliceop680=sliceop();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, sliceop680.getTree());

                            }
                            break;

                    }

                    if ( state.backtracking==0 ) {

                                retval.sltype = actions.makeSubscript(null, c2, (upper2!=null?((PythonTree)upper2.tree):null), (sliceop680!=null?((PythonTree)sliceop680.tree):null));
                            
                    }

                    }
                    break;
                case 4 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2530:7: test[expr_contextType.Load]
                    {
                    root_0 = (PythonTree)adaptor.nil();

                    pushFollow(FOLLOW_test_in_subscript11153);
                    test681=test(expr_contextType.Load);

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, test681.getTree());
                    if ( state.backtracking==0 ) {

                                retval.sltype = new Index((test681!=null?((Token)test681.start):null), actions.castExpr((test681!=null?((PythonTree)test681.tree):null)));
                            
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (PythonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {

                  retval.tree = retval.sltype;

            }
        }

        catch (RecognitionException re) {
            errorHandler.reportError(this, re);
            errorHandler.recover(this, input,re);
            retval.tree = (PythonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "subscript"

    public static class sliceop_return extends ParserRuleReturnScope {
        PythonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "sliceop"
    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2537:1: sliceop : COLON ( test[expr_contextType.Load] -> test | ) ;
    public final PythonParser.sliceop_return sliceop() throws RecognitionException {
        PythonParser.sliceop_return retval = new PythonParser.sliceop_return();
        retval.start = input.LT(1);

        PythonTree root_0 = null;

        Token COLON682=null;
        PythonParser.test_return test683 = null;


        PythonTree COLON682_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleSubtreeStream stream_test=new RewriteRuleSubtreeStream(adaptor,"rule test");

            expr etype = null;

        try {
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2546:5: ( COLON ( test[expr_contextType.Load] -> test | ) )
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2546:7: COLON ( test[expr_contextType.Load] -> test | )
            {
            COLON682=(Token)match(input,COLON,FOLLOW_COLON_in_sliceop11190); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COLON.add(COLON682);

            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2547:6: ( test[expr_contextType.Load] -> test | )
            int alt263=2;
            int LA263_0 = input.LA(1);

            if ( (LA263_0==NAME||(LA263_0>=LAMBDA && LA263_0<=NOT)||LA263_0==LPAREN||(LA263_0>=PLUS && LA263_0<=MINUS)||(LA263_0>=TILDE && LA263_0<=LBRACK)||LA263_0==LCURLY||(LA263_0>=BACKQUOTE && LA263_0<=PRO)||LA263_0==PRO_SELECT||LA263_0==ASP||LA263_0==ASP_SELECT||LA263_0==ASP_PATH||(LA263_0>=SELECT && LA263_0<=RDFSELECT)||LA263_0==CAPSFROM||(LA263_0>=MODIFY && LA263_0<=SUBCLASS)) ) {
                alt263=1;
            }
            else if ( (LA263_0==COMMA||LA263_0==RBRACK) ) {
                alt263=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 263, 0, input);

                throw nvae;
            }
            switch (alt263) {
                case 1 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2547:7: test[expr_contextType.Load]
                    {
                    pushFollow(FOLLOW_test_in_sliceop11198);
                    test683=test(expr_contextType.Load);

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_test.add(test683.getTree());


                    // AST REWRITE
                    // elements: test
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (PythonTree)adaptor.nil();
                    // 2548:5: -> test
                    {
                        adaptor.addChild(root_0, stream_test.nextTree());

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2550:8: 
                    {
                    if ( state.backtracking==0 ) {

                                 etype = new Name(COLON682, "None", expr_contextType.Load);
                             
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (PythonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {

                  if (etype != null) {
                      retval.tree = etype;
                  }

            }
        }

        catch (RecognitionException re) {
            errorHandler.reportError(this, re);
            errorHandler.recover(this, input,re);
            retval.tree = (PythonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "sliceop"

    public static class exprlist_return extends ParserRuleReturnScope {
        public expr etype;
        PythonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "exprlist"
    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2557:1: exprlist[expr_contextType ctype] returns [expr etype] : ( ( expr[null] COMMA )=>e+= expr[ctype] ( options {k=2; } : COMMA e+= expr[ctype] )* ( COMMA )? | expr[ctype] );
    public final PythonParser.exprlist_return exprlist(expr_contextType ctype) throws RecognitionException {
        PythonParser.exprlist_return retval = new PythonParser.exprlist_return();
        retval.start = input.LT(1);

        PythonTree root_0 = null;

        Token COMMA684=null;
        Token COMMA685=null;
        List list_e=null;
        PythonParser.expr_return expr686 = null;

        PythonParser.expr_return e = null;
         e = null;
        PythonTree COMMA684_tree=null;
        PythonTree COMMA685_tree=null;

        try {
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2559:5: ( ( expr[null] COMMA )=>e+= expr[ctype] ( options {k=2; } : COMMA e+= expr[ctype] )* ( COMMA )? | expr[ctype] )
            int alt266=2;
            alt266 = dfa266.predict(input);
            switch (alt266) {
                case 1 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2559:7: ( expr[null] COMMA )=>e+= expr[ctype] ( options {k=2; } : COMMA e+= expr[ctype] )* ( COMMA )?
                    {
                    root_0 = (PythonTree)adaptor.nil();

                    pushFollow(FOLLOW_expr_in_exprlist11269);
                    e=expr(ctype);

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, e.getTree());
                    if (list_e==null) list_e=new ArrayList();
                    list_e.add(e.getTree());

                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2559:44: ( options {k=2; } : COMMA e+= expr[ctype] )*
                    loop264:
                    do {
                        int alt264=2;
                        alt264 = dfa264.predict(input);
                        switch (alt264) {
                    	case 1 :
                    	    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2559:61: COMMA e+= expr[ctype]
                    	    {
                    	    COMMA684=(Token)match(input,COMMA,FOLLOW_COMMA_in_exprlist11281); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    COMMA684_tree = (PythonTree)adaptor.create(COMMA684);
                    	    adaptor.addChild(root_0, COMMA684_tree);
                    	    }
                    	    pushFollow(FOLLOW_expr_in_exprlist11285);
                    	    e=expr(ctype);

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, e.getTree());
                    	    if (list_e==null) list_e=new ArrayList();
                    	    list_e.add(e.getTree());


                    	    }
                    	    break;

                    	default :
                    	    break loop264;
                        }
                    } while (true);

                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2559:84: ( COMMA )?
                    int alt265=2;
                    int LA265_0 = input.LA(1);

                    if ( (LA265_0==COMMA) ) {
                        alt265=1;
                    }
                    switch (alt265) {
                        case 1 :
                            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2559:85: COMMA
                            {
                            COMMA685=(Token)match(input,COMMA,FOLLOW_COMMA_in_exprlist11291); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            COMMA685_tree = (PythonTree)adaptor.create(COMMA685);
                            adaptor.addChild(root_0, COMMA685_tree);
                            }

                            }
                            break;

                    }

                    if ( state.backtracking==0 ) {

                                 retval.etype = new Tuple(((Token)retval.start), actions.castExprs(list_e), ctype);
                             
                    }

                    }
                    break;
                case 2 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2563:7: expr[ctype]
                    {
                    root_0 = (PythonTree)adaptor.nil();

                    pushFollow(FOLLOW_expr_in_exprlist11310);
                    expr686=expr(ctype);

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expr686.getTree());
                    if ( state.backtracking==0 ) {

                              retval.etype = actions.castExpr((expr686!=null?((PythonTree)expr686.tree):null));
                            
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (PythonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException re) {
            errorHandler.reportError(this, re);
            errorHandler.recover(this, input,re);
            retval.tree = (PythonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "exprlist"

    public static class del_list_return extends ParserRuleReturnScope {
        public List<expr> etypes;
        PythonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "del_list"
    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2571:1: del_list returns [List<expr> etypes] : e+= expr[expr_contextType.Del] ( options {k=2; } : COMMA e+= expr[expr_contextType.Del] )* ( COMMA )? ;
    public final PythonParser.del_list_return del_list() throws RecognitionException {
        PythonParser.del_list_return retval = new PythonParser.del_list_return();
        retval.start = input.LT(1);

        PythonTree root_0 = null;

        Token COMMA687=null;
        Token COMMA688=null;
        List list_e=null;
        PythonParser.expr_return e = null;
         e = null;
        PythonTree COMMA687_tree=null;
        PythonTree COMMA688_tree=null;

        try {
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2573:5: (e+= expr[expr_contextType.Del] ( options {k=2; } : COMMA e+= expr[expr_contextType.Del] )* ( COMMA )? )
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2573:7: e+= expr[expr_contextType.Del] ( options {k=2; } : COMMA e+= expr[expr_contextType.Del] )* ( COMMA )?
            {
            root_0 = (PythonTree)adaptor.nil();

            pushFollow(FOLLOW_expr_in_del_list11348);
            e=expr(expr_contextType.Del);

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, e.getTree());
            if (list_e==null) list_e=new ArrayList();
            list_e.add(e.getTree());

            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2573:37: ( options {k=2; } : COMMA e+= expr[expr_contextType.Del] )*
            loop267:
            do {
                int alt267=2;
                alt267 = dfa267.predict(input);
                switch (alt267) {
            	case 1 :
            	    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2573:54: COMMA e+= expr[expr_contextType.Del]
            	    {
            	    COMMA687=(Token)match(input,COMMA,FOLLOW_COMMA_in_del_list11360); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    COMMA687_tree = (PythonTree)adaptor.create(COMMA687);
            	    adaptor.addChild(root_0, COMMA687_tree);
            	    }
            	    pushFollow(FOLLOW_expr_in_del_list11364);
            	    e=expr(expr_contextType.Del);

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, e.getTree());
            	    if (list_e==null) list_e=new ArrayList();
            	    list_e.add(e.getTree());


            	    }
            	    break;

            	default :
            	    break loop267;
                }
            } while (true);

            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2573:92: ( COMMA )?
            int alt268=2;
            int LA268_0 = input.LA(1);

            if ( (LA268_0==COMMA) ) {
                alt268=1;
            }
            switch (alt268) {
                case 1 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2573:93: COMMA
                    {
                    COMMA688=(Token)match(input,COMMA,FOLLOW_COMMA_in_del_list11370); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COMMA688_tree = (PythonTree)adaptor.create(COMMA688);
                    adaptor.addChild(root_0, COMMA688_tree);
                    }

                    }
                    break;

            }

            if ( state.backtracking==0 ) {

                        retval.etypes = actions.makeDeleteList(list_e);
                    
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (PythonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException re) {
            errorHandler.reportError(this, re);
            errorHandler.recover(this, input,re);
            retval.tree = (PythonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "del_list"

    public static class testlist_return extends ParserRuleReturnScope {
        PythonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "testlist"
    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2580:1: testlist[expr_contextType ctype] : ( ( test[null] COMMA )=>t+= test[ctype] ( options {k=2; } : COMMA t+= test[ctype] )* ( COMMA )? | test[ctype] );
    public final PythonParser.testlist_return testlist(expr_contextType ctype) throws RecognitionException {
        PythonParser.testlist_return retval = new PythonParser.testlist_return();
        retval.start = input.LT(1);

        PythonTree root_0 = null;

        Token COMMA689=null;
        Token COMMA690=null;
        List list_t=null;
        PythonParser.test_return test691 = null;

        PythonParser.test_return t = null;
         t = null;
        PythonTree COMMA689_tree=null;
        PythonTree COMMA690_tree=null;


            expr etype = null;

        try {
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2589:5: ( ( test[null] COMMA )=>t+= test[ctype] ( options {k=2; } : COMMA t+= test[ctype] )* ( COMMA )? | test[ctype] )
            int alt271=2;
            alt271 = dfa271.predict(input);
            switch (alt271) {
                case 1 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2589:7: ( test[null] COMMA )=>t+= test[ctype] ( options {k=2; } : COMMA t+= test[ctype] )* ( COMMA )?
                    {
                    root_0 = (PythonTree)adaptor.nil();

                    pushFollow(FOLLOW_test_in_testlist11423);
                    t=test(ctype);

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, t.getTree());
                    if (list_t==null) list_t=new ArrayList();
                    list_t.add(t.getTree());

                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2590:22: ( options {k=2; } : COMMA t+= test[ctype] )*
                    loop269:
                    do {
                        int alt269=2;
                        alt269 = dfa269.predict(input);
                        switch (alt269) {
                    	case 1 :
                    	    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2590:39: COMMA t+= test[ctype]
                    	    {
                    	    COMMA689=(Token)match(input,COMMA,FOLLOW_COMMA_in_testlist11435); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    COMMA689_tree = (PythonTree)adaptor.create(COMMA689);
                    	    adaptor.addChild(root_0, COMMA689_tree);
                    	    }
                    	    pushFollow(FOLLOW_test_in_testlist11439);
                    	    t=test(ctype);

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, t.getTree());
                    	    if (list_t==null) list_t=new ArrayList();
                    	    list_t.add(t.getTree());


                    	    }
                    	    break;

                    	default :
                    	    break loop269;
                        }
                    } while (true);

                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2590:62: ( COMMA )?
                    int alt270=2;
                    int LA270_0 = input.LA(1);

                    if ( (LA270_0==COMMA) ) {
                        alt270=1;
                    }
                    switch (alt270) {
                        case 1 :
                            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2590:63: COMMA
                            {
                            COMMA690=(Token)match(input,COMMA,FOLLOW_COMMA_in_testlist11445); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            COMMA690_tree = (PythonTree)adaptor.create(COMMA690);
                            adaptor.addChild(root_0, COMMA690_tree);
                            }

                            }
                            break;

                    }

                    if ( state.backtracking==0 ) {

                                etype = new Tuple(((Token)retval.start), actions.castExprs(list_t), ctype);
                            
                    }

                    }
                    break;
                case 2 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2594:7: test[ctype]
                    {
                    root_0 = (PythonTree)adaptor.nil();

                    pushFollow(FOLLOW_test_in_testlist11463);
                    test691=test(ctype);

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, test691.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (PythonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {

                  if (etype != null) {
                      retval.tree = etype;
                  }

            }
        }

        catch (RecognitionException re) {
            errorHandler.reportError(this, re);
            errorHandler.recover(this, input,re);
            retval.tree = (PythonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "testlist"

    public static class dictmaker_return extends ParserRuleReturnScope {
        public List keys;
        public List values;
        PythonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dictmaker"
    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2598:1: dictmaker returns [List keys, List values] : k+= test[expr_contextType.Load] COLON v+= test[expr_contextType.Load] ( options {k=2; } : COMMA k+= test[expr_contextType.Load] COLON v+= test[expr_contextType.Load] )* ( COMMA )? ;
    public final PythonParser.dictmaker_return dictmaker() throws RecognitionException {
        PythonParser.dictmaker_return retval = new PythonParser.dictmaker_return();
        retval.start = input.LT(1);

        PythonTree root_0 = null;

        Token COLON692=null;
        Token COMMA693=null;
        Token COLON694=null;
        Token COMMA695=null;
        List list_k=null;
        List list_v=null;
        PythonParser.test_return k = null;
         k = null;
        PythonParser.test_return v = null;
         v = null;
        PythonTree COLON692_tree=null;
        PythonTree COMMA693_tree=null;
        PythonTree COLON694_tree=null;
        PythonTree COMMA695_tree=null;

        try {
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2600:5: (k+= test[expr_contextType.Load] COLON v+= test[expr_contextType.Load] ( options {k=2; } : COMMA k+= test[expr_contextType.Load] COLON v+= test[expr_contextType.Load] )* ( COMMA )? )
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2600:7: k+= test[expr_contextType.Load] COLON v+= test[expr_contextType.Load] ( options {k=2; } : COMMA k+= test[expr_contextType.Load] COLON v+= test[expr_contextType.Load] )* ( COMMA )?
            {
            root_0 = (PythonTree)adaptor.nil();

            pushFollow(FOLLOW_test_in_dictmaker11492);
            k=test(expr_contextType.Load);

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, k.getTree());
            if (list_k==null) list_k=new ArrayList();
            list_k.add(k.getTree());

            COLON692=(Token)match(input,COLON,FOLLOW_COLON_in_dictmaker11495); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            COLON692_tree = (PythonTree)adaptor.create(COLON692);
            adaptor.addChild(root_0, COLON692_tree);
            }
            pushFollow(FOLLOW_test_in_dictmaker11499);
            v=test(expr_contextType.Load);

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, v.getTree());
            if (list_v==null) list_v=new ArrayList();
            list_v.add(v.getTree());

            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2601:9: ( options {k=2; } : COMMA k+= test[expr_contextType.Load] COLON v+= test[expr_contextType.Load] )*
            loop272:
            do {
                int alt272=2;
                alt272 = dfa272.predict(input);
                switch (alt272) {
            	case 1 :
            	    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2601:25: COMMA k+= test[expr_contextType.Load] COLON v+= test[expr_contextType.Load]
            	    {
            	    COMMA693=(Token)match(input,COMMA,FOLLOW_COMMA_in_dictmaker11518); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    COMMA693_tree = (PythonTree)adaptor.create(COMMA693);
            	    adaptor.addChild(root_0, COMMA693_tree);
            	    }
            	    pushFollow(FOLLOW_test_in_dictmaker11522);
            	    k=test(expr_contextType.Load);

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, k.getTree());
            	    if (list_k==null) list_k=new ArrayList();
            	    list_k.add(k.getTree());

            	    COLON694=(Token)match(input,COLON,FOLLOW_COLON_in_dictmaker11525); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    COLON694_tree = (PythonTree)adaptor.create(COLON694);
            	    adaptor.addChild(root_0, COLON694_tree);
            	    }
            	    pushFollow(FOLLOW_test_in_dictmaker11529);
            	    v=test(expr_contextType.Load);

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, v.getTree());
            	    if (list_v==null) list_v=new ArrayList();
            	    list_v.add(v.getTree());


            	    }
            	    break;

            	default :
            	    break loop272;
                }
            } while (true);

            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2602:9: ( COMMA )?
            int alt273=2;
            int LA273_0 = input.LA(1);

            if ( (LA273_0==COMMA) ) {
                alt273=1;
            }
            switch (alt273) {
                case 1 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2602:10: COMMA
                    {
                    COMMA695=(Token)match(input,COMMA,FOLLOW_COMMA_in_dictmaker11543); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COMMA695_tree = (PythonTree)adaptor.create(COMMA695);
                    adaptor.addChild(root_0, COMMA695_tree);
                    }

                    }
                    break;

            }

            if ( state.backtracking==0 ) {

                        retval.keys = list_k;
                        retval.values = list_v;
                    
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (PythonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException re) {
            errorHandler.reportError(this, re);
            errorHandler.recover(this, input,re);
            retval.tree = (PythonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "dictmaker"

    public static class classdef_return extends ParserRuleReturnScope {
        PythonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "classdef"
    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2610:1: classdef : ( decorators )? CLASS NAME ( LPAREN ( testlist[expr_contextType.Load] )? RPAREN )? COLON suite[false] ;
    public final PythonParser.classdef_return classdef() throws RecognitionException {
        PythonParser.classdef_return retval = new PythonParser.classdef_return();
        retval.start = input.LT(1);

        PythonTree root_0 = null;

        Token CLASS697=null;
        Token NAME698=null;
        Token LPAREN699=null;
        Token RPAREN701=null;
        Token COLON702=null;
        PythonParser.decorators_return decorators696 = null;

        PythonParser.testlist_return testlist700 = null;

        PythonParser.suite_return suite703 = null;


        PythonTree CLASS697_tree=null;
        PythonTree NAME698_tree=null;
        PythonTree LPAREN699_tree=null;
        PythonTree RPAREN701_tree=null;
        PythonTree COLON702_tree=null;


            stmt stype = null;

        try {
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2617:5: ( ( decorators )? CLASS NAME ( LPAREN ( testlist[expr_contextType.Load] )? RPAREN )? COLON suite[false] )
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2617:7: ( decorators )? CLASS NAME ( LPAREN ( testlist[expr_contextType.Load] )? RPAREN )? COLON suite[false]
            {
            root_0 = (PythonTree)adaptor.nil();

            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2617:7: ( decorators )?
            int alt274=2;
            int LA274_0 = input.LA(1);

            if ( (LA274_0==AT) ) {
                alt274=1;
            }
            switch (alt274) {
                case 1 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2617:7: decorators
                    {
                    pushFollow(FOLLOW_decorators_in_classdef11581);
                    decorators696=decorators();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, decorators696.getTree());

                    }
                    break;

            }

            CLASS697=(Token)match(input,CLASS,FOLLOW_CLASS_in_classdef11584); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            CLASS697_tree = (PythonTree)adaptor.create(CLASS697);
            adaptor.addChild(root_0, CLASS697_tree);
            }
            NAME698=(Token)match(input,NAME,FOLLOW_NAME_in_classdef11586); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            NAME698_tree = (PythonTree)adaptor.create(NAME698);
            adaptor.addChild(root_0, NAME698_tree);
            }
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2617:30: ( LPAREN ( testlist[expr_contextType.Load] )? RPAREN )?
            int alt276=2;
            int LA276_0 = input.LA(1);

            if ( (LA276_0==LPAREN) ) {
                alt276=1;
            }
            switch (alt276) {
                case 1 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2617:31: LPAREN ( testlist[expr_contextType.Load] )? RPAREN
                    {
                    LPAREN699=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_classdef11589); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LPAREN699_tree = (PythonTree)adaptor.create(LPAREN699);
                    adaptor.addChild(root_0, LPAREN699_tree);
                    }
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2617:38: ( testlist[expr_contextType.Load] )?
                    int alt275=2;
                    int LA275_0 = input.LA(1);

                    if ( (LA275_0==NAME||(LA275_0>=LAMBDA && LA275_0<=NOT)||LA275_0==LPAREN||(LA275_0>=PLUS && LA275_0<=MINUS)||(LA275_0>=TILDE && LA275_0<=LBRACK)||LA275_0==LCURLY||(LA275_0>=BACKQUOTE && LA275_0<=PRO)||LA275_0==PRO_SELECT||LA275_0==ASP||LA275_0==ASP_SELECT||LA275_0==ASP_PATH||(LA275_0>=SELECT && LA275_0<=RDFSELECT)||LA275_0==CAPSFROM||(LA275_0>=MODIFY && LA275_0<=SUBCLASS)) ) {
                        alt275=1;
                    }
                    switch (alt275) {
                        case 1 :
                            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2617:38: testlist[expr_contextType.Load]
                            {
                            pushFollow(FOLLOW_testlist_in_classdef11591);
                            testlist700=testlist(expr_contextType.Load);

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, testlist700.getTree());

                            }
                            break;

                    }

                    RPAREN701=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_classdef11595); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RPAREN701_tree = (PythonTree)adaptor.create(RPAREN701);
                    adaptor.addChild(root_0, RPAREN701_tree);
                    }

                    }
                    break;

            }

            COLON702=(Token)match(input,COLON,FOLLOW_COLON_in_classdef11599); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            COLON702_tree = (PythonTree)adaptor.create(COLON702);
            adaptor.addChild(root_0, COLON702_tree);
            }
            pushFollow(FOLLOW_suite_in_classdef11601);
            suite703=suite(false);

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, suite703.getTree());
            if ( state.backtracking==0 ) {

                        Token t = CLASS697;
                        if ((decorators696!=null?((Token)decorators696.start):null) != null) {
                            t = (decorators696!=null?((Token)decorators696.start):null);
                        }
                        stype = new ClassDef(t, actions.cantBeNoneName(NAME698),
                            actions.makeBases(actions.castExpr((testlist700!=null?((PythonTree)testlist700.tree):null))),
                            actions.castStmts((suite703!=null?suite703.stypes:null)),
                            actions.castExprs((decorators696!=null?decorators696.etypes:null)));
                    
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (PythonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {

                 retval.tree = stype;

            }
        }

        catch (RecognitionException re) {
            errorHandler.reportError(this, re);
            errorHandler.recover(this, input,re);
            retval.tree = (PythonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "classdef"

    public static class arglist_return extends ParserRuleReturnScope {
        public List args;
        public List keywords;
        public expr starargs;
        public expr kwargs;
        PythonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "arglist"
    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2633:1: arglist returns [List args, List keywords, expr starargs, expr kwargs] : ( argument[arguments, kws, gens, true, false] ( COMMA argument[arguments, kws, gens, false, false] )* ( COMMA ( STAR s= test[expr_contextType.Load] ( COMMA argument[arguments, kws, gens, false, true] )* ( COMMA DOUBLESTAR k= test[expr_contextType.Load] )? | DOUBLESTAR k= test[expr_contextType.Load] )? )? | STAR s= test[expr_contextType.Load] ( COMMA argument[arguments, kws, gens, false, true] )* ( COMMA DOUBLESTAR k= test[expr_contextType.Load] )? | DOUBLESTAR k= test[expr_contextType.Load] );
    public final PythonParser.arglist_return arglist() throws RecognitionException {
        PythonParser.arglist_return retval = new PythonParser.arglist_return();
        retval.start = input.LT(1);

        PythonTree root_0 = null;

        Token COMMA705=null;
        Token COMMA707=null;
        Token STAR708=null;
        Token COMMA709=null;
        Token COMMA711=null;
        Token DOUBLESTAR712=null;
        Token DOUBLESTAR713=null;
        Token STAR714=null;
        Token COMMA715=null;
        Token COMMA717=null;
        Token DOUBLESTAR718=null;
        Token DOUBLESTAR719=null;
        PythonParser.test_return s = null;

        PythonParser.test_return k = null;

        PythonParser.argument_return argument704 = null;

        PythonParser.argument_return argument706 = null;

        PythonParser.argument_return argument710 = null;

        PythonParser.argument_return argument716 = null;


        PythonTree COMMA705_tree=null;
        PythonTree COMMA707_tree=null;
        PythonTree STAR708_tree=null;
        PythonTree COMMA709_tree=null;
        PythonTree COMMA711_tree=null;
        PythonTree DOUBLESTAR712_tree=null;
        PythonTree DOUBLESTAR713_tree=null;
        PythonTree STAR714_tree=null;
        PythonTree COMMA715_tree=null;
        PythonTree COMMA717_tree=null;
        PythonTree DOUBLESTAR718_tree=null;
        PythonTree DOUBLESTAR719_tree=null;


            List arguments = new ArrayList();
            List kws = new ArrayList();
            List gens = new ArrayList();

        try {
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2640:5: ( argument[arguments, kws, gens, true, false] ( COMMA argument[arguments, kws, gens, false, false] )* ( COMMA ( STAR s= test[expr_contextType.Load] ( COMMA argument[arguments, kws, gens, false, true] )* ( COMMA DOUBLESTAR k= test[expr_contextType.Load] )? | DOUBLESTAR k= test[expr_contextType.Load] )? )? | STAR s= test[expr_contextType.Load] ( COMMA argument[arguments, kws, gens, false, true] )* ( COMMA DOUBLESTAR k= test[expr_contextType.Load] )? | DOUBLESTAR k= test[expr_contextType.Load] )
            int alt284=3;
            switch ( input.LA(1) ) {
            case NAME:
            case LAMBDA:
            case NOT:
            case LPAREN:
            case PLUS:
            case MINUS:
            case TILDE:
            case LBRACK:
            case LCURLY:
            case BACKQUOTE:
            case INT:
            case LONGINT:
            case FLOAT:
            case COMPLEX:
            case STRING:
            case PRO:
            case PRO_SELECT:
            case ASP:
            case ASP_SELECT:
            case ASP_PATH:
            case SELECT:
            case INSERT:
            case CREATE:
            case DROP:
            case UPDATE:
            case SQL_DELETE:
            case ALTER:
            case MAKECONNECT:
            case ASPSELECT:
            case RDFSELECT:
            case CAPSFROM:
            case MODIFY:
            case CAPSCLASS:
            case SUBCLASS:
                {
                alt284=1;
                }
                break;
            case STAR:
                {
                alt284=2;
                }
                break;
            case DOUBLESTAR:
                {
                alt284=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 284, 0, input);

                throw nvae;
            }

            switch (alt284) {
                case 1 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2640:7: argument[arguments, kws, gens, true, false] ( COMMA argument[arguments, kws, gens, false, false] )* ( COMMA ( STAR s= test[expr_contextType.Load] ( COMMA argument[arguments, kws, gens, false, true] )* ( COMMA DOUBLESTAR k= test[expr_contextType.Load] )? | DOUBLESTAR k= test[expr_contextType.Load] )? )?
                    {
                    root_0 = (PythonTree)adaptor.nil();

                    pushFollow(FOLLOW_argument_in_arglist11643);
                    argument704=argument(arguments, kws, gens, true, false);

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, argument704.getTree());
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2640:51: ( COMMA argument[arguments, kws, gens, false, false] )*
                    loop277:
                    do {
                        int alt277=2;
                        int LA277_0 = input.LA(1);

                        if ( (LA277_0==COMMA) ) {
                            int LA277_1 = input.LA(2);

                            if ( (LA277_1==NAME||(LA277_1>=LAMBDA && LA277_1<=NOT)||LA277_1==LPAREN||(LA277_1>=PLUS && LA277_1<=MINUS)||(LA277_1>=TILDE && LA277_1<=LBRACK)||LA277_1==LCURLY||(LA277_1>=BACKQUOTE && LA277_1<=PRO)||LA277_1==PRO_SELECT||LA277_1==ASP||LA277_1==ASP_SELECT||LA277_1==ASP_PATH||(LA277_1>=SELECT && LA277_1<=RDFSELECT)||LA277_1==CAPSFROM||(LA277_1>=MODIFY && LA277_1<=SUBCLASS)) ) {
                                alt277=1;
                            }


                        }


                        switch (alt277) {
                    	case 1 :
                    	    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2640:52: COMMA argument[arguments, kws, gens, false, false]
                    	    {
                    	    COMMA705=(Token)match(input,COMMA,FOLLOW_COMMA_in_arglist11647); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    COMMA705_tree = (PythonTree)adaptor.create(COMMA705);
                    	    adaptor.addChild(root_0, COMMA705_tree);
                    	    }
                    	    pushFollow(FOLLOW_argument_in_arglist11649);
                    	    argument706=argument(arguments, kws, gens, false, false);

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, argument706.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop277;
                        }
                    } while (true);

                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2641:11: ( COMMA ( STAR s= test[expr_contextType.Load] ( COMMA argument[arguments, kws, gens, false, true] )* ( COMMA DOUBLESTAR k= test[expr_contextType.Load] )? | DOUBLESTAR k= test[expr_contextType.Load] )? )?
                    int alt281=2;
                    int LA281_0 = input.LA(1);

                    if ( (LA281_0==COMMA) ) {
                        alt281=1;
                    }
                    switch (alt281) {
                        case 1 :
                            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2641:12: COMMA ( STAR s= test[expr_contextType.Load] ( COMMA argument[arguments, kws, gens, false, true] )* ( COMMA DOUBLESTAR k= test[expr_contextType.Load] )? | DOUBLESTAR k= test[expr_contextType.Load] )?
                            {
                            COMMA707=(Token)match(input,COMMA,FOLLOW_COMMA_in_arglist11665); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            COMMA707_tree = (PythonTree)adaptor.create(COMMA707);
                            adaptor.addChild(root_0, COMMA707_tree);
                            }
                            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2642:15: ( STAR s= test[expr_contextType.Load] ( COMMA argument[arguments, kws, gens, false, true] )* ( COMMA DOUBLESTAR k= test[expr_contextType.Load] )? | DOUBLESTAR k= test[expr_contextType.Load] )?
                            int alt280=3;
                            int LA280_0 = input.LA(1);

                            if ( (LA280_0==STAR) ) {
                                alt280=1;
                            }
                            else if ( (LA280_0==DOUBLESTAR) ) {
                                alt280=2;
                            }
                            switch (alt280) {
                                case 1 :
                                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2642:17: STAR s= test[expr_contextType.Load] ( COMMA argument[arguments, kws, gens, false, true] )* ( COMMA DOUBLESTAR k= test[expr_contextType.Load] )?
                                    {
                                    STAR708=(Token)match(input,STAR,FOLLOW_STAR_in_arglist11683); if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                    STAR708_tree = (PythonTree)adaptor.create(STAR708);
                                    adaptor.addChild(root_0, STAR708_tree);
                                    }
                                    pushFollow(FOLLOW_test_in_arglist11687);
                                    s=test(expr_contextType.Load);

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) adaptor.addChild(root_0, s.getTree());
                                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2642:52: ( COMMA argument[arguments, kws, gens, false, true] )*
                                    loop278:
                                    do {
                                        int alt278=2;
                                        int LA278_0 = input.LA(1);

                                        if ( (LA278_0==COMMA) ) {
                                            int LA278_1 = input.LA(2);

                                            if ( (LA278_1==NAME||(LA278_1>=LAMBDA && LA278_1<=NOT)||LA278_1==LPAREN||(LA278_1>=PLUS && LA278_1<=MINUS)||(LA278_1>=TILDE && LA278_1<=LBRACK)||LA278_1==LCURLY||(LA278_1>=BACKQUOTE && LA278_1<=PRO)||LA278_1==PRO_SELECT||LA278_1==ASP||LA278_1==ASP_SELECT||LA278_1==ASP_PATH||(LA278_1>=SELECT && LA278_1<=RDFSELECT)||LA278_1==CAPSFROM||(LA278_1>=MODIFY && LA278_1<=SUBCLASS)) ) {
                                                alt278=1;
                                            }


                                        }


                                        switch (alt278) {
                                    	case 1 :
                                    	    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2642:53: COMMA argument[arguments, kws, gens, false, true]
                                    	    {
                                    	    COMMA709=(Token)match(input,COMMA,FOLLOW_COMMA_in_arglist11691); if (state.failed) return retval;
                                    	    if ( state.backtracking==0 ) {
                                    	    COMMA709_tree = (PythonTree)adaptor.create(COMMA709);
                                    	    adaptor.addChild(root_0, COMMA709_tree);
                                    	    }
                                    	    pushFollow(FOLLOW_argument_in_arglist11693);
                                    	    argument710=argument(arguments, kws, gens, false, true);

                                    	    state._fsp--;
                                    	    if (state.failed) return retval;
                                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, argument710.getTree());

                                    	    }
                                    	    break;

                                    	default :
                                    	    break loop278;
                                        }
                                    } while (true);

                                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2642:105: ( COMMA DOUBLESTAR k= test[expr_contextType.Load] )?
                                    int alt279=2;
                                    int LA279_0 = input.LA(1);

                                    if ( (LA279_0==COMMA) ) {
                                        alt279=1;
                                    }
                                    switch (alt279) {
                                        case 1 :
                                            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2642:106: COMMA DOUBLESTAR k= test[expr_contextType.Load]
                                            {
                                            COMMA711=(Token)match(input,COMMA,FOLLOW_COMMA_in_arglist11699); if (state.failed) return retval;
                                            if ( state.backtracking==0 ) {
                                            COMMA711_tree = (PythonTree)adaptor.create(COMMA711);
                                            adaptor.addChild(root_0, COMMA711_tree);
                                            }
                                            DOUBLESTAR712=(Token)match(input,DOUBLESTAR,FOLLOW_DOUBLESTAR_in_arglist11701); if (state.failed) return retval;
                                            if ( state.backtracking==0 ) {
                                            DOUBLESTAR712_tree = (PythonTree)adaptor.create(DOUBLESTAR712);
                                            adaptor.addChild(root_0, DOUBLESTAR712_tree);
                                            }
                                            pushFollow(FOLLOW_test_in_arglist11705);
                                            k=test(expr_contextType.Load);

                                            state._fsp--;
                                            if (state.failed) return retval;
                                            if ( state.backtracking==0 ) adaptor.addChild(root_0, k.getTree());

                                            }
                                            break;

                                    }


                                    }
                                    break;
                                case 2 :
                                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2643:17: DOUBLESTAR k= test[expr_contextType.Load]
                                    {
                                    DOUBLESTAR713=(Token)match(input,DOUBLESTAR,FOLLOW_DOUBLESTAR_in_arglist11726); if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                    DOUBLESTAR713_tree = (PythonTree)adaptor.create(DOUBLESTAR713);
                                    adaptor.addChild(root_0, DOUBLESTAR713_tree);
                                    }
                                    pushFollow(FOLLOW_test_in_arglist11730);
                                    k=test(expr_contextType.Load);

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) adaptor.addChild(root_0, k.getTree());

                                    }
                                    break;

                            }


                            }
                            break;

                    }

                    if ( state.backtracking==0 ) {

                                if (arguments.size() > 1 && gens.size() > 0) {
                                    actions.errorGenExpNotSoleArg(new PythonTree(((Token)retval.start)));
                                }
                                retval.args =arguments;
                                retval.keywords =kws;
                                retval.starargs =actions.castExpr((s!=null?((PythonTree)s.tree):null));
                                retval.kwargs =actions.castExpr((k!=null?((PythonTree)k.tree):null));
                            
                    }

                    }
                    break;
                case 2 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2655:7: STAR s= test[expr_contextType.Load] ( COMMA argument[arguments, kws, gens, false, true] )* ( COMMA DOUBLESTAR k= test[expr_contextType.Load] )?
                    {
                    root_0 = (PythonTree)adaptor.nil();

                    STAR714=(Token)match(input,STAR,FOLLOW_STAR_in_arglist11777); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STAR714_tree = (PythonTree)adaptor.create(STAR714);
                    adaptor.addChild(root_0, STAR714_tree);
                    }
                    pushFollow(FOLLOW_test_in_arglist11781);
                    s=test(expr_contextType.Load);

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, s.getTree());
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2655:42: ( COMMA argument[arguments, kws, gens, false, true] )*
                    loop282:
                    do {
                        int alt282=2;
                        int LA282_0 = input.LA(1);

                        if ( (LA282_0==COMMA) ) {
                            int LA282_1 = input.LA(2);

                            if ( (LA282_1==NAME||(LA282_1>=LAMBDA && LA282_1<=NOT)||LA282_1==LPAREN||(LA282_1>=PLUS && LA282_1<=MINUS)||(LA282_1>=TILDE && LA282_1<=LBRACK)||LA282_1==LCURLY||(LA282_1>=BACKQUOTE && LA282_1<=PRO)||LA282_1==PRO_SELECT||LA282_1==ASP||LA282_1==ASP_SELECT||LA282_1==ASP_PATH||(LA282_1>=SELECT && LA282_1<=RDFSELECT)||LA282_1==CAPSFROM||(LA282_1>=MODIFY && LA282_1<=SUBCLASS)) ) {
                                alt282=1;
                            }


                        }


                        switch (alt282) {
                    	case 1 :
                    	    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2655:43: COMMA argument[arguments, kws, gens, false, true]
                    	    {
                    	    COMMA715=(Token)match(input,COMMA,FOLLOW_COMMA_in_arglist11785); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	    COMMA715_tree = (PythonTree)adaptor.create(COMMA715);
                    	    adaptor.addChild(root_0, COMMA715_tree);
                    	    }
                    	    pushFollow(FOLLOW_argument_in_arglist11787);
                    	    argument716=argument(arguments, kws, gens, false, true);

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, argument716.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop282;
                        }
                    } while (true);

                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2655:95: ( COMMA DOUBLESTAR k= test[expr_contextType.Load] )?
                    int alt283=2;
                    int LA283_0 = input.LA(1);

                    if ( (LA283_0==COMMA) ) {
                        alt283=1;
                    }
                    switch (alt283) {
                        case 1 :
                            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2655:96: COMMA DOUBLESTAR k= test[expr_contextType.Load]
                            {
                            COMMA717=(Token)match(input,COMMA,FOLLOW_COMMA_in_arglist11793); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            COMMA717_tree = (PythonTree)adaptor.create(COMMA717);
                            adaptor.addChild(root_0, COMMA717_tree);
                            }
                            DOUBLESTAR718=(Token)match(input,DOUBLESTAR,FOLLOW_DOUBLESTAR_in_arglist11795); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            DOUBLESTAR718_tree = (PythonTree)adaptor.create(DOUBLESTAR718);
                            adaptor.addChild(root_0, DOUBLESTAR718_tree);
                            }
                            pushFollow(FOLLOW_test_in_arglist11799);
                            k=test(expr_contextType.Load);

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, k.getTree());

                            }
                            break;

                    }

                    if ( state.backtracking==0 ) {

                                retval.starargs =actions.castExpr((s!=null?((PythonTree)s.tree):null));
                                retval.keywords =kws;
                                retval.kwargs =actions.castExpr((k!=null?((PythonTree)k.tree):null));
                            
                    }

                    }
                    break;
                case 3 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2661:7: DOUBLESTAR k= test[expr_contextType.Load]
                    {
                    root_0 = (PythonTree)adaptor.nil();

                    DOUBLESTAR719=(Token)match(input,DOUBLESTAR,FOLLOW_DOUBLESTAR_in_arglist11818); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DOUBLESTAR719_tree = (PythonTree)adaptor.create(DOUBLESTAR719);
                    adaptor.addChild(root_0, DOUBLESTAR719_tree);
                    }
                    pushFollow(FOLLOW_test_in_arglist11822);
                    k=test(expr_contextType.Load);

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, k.getTree());
                    if ( state.backtracking==0 ) {

                                retval.kwargs =actions.castExpr((k!=null?((PythonTree)k.tree):null));
                            
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (PythonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException re) {
            errorHandler.reportError(this, re);
            errorHandler.recover(this, input,re);
            retval.tree = (PythonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "arglist"

    public static class argument_return extends ParserRuleReturnScope {
        public boolean genarg;
        PythonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "argument"
    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2668:1: argument[List arguments, List kws, List gens, boolean first, boolean afterStar] returns [boolean genarg] : t1= test[expr_contextType.Load] ( ( ASSIGN t2= test[expr_contextType.Load] ) | gen_for[$gens] | ) ;
    public final PythonParser.argument_return argument(List arguments, List kws, List gens, boolean first, boolean afterStar) throws RecognitionException {
        PythonParser.argument_return retval = new PythonParser.argument_return();
        retval.start = input.LT(1);

        PythonTree root_0 = null;

        Token ASSIGN720=null;
        PythonParser.test_return t1 = null;

        PythonParser.test_return t2 = null;

        PythonParser.gen_for_return gen_for721 = null;


        PythonTree ASSIGN720_tree=null;

        try {
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2670:5: (t1= test[expr_contextType.Load] ( ( ASSIGN t2= test[expr_contextType.Load] ) | gen_for[$gens] | ) )
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2670:7: t1= test[expr_contextType.Load] ( ( ASSIGN t2= test[expr_contextType.Load] ) | gen_for[$gens] | )
            {
            root_0 = (PythonTree)adaptor.nil();

            pushFollow(FOLLOW_test_in_argument11861);
            t1=test(expr_contextType.Load);

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, t1.getTree());
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2671:9: ( ( ASSIGN t2= test[expr_contextType.Load] ) | gen_for[$gens] | )
            int alt285=3;
            switch ( input.LA(1) ) {
            case ASSIGN:
                {
                alt285=1;
                }
                break;
            case FOR:
                {
                alt285=2;
                }
                break;
            case RPAREN:
            case COMMA:
                {
                alt285=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 285, 0, input);

                throw nvae;
            }

            switch (alt285) {
                case 1 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2671:10: ( ASSIGN t2= test[expr_contextType.Load] )
                    {
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2671:10: ( ASSIGN t2= test[expr_contextType.Load] )
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2671:11: ASSIGN t2= test[expr_contextType.Load]
                    {
                    ASSIGN720=(Token)match(input,ASSIGN,FOLLOW_ASSIGN_in_argument11874); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ASSIGN720_tree = (PythonTree)adaptor.create(ASSIGN720);
                    adaptor.addChild(root_0, ASSIGN720_tree);
                    }
                    pushFollow(FOLLOW_test_in_argument11878);
                    t2=test(expr_contextType.Load);

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, t2.getTree());

                    }

                    if ( state.backtracking==0 ) {

                                    expr newkey = actions.castExpr((t1!=null?((PythonTree)t1.tree):null));
                                    //Loop through all current keys and fail on duplicate.
                                    for(Object o: kws) {
                                        List list = (List)o;
                                        Object oldkey = list.get(0);
                                        if (oldkey instanceof Name && newkey instanceof Name) {
                                            if (((Name)oldkey).getId().equals(((Name)newkey).getId())) {
                                                errorHandler.error("keyword arguments repeated", (t1!=null?((PythonTree)t1.tree):null));
                                            }
                                        }
                                    }
                                    List<expr> exprs = new ArrayList<expr>();
                                    exprs.add(newkey);
                                    exprs.add(actions.castExpr((t2!=null?((PythonTree)t2.tree):null)));
                                    kws.add(exprs);
                                
                    }

                    }
                    break;
                case 2 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2689:11: gen_for[$gens]
                    {
                    pushFollow(FOLLOW_gen_for_in_argument11904);
                    gen_for721=gen_for(gens);

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, gen_for721.getTree());
                    if ( state.backtracking==0 ) {

                                    if (!first) {
                                        actions.errorGenExpNotSoleArg((gen_for721!=null?((PythonTree)gen_for721.tree):null));
                                    }
                                    retval.genarg = true;
                                    Collections.reverse(gens);
                                    List<comprehension> c = gens;
                                    arguments.add(new GeneratorExp((t1!=null?((Token)t1.start):null), actions.castExpr((t1!=null?((PythonTree)t1.tree):null)), c));
                                
                    }

                    }
                    break;
                case 3 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2700:11: 
                    {
                    if ( state.backtracking==0 ) {

                                    if (kws.size() > 0) {
                                        errorHandler.error("non-keyword arg after keyword arg", (t1!=null?((PythonTree)t1.tree):null));
                                    } else if (afterStar) {
                                        errorHandler.error("only named arguments may follow *expression", (t1!=null?((PythonTree)t1.tree):null));
                                    }
                                    arguments.add((t1!=null?((PythonTree)t1.tree):null));
                                
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (PythonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException re) {
            errorHandler.reportError(this, re);
            errorHandler.recover(this, input,re);
            retval.tree = (PythonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "argument"

    public static class list_iter_return extends ParserRuleReturnScope {
        PythonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "list_iter"
    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2712:1: list_iter[List gens, List ifs] : ( list_for[gens] | list_if[gens, ifs] );
    public final PythonParser.list_iter_return list_iter(List gens, List ifs) throws RecognitionException {
        PythonParser.list_iter_return retval = new PythonParser.list_iter_return();
        retval.start = input.LT(1);

        PythonTree root_0 = null;

        PythonParser.list_for_return list_for722 = null;

        PythonParser.list_if_return list_if723 = null;



        try {
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2713:5: ( list_for[gens] | list_if[gens, ifs] )
            int alt286=2;
            int LA286_0 = input.LA(1);

            if ( (LA286_0==FOR) ) {
                alt286=1;
            }
            else if ( (LA286_0==IF) ) {
                alt286=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 286, 0, input);

                throw nvae;
            }
            switch (alt286) {
                case 1 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2713:7: list_for[gens]
                    {
                    root_0 = (PythonTree)adaptor.nil();

                    pushFollow(FOLLOW_list_for_in_list_iter11969);
                    list_for722=list_for(gens);

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, list_for722.getTree());

                    }
                    break;
                case 2 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2714:7: list_if[gens, ifs]
                    {
                    root_0 = (PythonTree)adaptor.nil();

                    pushFollow(FOLLOW_list_if_in_list_iter11978);
                    list_if723=list_if(gens, ifs);

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, list_if723.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (PythonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException re) {
            errorHandler.reportError(this, re);
            errorHandler.recover(this, input,re);
            retval.tree = (PythonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "list_iter"

    public static class list_for_return extends ParserRuleReturnScope {
        PythonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "list_for"
    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2718:1: list_for[List gens] : FOR exprlist[expr_contextType.Store] IN testlist[expr_contextType.Load] ( list_iter[gens, ifs] )? ;
    public final PythonParser.list_for_return list_for(List gens) throws RecognitionException {
        PythonParser.list_for_return retval = new PythonParser.list_for_return();
        retval.start = input.LT(1);

        PythonTree root_0 = null;

        Token FOR724=null;
        Token IN726=null;
        PythonParser.exprlist_return exprlist725 = null;

        PythonParser.testlist_return testlist727 = null;

        PythonParser.list_iter_return list_iter728 = null;


        PythonTree FOR724_tree=null;
        PythonTree IN726_tree=null;


            List ifs = new ArrayList();

        try {
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2722:5: ( FOR exprlist[expr_contextType.Store] IN testlist[expr_contextType.Load] ( list_iter[gens, ifs] )? )
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2722:7: FOR exprlist[expr_contextType.Store] IN testlist[expr_contextType.Load] ( list_iter[gens, ifs] )?
            {
            root_0 = (PythonTree)adaptor.nil();

            FOR724=(Token)match(input,FOR,FOLLOW_FOR_in_list_for12004); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            FOR724_tree = (PythonTree)adaptor.create(FOR724);
            adaptor.addChild(root_0, FOR724_tree);
            }
            pushFollow(FOLLOW_exprlist_in_list_for12006);
            exprlist725=exprlist(expr_contextType.Store);

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, exprlist725.getTree());
            IN726=(Token)match(input,IN,FOLLOW_IN_in_list_for12009); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            IN726_tree = (PythonTree)adaptor.create(IN726);
            adaptor.addChild(root_0, IN726_tree);
            }
            pushFollow(FOLLOW_testlist_in_list_for12011);
            testlist727=testlist(expr_contextType.Load);

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, testlist727.getTree());
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2722:79: ( list_iter[gens, ifs] )?
            int alt287=2;
            int LA287_0 = input.LA(1);

            if ( (LA287_0==FOR||LA287_0==IF) ) {
                alt287=1;
            }
            switch (alt287) {
                case 1 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2722:80: list_iter[gens, ifs]
                    {
                    pushFollow(FOLLOW_list_iter_in_list_for12015);
                    list_iter728=list_iter(gens, ifs);

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, list_iter728.getTree());

                    }
                    break;

            }

            if ( state.backtracking==0 ) {

                        Collections.reverse(ifs);
                        gens.add(new comprehension(FOR724, (exprlist725!=null?exprlist725.etype:null), actions.castExpr((testlist727!=null?((PythonTree)testlist727.tree):null)), ifs));
                    
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (PythonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException re) {
            errorHandler.reportError(this, re);
            errorHandler.recover(this, input,re);
            retval.tree = (PythonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "list_for"

    public static class list_if_return extends ParserRuleReturnScope {
        PythonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "list_if"
    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2730:1: list_if[List gens, List ifs] : IF test[expr_contextType.Load] ( list_iter[gens, ifs] )? ;
    public final PythonParser.list_if_return list_if(List gens, List ifs) throws RecognitionException {
        PythonParser.list_if_return retval = new PythonParser.list_if_return();
        retval.start = input.LT(1);

        PythonTree root_0 = null;

        Token IF729=null;
        PythonParser.test_return test730 = null;

        PythonParser.list_iter_return list_iter731 = null;


        PythonTree IF729_tree=null;

        try {
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2731:5: ( IF test[expr_contextType.Load] ( list_iter[gens, ifs] )? )
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2731:7: IF test[expr_contextType.Load] ( list_iter[gens, ifs] )?
            {
            root_0 = (PythonTree)adaptor.nil();

            IF729=(Token)match(input,IF,FOLLOW_IF_in_list_if12045); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            IF729_tree = (PythonTree)adaptor.create(IF729);
            adaptor.addChild(root_0, IF729_tree);
            }
            pushFollow(FOLLOW_test_in_list_if12047);
            test730=test(expr_contextType.Load);

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, test730.getTree());
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2731:38: ( list_iter[gens, ifs] )?
            int alt288=2;
            int LA288_0 = input.LA(1);

            if ( (LA288_0==FOR||LA288_0==IF) ) {
                alt288=1;
            }
            switch (alt288) {
                case 1 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2731:39: list_iter[gens, ifs]
                    {
                    pushFollow(FOLLOW_list_iter_in_list_if12051);
                    list_iter731=list_iter(gens, ifs);

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, list_iter731.getTree());

                    }
                    break;

            }

            if ( state.backtracking==0 ) {

                      ifs.add(actions.castExpr((test730!=null?((PythonTree)test730.tree):null)));
                    
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (PythonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException re) {
            errorHandler.reportError(this, re);
            errorHandler.recover(this, input,re);
            retval.tree = (PythonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "list_if"

    public static class gen_iter_return extends ParserRuleReturnScope {
        PythonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "gen_iter"
    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2738:1: gen_iter[List gens, List ifs] : ( gen_for[gens] | gen_if[gens, ifs] );
    public final PythonParser.gen_iter_return gen_iter(List gens, List ifs) throws RecognitionException {
        PythonParser.gen_iter_return retval = new PythonParser.gen_iter_return();
        retval.start = input.LT(1);

        PythonTree root_0 = null;

        PythonParser.gen_for_return gen_for732 = null;

        PythonParser.gen_if_return gen_if733 = null;



        try {
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2739:5: ( gen_for[gens] | gen_if[gens, ifs] )
            int alt289=2;
            int LA289_0 = input.LA(1);

            if ( (LA289_0==FOR) ) {
                alt289=1;
            }
            else if ( (LA289_0==IF) ) {
                alt289=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 289, 0, input);

                throw nvae;
            }
            switch (alt289) {
                case 1 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2739:7: gen_for[gens]
                    {
                    root_0 = (PythonTree)adaptor.nil();

                    pushFollow(FOLLOW_gen_for_in_gen_iter12082);
                    gen_for732=gen_for(gens);

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, gen_for732.getTree());

                    }
                    break;
                case 2 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2740:7: gen_if[gens, ifs]
                    {
                    root_0 = (PythonTree)adaptor.nil();

                    pushFollow(FOLLOW_gen_if_in_gen_iter12091);
                    gen_if733=gen_if(gens, ifs);

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, gen_if733.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (PythonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException re) {
            errorHandler.reportError(this, re);
            errorHandler.recover(this, input,re);
            retval.tree = (PythonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "gen_iter"

    public static class gen_for_return extends ParserRuleReturnScope {
        PythonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "gen_for"
    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2744:1: gen_for[List gens] : FOR exprlist[expr_contextType.Store] IN or_test[expr_contextType.Load] ( gen_iter[gens, ifs] )? ;
    public final PythonParser.gen_for_return gen_for(List gens) throws RecognitionException {
        PythonParser.gen_for_return retval = new PythonParser.gen_for_return();
        retval.start = input.LT(1);

        PythonTree root_0 = null;

        Token FOR734=null;
        Token IN736=null;
        PythonParser.exprlist_return exprlist735 = null;

        PythonParser.or_test_return or_test737 = null;

        PythonParser.gen_iter_return gen_iter738 = null;


        PythonTree FOR734_tree=null;
        PythonTree IN736_tree=null;


            List ifs = new ArrayList();

        try {
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2748:5: ( FOR exprlist[expr_contextType.Store] IN or_test[expr_contextType.Load] ( gen_iter[gens, ifs] )? )
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2748:7: FOR exprlist[expr_contextType.Store] IN or_test[expr_contextType.Load] ( gen_iter[gens, ifs] )?
            {
            root_0 = (PythonTree)adaptor.nil();

            FOR734=(Token)match(input,FOR,FOLLOW_FOR_in_gen_for12117); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            FOR734_tree = (PythonTree)adaptor.create(FOR734);
            adaptor.addChild(root_0, FOR734_tree);
            }
            pushFollow(FOLLOW_exprlist_in_gen_for12119);
            exprlist735=exprlist(expr_contextType.Store);

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, exprlist735.getTree());
            IN736=(Token)match(input,IN,FOLLOW_IN_in_gen_for12122); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            IN736_tree = (PythonTree)adaptor.create(IN736);
            adaptor.addChild(root_0, IN736_tree);
            }
            pushFollow(FOLLOW_or_test_in_gen_for12124);
            or_test737=or_test(expr_contextType.Load);

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, or_test737.getTree());
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2748:78: ( gen_iter[gens, ifs] )?
            int alt290=2;
            int LA290_0 = input.LA(1);

            if ( (LA290_0==FOR||LA290_0==IF) ) {
                alt290=1;
            }
            switch (alt290) {
                case 1 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2748:78: gen_iter[gens, ifs]
                    {
                    pushFollow(FOLLOW_gen_iter_in_gen_for12127);
                    gen_iter738=gen_iter(gens, ifs);

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, gen_iter738.getTree());

                    }
                    break;

            }

            if ( state.backtracking==0 ) {

                        Collections.reverse(ifs);
                        gens.add(new comprehension(FOR734, (exprlist735!=null?exprlist735.etype:null), actions.castExpr((or_test737!=null?((PythonTree)or_test737.tree):null)), ifs));
                    
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (PythonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException re) {
            errorHandler.reportError(this, re);
            errorHandler.recover(this, input,re);
            retval.tree = (PythonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "gen_for"

    public static class gen_if_return extends ParserRuleReturnScope {
        PythonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "gen_if"
    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2756:1: gen_if[List gens, List ifs] : IF test[expr_contextType.Load] ( gen_iter[gens, ifs] )? ;
    public final PythonParser.gen_if_return gen_if(List gens, List ifs) throws RecognitionException {
        PythonParser.gen_if_return retval = new PythonParser.gen_if_return();
        retval.start = input.LT(1);

        PythonTree root_0 = null;

        Token IF739=null;
        PythonParser.test_return test740 = null;

        PythonParser.gen_iter_return gen_iter741 = null;


        PythonTree IF739_tree=null;

        try {
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2757:5: ( IF test[expr_contextType.Load] ( gen_iter[gens, ifs] )? )
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2757:7: IF test[expr_contextType.Load] ( gen_iter[gens, ifs] )?
            {
            root_0 = (PythonTree)adaptor.nil();

            IF739=(Token)match(input,IF,FOLLOW_IF_in_gen_if12156); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            IF739_tree = (PythonTree)adaptor.create(IF739);
            adaptor.addChild(root_0, IF739_tree);
            }
            pushFollow(FOLLOW_test_in_gen_if12158);
            test740=test(expr_contextType.Load);

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, test740.getTree());
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2757:38: ( gen_iter[gens, ifs] )?
            int alt291=2;
            int LA291_0 = input.LA(1);

            if ( (LA291_0==FOR||LA291_0==IF) ) {
                alt291=1;
            }
            switch (alt291) {
                case 1 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2757:38: gen_iter[gens, ifs]
                    {
                    pushFollow(FOLLOW_gen_iter_in_gen_if12161);
                    gen_iter741=gen_iter(gens, ifs);

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, gen_iter741.getTree());

                    }
                    break;

            }

            if ( state.backtracking==0 ) {

                      ifs.add(actions.castExpr((test740!=null?((PythonTree)test740.tree):null)));
                    
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (PythonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException re) {
            errorHandler.reportError(this, re);
            errorHandler.recover(this, input,re);
            retval.tree = (PythonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "gen_if"

    public static class yield_expr_return extends ParserRuleReturnScope {
        public expr etype;
        PythonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "yield_expr"
    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2764:1: yield_expr returns [expr etype] : YIELD ( testlist[expr_contextType.Load] )? ;
    public final PythonParser.yield_expr_return yield_expr() throws RecognitionException {
        PythonParser.yield_expr_return retval = new PythonParser.yield_expr_return();
        retval.start = input.LT(1);

        PythonTree root_0 = null;

        Token YIELD742=null;
        PythonParser.testlist_return testlist743 = null;


        PythonTree YIELD742_tree=null;

        try {
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2770:5: ( YIELD ( testlist[expr_contextType.Load] )? )
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2770:7: YIELD ( testlist[expr_contextType.Load] )?
            {
            root_0 = (PythonTree)adaptor.nil();

            YIELD742=(Token)match(input,YIELD,FOLLOW_YIELD_in_yield_expr12202); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            YIELD742_tree = (PythonTree)adaptor.create(YIELD742);
            adaptor.addChild(root_0, YIELD742_tree);
            }
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2770:13: ( testlist[expr_contextType.Load] )?
            int alt292=2;
            int LA292_0 = input.LA(1);

            if ( (LA292_0==NAME||(LA292_0>=LAMBDA && LA292_0<=NOT)||LA292_0==LPAREN||(LA292_0>=PLUS && LA292_0<=MINUS)||(LA292_0>=TILDE && LA292_0<=LBRACK)||LA292_0==LCURLY||(LA292_0>=BACKQUOTE && LA292_0<=PRO)||LA292_0==PRO_SELECT||LA292_0==ASP||LA292_0==ASP_SELECT||LA292_0==ASP_PATH||(LA292_0>=SELECT && LA292_0<=RDFSELECT)||LA292_0==CAPSFROM||(LA292_0>=MODIFY && LA292_0<=SUBCLASS)) ) {
                alt292=1;
            }
            switch (alt292) {
                case 1 :
                    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2770:13: testlist[expr_contextType.Load]
                    {
                    pushFollow(FOLLOW_testlist_in_yield_expr12204);
                    testlist743=testlist(expr_contextType.Load);

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, testlist743.getTree());

                    }
                    break;

            }

            if ( state.backtracking==0 ) {

                        retval.etype = new Yield(YIELD742, actions.castExpr((testlist743!=null?((PythonTree)testlist743.tree):null)));
                    
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (PythonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {

                  //needed for y2+=yield_expr
                  retval.tree = retval.etype;

            }
        }

        catch (RecognitionException re) {
            errorHandler.reportError(this, re);
            errorHandler.recover(this, input,re);
            retval.tree = (PythonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "yield_expr"

    public static class path_return extends ParserRuleReturnScope {
        PythonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "path"
    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:3233:1: path : ( '/' NAME )+ ;
    public final PythonParser.path_return path() throws RecognitionException {
        PythonParser.path_return retval = new PythonParser.path_return();
        retval.start = input.LT(1);

        PythonTree root_0 = null;

        Token char_literal744=null;
        Token NAME745=null;

        PythonTree char_literal744_tree=null;
        PythonTree NAME745_tree=null;

        try {
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:3233:6: ( ( '/' NAME )+ )
            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:3234:5: ( '/' NAME )+
            {
            root_0 = (PythonTree)adaptor.nil();

            // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:3234:5: ( '/' NAME )+
            int cnt293=0;
            loop293:
            do {
                int alt293=2;
                int LA293_0 = input.LA(1);

                if ( (LA293_0==SLASH) ) {
                    int LA293_2 = input.LA(2);

                    if ( (LA293_2==NAME) ) {
                        alt293=1;
                    }


                }


                switch (alt293) {
            	case 1 :
            	    // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:3234:6: '/' NAME
            	    {
            	    char_literal744=(Token)match(input,SLASH,FOLLOW_SLASH_in_path15147); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    char_literal744_tree = (PythonTree)adaptor.create(char_literal744);
            	    adaptor.addChild(root_0, char_literal744_tree);
            	    }
            	    NAME745=(Token)match(input,NAME,FOLLOW_NAME_in_path15149); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	    NAME745_tree = (PythonTree)adaptor.create(NAME745);
            	    adaptor.addChild(root_0, NAME745_tree);
            	    }

            	    }
            	    break;

            	default :
            	    if ( cnt293 >= 1 ) break loop293;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(293, input);
                        throw eee;
                }
                cnt293++;
            } while (true);

            if ( state.backtracking==0 ) {
              System.out.println("path is:" + input.toString(retval.start,input.LT(-1)));
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (PythonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

        catch (RecognitionException re) {
            errorHandler.reportError(this, re);
            errorHandler.recover(this, input,re);
            retval.tree = (PythonTree)adaptor.errorNode(input, retval.start, input.LT(-1), re);
        }
        finally {
        }
        return retval;
    }
    // $ANTLR end "path"

    // $ANTLR start synpred1_Python
    public final void synpred1_Python_fragment() throws RecognitionException {   
        // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:553:7: ( LPAREN fpdef[null] COMMA )
        // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:553:8: LPAREN fpdef[null] COMMA
        {
        match(input,LPAREN,FOLLOW_LPAREN_in_synpred1_Python1257); if (state.failed) return ;
        pushFollow(FOLLOW_fpdef_in_synpred1_Python1259);
        fpdef(null);

        state._fsp--;
        if (state.failed) return ;
        match(input,COMMA,FOLLOW_COMMA_in_synpred1_Python1262); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred1_Python

    // $ANTLR start synpred2_Python
    public final void synpred2_Python_fragment() throws RecognitionException {   
        // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:617:8: ( testlist[null] augassign )
        // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:617:9: testlist[null] augassign
        {
        pushFollow(FOLLOW_testlist_in_synpred2_Python1640);
        testlist(null);

        state._fsp--;
        if (state.failed) return ;
        pushFollow(FOLLOW_augassign_in_synpred2_Python1643);
        augassign();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred2_Python

    // $ANTLR start synpred3_Python
    public final void synpred3_Python_fragment() throws RecognitionException {   
        // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:631:7: ( testlist[null] ASSIGN )
        // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:631:8: testlist[null] ASSIGN
        {
        pushFollow(FOLLOW_testlist_in_synpred3_Python1759);
        testlist(null);

        state._fsp--;
        if (state.failed) return ;
        match(input,ASSIGN,FOLLOW_ASSIGN_in_synpred3_Python1762); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred3_Python

    // $ANTLR start synpred4_Python
    public final void synpred4_Python_fragment() throws RecognitionException {   
        // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:736:7: ( test[null] COMMA )
        // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:736:8: test[null] COMMA
        {
        pushFollow(FOLLOW_test_in_synpred4_Python2274);
        test(null);

        state._fsp--;
        if (state.failed) return ;
        match(input,COMMA,FOLLOW_COMMA_in_synpred4_Python2277); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred4_Python

    // $ANTLR start synpred5_Python
    public final void synpred5_Python_fragment() throws RecognitionException {   
        // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:757:7: ( test[null] COMMA test[null] )
        // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:757:8: test[null] COMMA test[null]
        {
        pushFollow(FOLLOW_test_in_synpred5_Python2373);
        test(null);

        state._fsp--;
        if (state.failed) return ;
        match(input,COMMA,FOLLOW_COMMA_in_synpred5_Python2376); if (state.failed) return ;
        pushFollow(FOLLOW_test_in_synpred5_Python2378);
        test(null);

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred5_Python

    // $ANTLR start synpred6_Python
    public final void synpred6_Python_fragment() throws RecognitionException {   
        // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1042:7: ( ( decorators )? DEF )
        // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1042:8: ( decorators )? DEF
        {
        // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1042:8: ( decorators )?
        int alt294=2;
        int LA294_0 = input.LA(1);

        if ( (LA294_0==AT) ) {
            alt294=1;
        }
        switch (alt294) {
            case 1 :
                // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1042:8: decorators
                {
                pushFollow(FOLLOW_decorators_in_synpred6_Python3467);
                decorators();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }

        match(input,DEF,FOLLOW_DEF_in_synpred6_Python3470); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred6_Python

    // $ANTLR start synpred7_Python
    public final void synpred7_Python_fragment() throws RecognitionException {   
        // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1229:9: ( IF or_test[null] ORELSE )
        // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:1229:10: IF or_test[null] ORELSE
        {
        match(input,IF,FOLLOW_IF_in_synpred7_Python4213); if (state.failed) return ;
        pushFollow(FOLLOW_or_test_in_synpred7_Python4215);
        or_test(null);

        state._fsp--;
        if (state.failed) return ;
        match(input,ORELSE,FOLLOW_ORELSE_in_synpred7_Python4218); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred7_Python

    // $ANTLR start synpred13_Python
    public final void synpred13_Python_fragment() throws RecognitionException {   
        // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2520:7: ( test[null] COLON )
        // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2520:8: test[null] COLON
        {
        pushFollow(FOLLOW_test_in_synpred13_Python11063);
        test(null);

        state._fsp--;
        if (state.failed) return ;
        match(input,COLON,FOLLOW_COLON_in_synpred13_Python11066); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred13_Python

    // $ANTLR start synpred14_Python
    public final void synpred14_Python_fragment() throws RecognitionException {   
        // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2525:7: ( COLON )
        // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2525:8: COLON
        {
        match(input,COLON,FOLLOW_COLON_in_synpred14_Python11114); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred14_Python

    // $ANTLR start synpred15_Python
    public final void synpred15_Python_fragment() throws RecognitionException {   
        // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2559:7: ( expr[null] COMMA )
        // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2559:8: expr[null] COMMA
        {
        pushFollow(FOLLOW_expr_in_synpred15_Python11259);
        expr(null);

        state._fsp--;
        if (state.failed) return ;
        match(input,COMMA,FOLLOW_COMMA_in_synpred15_Python11262); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred15_Python

    // $ANTLR start synpred16_Python
    public final void synpred16_Python_fragment() throws RecognitionException {   
        // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2589:7: ( test[null] COMMA )
        // /v/filer4b/v38q001/dotysn/Documents/345/sql/grammar/Python.g:2589:8: test[null] COMMA
        {
        pushFollow(FOLLOW_test_in_synpred16_Python11410);
        test(null);

        state._fsp--;
        if (state.failed) return ;
        match(input,COMMA,FOLLOW_COMMA_in_synpred16_Python11413); if (state.failed) return ;

        }
    }
    // $ANTLR end synpred16_Python

    // Delegated rules

    public final boolean synpred16_Python() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred16_Python_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred13_Python() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred13_Python_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred5_Python() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred5_Python_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred7_Python() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred7_Python_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred4_Python() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred4_Python_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred14_Python() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred14_Python_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred3_Python() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred3_Python_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred1_Python() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred1_Python_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred15_Python() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred15_Python_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred6_Python() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred6_Python_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred2_Python() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred2_Python_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }


    protected DFA29 dfa29 = new DFA29(this);
    protected DFA34 dfa34 = new DFA34(this);
    protected DFA30 dfa30 = new DFA30(this);
    protected DFA39 dfa39 = new DFA39(this);
    protected DFA37 dfa37 = new DFA37(this);
    protected DFA42 dfa42 = new DFA42(this);
    protected DFA40 dfa40 = new DFA40(this);
    protected DFA51 dfa51 = new DFA51(this);
    protected DFA78 dfa78 = new DFA78(this);
    protected DFA87 dfa87 = new DFA87(this);
    protected DFA110 dfa110 = new DFA110(this);
    protected DFA125 dfa125 = new DFA125(this);
    protected DFA177 dfa177 = new DFA177(this);
    protected DFA211 dfa211 = new DFA211(this);
    protected DFA212 dfa212 = new DFA212(this);
    protected DFA228 dfa228 = new DFA228(this);
    protected DFA249 dfa249 = new DFA249(this);
    protected DFA262 dfa262 = new DFA262(this);
    protected DFA266 dfa266 = new DFA266(this);
    protected DFA264 dfa264 = new DFA264(this);
    protected DFA267 dfa267 = new DFA267(this);
    protected DFA271 dfa271 = new DFA271(this);
    protected DFA269 dfa269 = new DFA269(this);
    protected DFA272 dfa272 = new DFA272(this);
    static final String DFA29_eotS =
        "\12\uffff";
    static final String DFA29_eofS =
        "\12\uffff";
    static final String DFA29_minS =
        "\1\11\11\uffff";
    static final String DFA29_maxS =
        "\1\u00a0\11\uffff";
    static final String DFA29_acceptS =
        "\1\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11";
    static final String DFA29_specialS =
        "\12\uffff}>";
    static final String[] DFA29_transitionS = {
            "\1\1\3\uffff\1\11\1\5\1\uffff\1\5\1\uffff\1\3\2\uffff\1\10\1"+
            "\uffff\1\6\1\uffff\1\7\1\uffff\1\6\2\uffff\2\1\2\uffff\1\4\1"+
            "\2\2\5\3\uffff\1\5\1\uffff\1\1\37\uffff\2\1\3\uffff\2\1\1\uffff"+
            "\1\1\1\uffff\7\1\5\uffff\1\1\3\uffff\1\1\1\uffff\1\1\2\uffff"+
            "\1\1\3\uffff\12\1\6\uffff\1\1\37\uffff\3\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA29_eot = DFA.unpackEncodedString(DFA29_eotS);
    static final short[] DFA29_eof = DFA.unpackEncodedString(DFA29_eofS);
    static final char[] DFA29_min = DFA.unpackEncodedStringToUnsignedChars(DFA29_minS);
    static final char[] DFA29_max = DFA.unpackEncodedStringToUnsignedChars(DFA29_maxS);
    static final short[] DFA29_accept = DFA.unpackEncodedString(DFA29_acceptS);
    static final short[] DFA29_special = DFA.unpackEncodedString(DFA29_specialS);
    static final short[][] DFA29_transition;

    static {
        int numStates = DFA29_transitionS.length;
        DFA29_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA29_transition[i] = DFA.unpackEncodedString(DFA29_transitionS[i]);
        }
    }

    class DFA29 extends DFA {

        public DFA29(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 29;
            this.eot = DFA29_eot;
            this.eof = DFA29_eof;
            this.min = DFA29_min;
            this.max = DFA29_max;
            this.accept = DFA29_accept;
            this.special = DFA29_special;
            this.transition = DFA29_transition;
        }
        public String getDescription() {
            return "595:1: small_stmt : ( expr_stmt | print_stmt | del_stmt | pass_stmt | flow_stmt | import_stmt | global_stmt | exec_stmt | assert_stmt );";
        }
    }
    static final String DFA34_eotS =
        "\46\uffff";
    static final String DFA34_eofS =
        "\46\uffff";
    static final String DFA34_minS =
        "\1\11\42\0\3\uffff";
    static final String DFA34_maxS =
        "\1\u00a0\42\0\3\uffff";
    static final String DFA34_acceptS =
        "\43\uffff\1\1\1\2\1\3";
    static final String DFA34_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14"+
        "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
        "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41\3\uffff}>";
    static final String[] DFA34_transitionS = {
            "\1\11\24\uffff\1\42\1\1\13\uffff\1\5\37\uffff\1\2\1\3\3\uffff"+
            "\1\4\1\6\1\uffff\1\7\1\uffff\1\10\1\12\1\13\1\14\1\15\1\16\1"+
            "\31\5\uffff\1\32\3\uffff\1\33\1\uffff\1\34\2\uffff\1\35\3\uffff"+
            "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\6\uffff\1"+
            "\37\37\uffff\1\36\1\40\1\41",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            ""
    };

    static final short[] DFA34_eot = DFA.unpackEncodedString(DFA34_eotS);
    static final short[] DFA34_eof = DFA.unpackEncodedString(DFA34_eofS);
    static final char[] DFA34_min = DFA.unpackEncodedStringToUnsignedChars(DFA34_minS);
    static final char[] DFA34_max = DFA.unpackEncodedStringToUnsignedChars(DFA34_maxS);
    static final short[] DFA34_accept = DFA.unpackEncodedString(DFA34_acceptS);
    static final short[] DFA34_special = DFA.unpackEncodedString(DFA34_specialS);
    static final short[][] DFA34_transition;

    static {
        int numStates = DFA34_transitionS.length;
        DFA34_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA34_transition[i] = DFA.unpackEncodedString(DFA34_transitionS[i]);
        }
    }

    class DFA34 extends DFA {

        public DFA34(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 34;
            this.eot = DFA34_eot;
            this.eof = DFA34_eof;
            this.min = DFA34_min;
            this.max = DFA34_max;
            this.accept = DFA34_accept;
            this.special = DFA34_special;
            this.transition = DFA34_transition;
        }
        public String getDescription() {
            return "617:7: ( ( testlist[null] augassign )=>lhs= testlist[expr_contextType.AugStore] ( (aay= augassign y1= yield_expr ) | (aat= augassign rhs= testlist[expr_contextType.Load] ) ) | ( testlist[null] ASSIGN )=>lhs= testlist[expr_contextType.Store] ( | ( (at= ASSIGN t+= testlist[expr_contextType.Store] )+ ) | ( (ay= ASSIGN y2+= yield_expr )+ ) ) | lhs= testlist[expr_contextType.Load] )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA34_1 = input.LA(1);

                         
                        int index34_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_Python()) ) {s = 35;}

                        else if ( (synpred3_Python()) ) {s = 36;}

                        else if ( (true) ) {s = 37;}

                         
                        input.seek(index34_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA34_2 = input.LA(1);

                         
                        int index34_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_Python()) ) {s = 35;}

                        else if ( (synpred3_Python()) ) {s = 36;}

                        else if ( (true) ) {s = 37;}

                         
                        input.seek(index34_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA34_3 = input.LA(1);

                         
                        int index34_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_Python()) ) {s = 35;}

                        else if ( (synpred3_Python()) ) {s = 36;}

                        else if ( (true) ) {s = 37;}

                         
                        input.seek(index34_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA34_4 = input.LA(1);

                         
                        int index34_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_Python()) ) {s = 35;}

                        else if ( (synpred3_Python()) ) {s = 36;}

                        else if ( (true) ) {s = 37;}

                         
                        input.seek(index34_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA34_5 = input.LA(1);

                         
                        int index34_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_Python()) ) {s = 35;}

                        else if ( (synpred3_Python()) ) {s = 36;}

                        else if ( (true) ) {s = 37;}

                         
                        input.seek(index34_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA34_6 = input.LA(1);

                         
                        int index34_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_Python()) ) {s = 35;}

                        else if ( (synpred3_Python()) ) {s = 36;}

                        else if ( (true) ) {s = 37;}

                         
                        input.seek(index34_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA34_7 = input.LA(1);

                         
                        int index34_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_Python()) ) {s = 35;}

                        else if ( (synpred3_Python()) ) {s = 36;}

                        else if ( (true) ) {s = 37;}

                         
                        input.seek(index34_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA34_8 = input.LA(1);

                         
                        int index34_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_Python()) ) {s = 35;}

                        else if ( (synpred3_Python()) ) {s = 36;}

                        else if ( (true) ) {s = 37;}

                         
                        input.seek(index34_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA34_9 = input.LA(1);

                         
                        int index34_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_Python()) ) {s = 35;}

                        else if ( (synpred3_Python()) ) {s = 36;}

                        else if ( (true) ) {s = 37;}

                         
                        input.seek(index34_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA34_10 = input.LA(1);

                         
                        int index34_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_Python()) ) {s = 35;}

                        else if ( (synpred3_Python()) ) {s = 36;}

                        else if ( (true) ) {s = 37;}

                         
                        input.seek(index34_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA34_11 = input.LA(1);

                         
                        int index34_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_Python()) ) {s = 35;}

                        else if ( (synpred3_Python()) ) {s = 36;}

                        else if ( (true) ) {s = 37;}

                         
                        input.seek(index34_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA34_12 = input.LA(1);

                         
                        int index34_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_Python()) ) {s = 35;}

                        else if ( (synpred3_Python()) ) {s = 36;}

                        else if ( (true) ) {s = 37;}

                         
                        input.seek(index34_12);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA34_13 = input.LA(1);

                         
                        int index34_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_Python()) ) {s = 35;}

                        else if ( (synpred3_Python()) ) {s = 36;}

                        else if ( (true) ) {s = 37;}

                         
                        input.seek(index34_13);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA34_14 = input.LA(1);

                         
                        int index34_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_Python()) ) {s = 35;}

                        else if ( (synpred3_Python()) ) {s = 36;}

                        else if ( (true) ) {s = 37;}

                         
                        input.seek(index34_14);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA34_15 = input.LA(1);

                         
                        int index34_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_Python()) ) {s = 35;}

                        else if ( (synpred3_Python()) ) {s = 36;}

                        else if ( (true) ) {s = 37;}

                         
                        input.seek(index34_15);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA34_16 = input.LA(1);

                         
                        int index34_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_Python()) ) {s = 35;}

                        else if ( (synpred3_Python()) ) {s = 36;}

                        else if ( (true) ) {s = 37;}

                         
                        input.seek(index34_16);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA34_17 = input.LA(1);

                         
                        int index34_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_Python()) ) {s = 35;}

                        else if ( (synpred3_Python()) ) {s = 36;}

                        else if ( (true) ) {s = 37;}

                         
                        input.seek(index34_17);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA34_18 = input.LA(1);

                         
                        int index34_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_Python()) ) {s = 35;}

                        else if ( (synpred3_Python()) ) {s = 36;}

                        else if ( (true) ) {s = 37;}

                         
                        input.seek(index34_18);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA34_19 = input.LA(1);

                         
                        int index34_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_Python()) ) {s = 35;}

                        else if ( (synpred3_Python()) ) {s = 36;}

                        else if ( (true) ) {s = 37;}

                         
                        input.seek(index34_19);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA34_20 = input.LA(1);

                         
                        int index34_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_Python()) ) {s = 35;}

                        else if ( (synpred3_Python()) ) {s = 36;}

                        else if ( (true) ) {s = 37;}

                         
                        input.seek(index34_20);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA34_21 = input.LA(1);

                         
                        int index34_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_Python()) ) {s = 35;}

                        else if ( (synpred3_Python()) ) {s = 36;}

                        else if ( (true) ) {s = 37;}

                         
                        input.seek(index34_21);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA34_22 = input.LA(1);

                         
                        int index34_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_Python()) ) {s = 35;}

                        else if ( (synpred3_Python()) ) {s = 36;}

                        else if ( (true) ) {s = 37;}

                         
                        input.seek(index34_22);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA34_23 = input.LA(1);

                         
                        int index34_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_Python()) ) {s = 35;}

                        else if ( (synpred3_Python()) ) {s = 36;}

                        else if ( (true) ) {s = 37;}

                         
                        input.seek(index34_23);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA34_24 = input.LA(1);

                         
                        int index34_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_Python()) ) {s = 35;}

                        else if ( (synpred3_Python()) ) {s = 36;}

                        else if ( (true) ) {s = 37;}

                         
                        input.seek(index34_24);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA34_25 = input.LA(1);

                         
                        int index34_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_Python()) ) {s = 35;}

                        else if ( (synpred3_Python()) ) {s = 36;}

                        else if ( (true) ) {s = 37;}

                         
                        input.seek(index34_25);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA34_26 = input.LA(1);

                         
                        int index34_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_Python()) ) {s = 35;}

                        else if ( (synpred3_Python()) ) {s = 36;}

                        else if ( (true) ) {s = 37;}

                         
                        input.seek(index34_26);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA34_27 = input.LA(1);

                         
                        int index34_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_Python()) ) {s = 35;}

                        else if ( (synpred3_Python()) ) {s = 36;}

                        else if ( (true) ) {s = 37;}

                         
                        input.seek(index34_27);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA34_28 = input.LA(1);

                         
                        int index34_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_Python()) ) {s = 35;}

                        else if ( (synpred3_Python()) ) {s = 36;}

                        else if ( (true) ) {s = 37;}

                         
                        input.seek(index34_28);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA34_29 = input.LA(1);

                         
                        int index34_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_Python()) ) {s = 35;}

                        else if ( (synpred3_Python()) ) {s = 36;}

                        else if ( (true) ) {s = 37;}

                         
                        input.seek(index34_29);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA34_30 = input.LA(1);

                         
                        int index34_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_Python()) ) {s = 35;}

                        else if ( (synpred3_Python()) ) {s = 36;}

                        else if ( (true) ) {s = 37;}

                         
                        input.seek(index34_30);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA34_31 = input.LA(1);

                         
                        int index34_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_Python()) ) {s = 35;}

                        else if ( (synpred3_Python()) ) {s = 36;}

                        else if ( (true) ) {s = 37;}

                         
                        input.seek(index34_31);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA34_32 = input.LA(1);

                         
                        int index34_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_Python()) ) {s = 35;}

                        else if ( (synpred3_Python()) ) {s = 36;}

                        else if ( (true) ) {s = 37;}

                         
                        input.seek(index34_32);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA34_33 = input.LA(1);

                         
                        int index34_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_Python()) ) {s = 35;}

                        else if ( (synpred3_Python()) ) {s = 36;}

                        else if ( (true) ) {s = 37;}

                         
                        input.seek(index34_33);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA34_34 = input.LA(1);

                         
                        int index34_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_Python()) ) {s = 35;}

                        else if ( (synpred3_Python()) ) {s = 36;}

                        else if ( (true) ) {s = 37;}

                         
                        input.seek(index34_34);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 34, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA30_eotS =
        "\17\uffff";
    static final String DFA30_eofS =
        "\17\uffff";
    static final String DFA30_minS =
        "\1\63\14\11\2\uffff";
    static final String DFA30_maxS =
        "\1\76\14\u00a0\2\uffff";
    static final String DFA30_acceptS =
        "\15\uffff\1\1\1\2";
    static final String DFA30_specialS =
        "\17\uffff}>";
    static final String[] DFA30_transitionS = {
            "\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14",
            "\1\16\24\uffff\2\16\11\uffff\1\15\1\uffff\1\16\37\uffff\2\16"+
            "\3\uffff\2\16\1\uffff\1\16\1\uffff\7\16\5\uffff\1\16\3\uffff"+
            "\1\16\1\uffff\1\16\2\uffff\1\16\3\uffff\12\16\6\uffff\1\16\37"+
            "\uffff\3\16",
            "\1\16\24\uffff\2\16\11\uffff\1\15\1\uffff\1\16\37\uffff\2\16"+
            "\3\uffff\2\16\1\uffff\1\16\1\uffff\7\16\5\uffff\1\16\3\uffff"+
            "\1\16\1\uffff\1\16\2\uffff\1\16\3\uffff\12\16\6\uffff\1\16\37"+
            "\uffff\3\16",
            "\1\16\24\uffff\2\16\11\uffff\1\15\1\uffff\1\16\37\uffff\2\16"+
            "\3\uffff\2\16\1\uffff\1\16\1\uffff\7\16\5\uffff\1\16\3\uffff"+
            "\1\16\1\uffff\1\16\2\uffff\1\16\3\uffff\12\16\6\uffff\1\16\37"+
            "\uffff\3\16",
            "\1\16\24\uffff\2\16\11\uffff\1\15\1\uffff\1\16\37\uffff\2\16"+
            "\3\uffff\2\16\1\uffff\1\16\1\uffff\7\16\5\uffff\1\16\3\uffff"+
            "\1\16\1\uffff\1\16\2\uffff\1\16\3\uffff\12\16\6\uffff\1\16\37"+
            "\uffff\3\16",
            "\1\16\24\uffff\2\16\11\uffff\1\15\1\uffff\1\16\37\uffff\2\16"+
            "\3\uffff\2\16\1\uffff\1\16\1\uffff\7\16\5\uffff\1\16\3\uffff"+
            "\1\16\1\uffff\1\16\2\uffff\1\16\3\uffff\12\16\6\uffff\1\16\37"+
            "\uffff\3\16",
            "\1\16\24\uffff\2\16\11\uffff\1\15\1\uffff\1\16\37\uffff\2\16"+
            "\3\uffff\2\16\1\uffff\1\16\1\uffff\7\16\5\uffff\1\16\3\uffff"+
            "\1\16\1\uffff\1\16\2\uffff\1\16\3\uffff\12\16\6\uffff\1\16\37"+
            "\uffff\3\16",
            "\1\16\24\uffff\2\16\11\uffff\1\15\1\uffff\1\16\37\uffff\2\16"+
            "\3\uffff\2\16\1\uffff\1\16\1\uffff\7\16\5\uffff\1\16\3\uffff"+
            "\1\16\1\uffff\1\16\2\uffff\1\16\3\uffff\12\16\6\uffff\1\16\37"+
            "\uffff\3\16",
            "\1\16\24\uffff\2\16\11\uffff\1\15\1\uffff\1\16\37\uffff\2\16"+
            "\3\uffff\2\16\1\uffff\1\16\1\uffff\7\16\5\uffff\1\16\3\uffff"+
            "\1\16\1\uffff\1\16\2\uffff\1\16\3\uffff\12\16\6\uffff\1\16\37"+
            "\uffff\3\16",
            "\1\16\24\uffff\2\16\11\uffff\1\15\1\uffff\1\16\37\uffff\2\16"+
            "\3\uffff\2\16\1\uffff\1\16\1\uffff\7\16\5\uffff\1\16\3\uffff"+
            "\1\16\1\uffff\1\16\2\uffff\1\16\3\uffff\12\16\6\uffff\1\16\37"+
            "\uffff\3\16",
            "\1\16\24\uffff\2\16\11\uffff\1\15\1\uffff\1\16\37\uffff\2\16"+
            "\3\uffff\2\16\1\uffff\1\16\1\uffff\7\16\5\uffff\1\16\3\uffff"+
            "\1\16\1\uffff\1\16\2\uffff\1\16\3\uffff\12\16\6\uffff\1\16\37"+
            "\uffff\3\16",
            "\1\16\24\uffff\2\16\11\uffff\1\15\1\uffff\1\16\37\uffff\2\16"+
            "\3\uffff\2\16\1\uffff\1\16\1\uffff\7\16\5\uffff\1\16\3\uffff"+
            "\1\16\1\uffff\1\16\2\uffff\1\16\3\uffff\12\16\6\uffff\1\16\37"+
            "\uffff\3\16",
            "\1\16\24\uffff\2\16\11\uffff\1\15\1\uffff\1\16\37\uffff\2\16"+
            "\3\uffff\2\16\1\uffff\1\16\1\uffff\7\16\5\uffff\1\16\3\uffff"+
            "\1\16\1\uffff\1\16\2\uffff\1\16\3\uffff\12\16\6\uffff\1\16\37"+
            "\uffff\3\16",
            "",
            ""
    };

    static final short[] DFA30_eot = DFA.unpackEncodedString(DFA30_eotS);
    static final short[] DFA30_eof = DFA.unpackEncodedString(DFA30_eofS);
    static final char[] DFA30_min = DFA.unpackEncodedStringToUnsignedChars(DFA30_minS);
    static final char[] DFA30_max = DFA.unpackEncodedStringToUnsignedChars(DFA30_maxS);
    static final short[] DFA30_accept = DFA.unpackEncodedString(DFA30_acceptS);
    static final short[] DFA30_special = DFA.unpackEncodedString(DFA30_specialS);
    static final short[][] DFA30_transition;

    static {
        int numStates = DFA30_transitionS.length;
        DFA30_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA30_transition[i] = DFA.unpackEncodedString(DFA30_transitionS[i]);
        }
    }

    class DFA30 extends DFA {

        public DFA30(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 30;
            this.eot = DFA30_eot;
            this.eof = DFA30_eof;
            this.min = DFA30_min;
            this.max = DFA30_max;
            this.accept = DFA30_accept;
            this.special = DFA30_special;
            this.transition = DFA30_transition;
        }
        public String getDescription() {
            return "618:9: ( (aay= augassign y1= yield_expr ) | (aat= augassign rhs= testlist[expr_contextType.Load] ) )";
        }
    }
    static final String DFA39_eotS =
        "\45\uffff";
    static final String DFA39_eofS =
        "\45\uffff";
    static final String DFA39_minS =
        "\1\11\42\0\2\uffff";
    static final String DFA39_maxS =
        "\1\u00a0\42\0\2\uffff";
    static final String DFA39_acceptS =
        "\43\uffff\1\1\1\2";
    static final String DFA39_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14"+
        "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
        "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41\2\uffff}>";
    static final String[] DFA39_transitionS = {
            "\1\11\24\uffff\1\42\1\1\13\uffff\1\5\37\uffff\1\2\1\3\3\uffff"+
            "\1\4\1\6\1\uffff\1\7\1\uffff\1\10\1\12\1\13\1\14\1\15\1\16\1"+
            "\31\5\uffff\1\32\3\uffff\1\33\1\uffff\1\34\2\uffff\1\35\3\uffff"+
            "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\6\uffff\1"+
            "\37\37\uffff\1\36\1\40\1\41",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            ""
    };

    static final short[] DFA39_eot = DFA.unpackEncodedString(DFA39_eotS);
    static final short[] DFA39_eof = DFA.unpackEncodedString(DFA39_eofS);
    static final char[] DFA39_min = DFA.unpackEncodedStringToUnsignedChars(DFA39_minS);
    static final char[] DFA39_max = DFA.unpackEncodedStringToUnsignedChars(DFA39_maxS);
    static final short[] DFA39_accept = DFA.unpackEncodedString(DFA39_acceptS);
    static final short[] DFA39_special = DFA.unpackEncodedString(DFA39_specialS);
    static final short[][] DFA39_transition;

    static {
        int numStates = DFA39_transitionS.length;
        DFA39_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA39_transition[i] = DFA.unpackEncodedString(DFA39_transitionS[i]);
        }
    }

    class DFA39 extends DFA {

        public DFA39(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 39;
            this.eot = DFA39_eot;
            this.eof = DFA39_eof;
            this.min = DFA39_min;
            this.max = DFA39_max;
            this.accept = DFA39_accept;
            this.special = DFA39_special;
            this.transition = DFA39_transition;
        }
        public String getDescription() {
            return "734:1: printlist returns [boolean newline, List elts] : ( ( test[null] COMMA )=>t+= test[expr_contextType.Load] ( options {k=2; } : COMMA t+= test[expr_contextType.Load] )* (trailcomma= COMMA )? | t+= test[expr_contextType.Load] );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA39_1 = input.LA(1);

                         
                        int index39_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_Python()) ) {s = 35;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index39_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA39_2 = input.LA(1);

                         
                        int index39_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_Python()) ) {s = 35;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index39_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA39_3 = input.LA(1);

                         
                        int index39_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_Python()) ) {s = 35;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index39_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA39_4 = input.LA(1);

                         
                        int index39_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_Python()) ) {s = 35;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index39_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA39_5 = input.LA(1);

                         
                        int index39_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_Python()) ) {s = 35;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index39_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA39_6 = input.LA(1);

                         
                        int index39_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_Python()) ) {s = 35;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index39_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA39_7 = input.LA(1);

                         
                        int index39_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_Python()) ) {s = 35;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index39_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA39_8 = input.LA(1);

                         
                        int index39_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_Python()) ) {s = 35;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index39_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA39_9 = input.LA(1);

                         
                        int index39_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_Python()) ) {s = 35;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index39_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA39_10 = input.LA(1);

                         
                        int index39_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_Python()) ) {s = 35;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index39_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA39_11 = input.LA(1);

                         
                        int index39_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_Python()) ) {s = 35;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index39_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA39_12 = input.LA(1);

                         
                        int index39_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_Python()) ) {s = 35;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index39_12);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA39_13 = input.LA(1);

                         
                        int index39_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_Python()) ) {s = 35;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index39_13);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA39_14 = input.LA(1);

                         
                        int index39_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_Python()) ) {s = 35;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index39_14);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA39_15 = input.LA(1);

                         
                        int index39_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_Python()) ) {s = 35;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index39_15);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA39_16 = input.LA(1);

                         
                        int index39_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_Python()) ) {s = 35;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index39_16);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA39_17 = input.LA(1);

                         
                        int index39_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_Python()) ) {s = 35;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index39_17);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA39_18 = input.LA(1);

                         
                        int index39_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_Python()) ) {s = 35;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index39_18);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA39_19 = input.LA(1);

                         
                        int index39_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_Python()) ) {s = 35;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index39_19);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA39_20 = input.LA(1);

                         
                        int index39_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_Python()) ) {s = 35;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index39_20);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA39_21 = input.LA(1);

                         
                        int index39_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_Python()) ) {s = 35;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index39_21);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA39_22 = input.LA(1);

                         
                        int index39_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_Python()) ) {s = 35;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index39_22);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA39_23 = input.LA(1);

                         
                        int index39_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_Python()) ) {s = 35;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index39_23);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA39_24 = input.LA(1);

                         
                        int index39_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_Python()) ) {s = 35;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index39_24);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA39_25 = input.LA(1);

                         
                        int index39_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_Python()) ) {s = 35;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index39_25);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA39_26 = input.LA(1);

                         
                        int index39_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_Python()) ) {s = 35;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index39_26);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA39_27 = input.LA(1);

                         
                        int index39_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_Python()) ) {s = 35;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index39_27);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA39_28 = input.LA(1);

                         
                        int index39_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_Python()) ) {s = 35;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index39_28);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA39_29 = input.LA(1);

                         
                        int index39_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_Python()) ) {s = 35;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index39_29);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA39_30 = input.LA(1);

                         
                        int index39_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_Python()) ) {s = 35;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index39_30);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA39_31 = input.LA(1);

                         
                        int index39_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_Python()) ) {s = 35;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index39_31);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA39_32 = input.LA(1);

                         
                        int index39_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_Python()) ) {s = 35;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index39_32);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA39_33 = input.LA(1);

                         
                        int index39_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_Python()) ) {s = 35;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index39_33);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA39_34 = input.LA(1);

                         
                        int index39_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_Python()) ) {s = 35;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index39_34);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 39, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA37_eotS =
        "\50\uffff";
    static final String DFA37_eofS =
        "\50\uffff";
    static final String DFA37_minS =
        "\2\7\46\uffff";
    static final String DFA37_maxS =
        "\1\62\1\u00a0\46\uffff";
    static final String DFA37_acceptS =
        "\2\uffff\1\2\3\uffff\1\1\41\uffff";
    static final String DFA37_specialS =
        "\50\uffff}>";
    static final String[] DFA37_transitionS = {
            "\1\2\47\uffff\1\1\2\uffff\1\2",
            "\1\2\1\uffff\1\6\24\uffff\2\6\13\uffff\1\6\6\uffff\1\2\30\uffff"+
            "\2\6\3\uffff\2\6\1\uffff\1\6\1\uffff\7\6\5\uffff\1\6\3\uffff"+
            "\1\6\1\uffff\1\6\2\uffff\1\6\3\uffff\12\6\6\uffff\1\6\37\uffff"+
            "\3\6",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA37_eot = DFA.unpackEncodedString(DFA37_eotS);
    static final short[] DFA37_eof = DFA.unpackEncodedString(DFA37_eofS);
    static final char[] DFA37_min = DFA.unpackEncodedStringToUnsignedChars(DFA37_minS);
    static final char[] DFA37_max = DFA.unpackEncodedStringToUnsignedChars(DFA37_maxS);
    static final short[] DFA37_accept = DFA.unpackEncodedString(DFA37_acceptS);
    static final short[] DFA37_special = DFA.unpackEncodedString(DFA37_specialS);
    static final short[][] DFA37_transition;

    static {
        int numStates = DFA37_transitionS.length;
        DFA37_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA37_transition[i] = DFA.unpackEncodedString(DFA37_transitionS[i]);
        }
    }

    class DFA37 extends DFA {

        public DFA37(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 37;
            this.eot = DFA37_eot;
            this.eof = DFA37_eof;
            this.min = DFA37_min;
            this.max = DFA37_max;
            this.accept = DFA37_accept;
            this.special = DFA37_special;
            this.transition = DFA37_transition;
        }
        public String getDescription() {
            return "()* loopback of 737:39: ( options {k=2; } : COMMA t+= test[expr_contextType.Load] )*";
        }
    }
    static final String DFA42_eotS =
        "\45\uffff";
    static final String DFA42_eofS =
        "\45\uffff";
    static final String DFA42_minS =
        "\1\11\42\0\2\uffff";
    static final String DFA42_maxS =
        "\1\u00a0\42\0\2\uffff";
    static final String DFA42_acceptS =
        "\43\uffff\1\1\1\2";
    static final String DFA42_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14"+
        "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
        "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41\2\uffff}>";
    static final String[] DFA42_transitionS = {
            "\1\11\24\uffff\1\42\1\1\13\uffff\1\5\37\uffff\1\2\1\3\3\uffff"+
            "\1\4\1\6\1\uffff\1\7\1\uffff\1\10\1\12\1\13\1\14\1\15\1\16\1"+
            "\31\5\uffff\1\32\3\uffff\1\33\1\uffff\1\34\2\uffff\1\35\3\uffff"+
            "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\6\uffff\1"+
            "\37\37\uffff\1\36\1\40\1\41",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            ""
    };

    static final short[] DFA42_eot = DFA.unpackEncodedString(DFA42_eotS);
    static final short[] DFA42_eof = DFA.unpackEncodedString(DFA42_eofS);
    static final char[] DFA42_min = DFA.unpackEncodedStringToUnsignedChars(DFA42_minS);
    static final char[] DFA42_max = DFA.unpackEncodedStringToUnsignedChars(DFA42_maxS);
    static final short[] DFA42_accept = DFA.unpackEncodedString(DFA42_acceptS);
    static final short[] DFA42_special = DFA.unpackEncodedString(DFA42_specialS);
    static final short[][] DFA42_transition;

    static {
        int numStates = DFA42_transitionS.length;
        DFA42_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA42_transition[i] = DFA.unpackEncodedString(DFA42_transitionS[i]);
        }
    }

    class DFA42 extends DFA {

        public DFA42(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 42;
            this.eot = DFA42_eot;
            this.eof = DFA42_eof;
            this.min = DFA42_min;
            this.max = DFA42_max;
            this.accept = DFA42_accept;
            this.special = DFA42_special;
            this.transition = DFA42_transition;
        }
        public String getDescription() {
            return "755:1: printlist2 returns [boolean newline, List elts] : ( ( test[null] COMMA test[null] )=>t+= test[expr_contextType.Load] ( options {k=2; } : COMMA t+= test[expr_contextType.Load] )* (trailcomma= COMMA )? | t+= test[expr_contextType.Load] );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA42_1 = input.LA(1);

                         
                        int index42_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_Python()) ) {s = 35;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index42_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA42_2 = input.LA(1);

                         
                        int index42_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_Python()) ) {s = 35;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index42_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA42_3 = input.LA(1);

                         
                        int index42_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_Python()) ) {s = 35;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index42_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA42_4 = input.LA(1);

                         
                        int index42_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_Python()) ) {s = 35;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index42_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA42_5 = input.LA(1);

                         
                        int index42_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_Python()) ) {s = 35;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index42_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA42_6 = input.LA(1);

                         
                        int index42_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_Python()) ) {s = 35;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index42_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA42_7 = input.LA(1);

                         
                        int index42_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_Python()) ) {s = 35;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index42_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA42_8 = input.LA(1);

                         
                        int index42_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_Python()) ) {s = 35;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index42_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA42_9 = input.LA(1);

                         
                        int index42_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_Python()) ) {s = 35;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index42_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA42_10 = input.LA(1);

                         
                        int index42_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_Python()) ) {s = 35;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index42_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA42_11 = input.LA(1);

                         
                        int index42_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_Python()) ) {s = 35;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index42_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA42_12 = input.LA(1);

                         
                        int index42_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_Python()) ) {s = 35;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index42_12);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA42_13 = input.LA(1);

                         
                        int index42_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_Python()) ) {s = 35;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index42_13);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA42_14 = input.LA(1);

                         
                        int index42_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_Python()) ) {s = 35;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index42_14);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA42_15 = input.LA(1);

                         
                        int index42_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_Python()) ) {s = 35;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index42_15);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA42_16 = input.LA(1);

                         
                        int index42_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_Python()) ) {s = 35;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index42_16);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA42_17 = input.LA(1);

                         
                        int index42_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_Python()) ) {s = 35;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index42_17);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA42_18 = input.LA(1);

                         
                        int index42_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_Python()) ) {s = 35;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index42_18);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA42_19 = input.LA(1);

                         
                        int index42_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_Python()) ) {s = 35;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index42_19);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA42_20 = input.LA(1);

                         
                        int index42_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_Python()) ) {s = 35;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index42_20);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA42_21 = input.LA(1);

                         
                        int index42_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_Python()) ) {s = 35;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index42_21);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA42_22 = input.LA(1);

                         
                        int index42_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_Python()) ) {s = 35;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index42_22);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA42_23 = input.LA(1);

                         
                        int index42_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_Python()) ) {s = 35;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index42_23);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA42_24 = input.LA(1);

                         
                        int index42_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_Python()) ) {s = 35;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index42_24);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA42_25 = input.LA(1);

                         
                        int index42_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_Python()) ) {s = 35;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index42_25);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA42_26 = input.LA(1);

                         
                        int index42_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_Python()) ) {s = 35;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index42_26);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA42_27 = input.LA(1);

                         
                        int index42_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_Python()) ) {s = 35;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index42_27);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA42_28 = input.LA(1);

                         
                        int index42_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_Python()) ) {s = 35;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index42_28);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA42_29 = input.LA(1);

                         
                        int index42_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_Python()) ) {s = 35;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index42_29);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA42_30 = input.LA(1);

                         
                        int index42_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_Python()) ) {s = 35;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index42_30);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA42_31 = input.LA(1);

                         
                        int index42_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_Python()) ) {s = 35;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index42_31);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA42_32 = input.LA(1);

                         
                        int index42_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_Python()) ) {s = 35;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index42_32);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA42_33 = input.LA(1);

                         
                        int index42_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_Python()) ) {s = 35;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index42_33);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA42_34 = input.LA(1);

                         
                        int index42_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_Python()) ) {s = 35;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index42_34);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 42, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA40_eotS =
        "\50\uffff";
    static final String DFA40_eofS =
        "\50\uffff";
    static final String DFA40_minS =
        "\2\7\46\uffff";
    static final String DFA40_maxS =
        "\1\62\1\u00a0\46\uffff";
    static final String DFA40_acceptS =
        "\2\uffff\1\2\1\uffff\1\1\43\uffff";
    static final String DFA40_specialS =
        "\50\uffff}>";
    static final String[] DFA40_transitionS = {
            "\1\2\47\uffff\1\1\2\uffff\1\2",
            "\1\2\1\uffff\1\4\24\uffff\2\4\13\uffff\1\4\6\uffff\1\2\30\uffff"+
            "\2\4\3\uffff\2\4\1\uffff\1\4\1\uffff\7\4\5\uffff\1\4\3\uffff"+
            "\1\4\1\uffff\1\4\2\uffff\1\4\3\uffff\12\4\6\uffff\1\4\37\uffff"+
            "\3\4",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA40_eot = DFA.unpackEncodedString(DFA40_eotS);
    static final short[] DFA40_eof = DFA.unpackEncodedString(DFA40_eofS);
    static final char[] DFA40_min = DFA.unpackEncodedStringToUnsignedChars(DFA40_minS);
    static final char[] DFA40_max = DFA.unpackEncodedStringToUnsignedChars(DFA40_maxS);
    static final short[] DFA40_accept = DFA.unpackEncodedString(DFA40_acceptS);
    static final short[] DFA40_special = DFA.unpackEncodedString(DFA40_specialS);
    static final short[][] DFA40_transition;

    static {
        int numStates = DFA40_transitionS.length;
        DFA40_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA40_transition[i] = DFA.unpackEncodedString(DFA40_transitionS[i]);
        }
    }

    class DFA40 extends DFA {

        public DFA40(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 40;
            this.eot = DFA40_eot;
            this.eof = DFA40_eof;
            this.min = DFA40_min;
            this.max = DFA40_max;
            this.accept = DFA40_accept;
            this.special = DFA40_special;
            this.transition = DFA40_transition;
        }
        public String getDescription() {
            return "()* loopback of 758:39: ( options {k=2; } : COMMA t+= test[expr_contextType.Load] )*";
        }
    }
    static final String DFA51_eotS =
        "\4\uffff";
    static final String DFA51_eofS =
        "\4\uffff";
    static final String DFA51_minS =
        "\2\11\2\uffff";
    static final String DFA51_maxS =
        "\1\12\1\33\2\uffff";
    static final String DFA51_acceptS =
        "\2\uffff\1\1\1\2";
    static final String DFA51_specialS =
        "\4\uffff}>";
    static final String[] DFA51_transitionS = {
            "\1\2\1\1",
            "\1\2\1\1\20\uffff\1\3",
            "",
            ""
    };

    static final short[] DFA51_eot = DFA.unpackEncodedString(DFA51_eotS);
    static final short[] DFA51_eof = DFA.unpackEncodedString(DFA51_eofS);
    static final char[] DFA51_min = DFA.unpackEncodedStringToUnsignedChars(DFA51_minS);
    static final char[] DFA51_max = DFA.unpackEncodedStringToUnsignedChars(DFA51_maxS);
    static final short[] DFA51_accept = DFA.unpackEncodedString(DFA51_acceptS);
    static final short[] DFA51_special = DFA.unpackEncodedString(DFA51_specialS);
    static final short[][] DFA51_transition;

    static {
        int numStates = DFA51_transitionS.length;
        DFA51_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA51_transition[i] = DFA.unpackEncodedString(DFA51_transitionS[i]);
        }
    }

    class DFA51 extends DFA {

        public DFA51(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 51;
            this.eot = DFA51_eot;
            this.eof = DFA51_eof;
            this.min = DFA51_min;
            this.max = DFA51_max;
            this.accept = DFA51_accept;
            this.special = DFA51_special;
            this.transition = DFA51_transition;
        }
        public String getDescription() {
            return "919:12: ( (d+= DOT )* dotted_name | (d+= DOT )+ )";
        }
    }
    static final String DFA78_eotS =
        "\34\uffff";
    static final String DFA78_eofS =
        "\1\2\33\uffff";
    static final String DFA78_minS =
        "\1\7\1\0\32\uffff";
    static final String DFA78_maxS =
        "\1\125\1\0\32\uffff";
    static final String DFA78_acceptS =
        "\2\uffff\1\2\30\uffff\1\1";
    static final String DFA78_specialS =
        "\1\uffff\1\0\32\uffff}>";
    static final String[] DFA78_transitionS = {
            "\1\2\1\uffff\1\2\2\uffff\1\2\13\uffff\1\2\1\uffff\1\1\21\uffff"+
            "\4\2\2\uffff\15\2\23\uffff\1\2\1\uffff\2\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA78_eot = DFA.unpackEncodedString(DFA78_eotS);
    static final short[] DFA78_eof = DFA.unpackEncodedString(DFA78_eofS);
    static final char[] DFA78_min = DFA.unpackEncodedStringToUnsignedChars(DFA78_minS);
    static final char[] DFA78_max = DFA.unpackEncodedStringToUnsignedChars(DFA78_maxS);
    static final short[] DFA78_accept = DFA.unpackEncodedString(DFA78_acceptS);
    static final short[] DFA78_special = DFA.unpackEncodedString(DFA78_specialS);
    static final short[][] DFA78_transition;

    static {
        int numStates = DFA78_transitionS.length;
        DFA78_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA78_transition[i] = DFA.unpackEncodedString(DFA78_transitionS[i]);
        }
    }

    class DFA78 extends DFA {

        public DFA78(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 78;
            this.eot = DFA78_eot;
            this.eof = DFA78_eof;
            this.min = DFA78_min;
            this.max = DFA78_max;
            this.accept = DFA78_accept;
            this.special = DFA78_special;
            this.transition = DFA78_transition;
        }
        public String getDescription() {
            return "1229:7: ( ( IF or_test[null] ORELSE )=> IF o2= or_test[ctype] ORELSE e= test[expr_contextType.Load] | -> or_test )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA78_1 = input.LA(1);

                         
                        int index78_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_Python()) ) {s = 27;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index78_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 78, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA87_eotS =
        "\15\uffff";
    static final String DFA87_eofS =
        "\15\uffff";
    static final String DFA87_minS =
        "\1\34\11\uffff\1\11\2\uffff";
    static final String DFA87_maxS =
        "\1\106\11\uffff\1\u00a0\2\uffff";
    static final String DFA87_acceptS =
        "\1\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\uffff\1\13\1\12";
    static final String DFA87_specialS =
        "\15\uffff}>";
    static final String[] DFA87_transitionS = {
            "\1\10\1\12\1\uffff\1\11\40\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\7",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\14\25\uffff\1\13\13\uffff\1\14\37\uffff\2\14\3\uffff\2\14"+
            "\1\uffff\1\14\1\uffff\7\14\5\uffff\1\14\3\uffff\1\14\1\uffff"+
            "\1\14\2\uffff\1\14\3\uffff\12\14\6\uffff\1\14\37\uffff\3\14",
            "",
            ""
    };

    static final short[] DFA87_eot = DFA.unpackEncodedString(DFA87_eotS);
    static final short[] DFA87_eof = DFA.unpackEncodedString(DFA87_eofS);
    static final char[] DFA87_min = DFA.unpackEncodedStringToUnsignedChars(DFA87_minS);
    static final char[] DFA87_max = DFA.unpackEncodedStringToUnsignedChars(DFA87_maxS);
    static final short[] DFA87_accept = DFA.unpackEncodedString(DFA87_acceptS);
    static final short[] DFA87_special = DFA.unpackEncodedString(DFA87_specialS);
    static final short[][] DFA87_transition;

    static {
        int numStates = DFA87_transitionS.length;
        DFA87_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA87_transition[i] = DFA.unpackEncodedString(DFA87_transitionS[i]);
        }
    }

    class DFA87 extends DFA {

        public DFA87(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 87;
            this.eot = DFA87_eot;
            this.eof = DFA87_eof;
            this.min = DFA87_min;
            this.max = DFA87_max;
            this.accept = DFA87_accept;
            this.special = DFA87_special;
            this.transition = DFA87_transition;
        }
        public String getDescription() {
            return "1325:1: comp_op returns [cmpopType op] : ( LESS | GREATER | EQUAL | GREATEREQUAL | LESSEQUAL | ALT_NOTEQUAL | NOTEQUAL | IN | NOT IN | IS | IS NOT );";
        }
    }
    static final String DFA110_eotS =
        "\20\uffff";
    static final String DFA110_eofS =
        "\20\uffff";
    static final String DFA110_minS =
        "\1\11\13\uffff\1\11\3\uffff";
    static final String DFA110_maxS =
        "\1\u00a0\13\uffff\1\u0085\3\uffff";
    static final String DFA110_acceptS =
        "\1\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\uffff"+
        "\1\14\1\15\1\16";
    static final String DFA110_specialS =
        "\20\uffff}>";
    static final String[] DFA110_transitionS = {
            "\1\5\41\uffff\1\1\45\uffff\1\2\1\uffff\1\3\1\uffff\1\4\1\6\1"+
            "\7\1\10\1\11\1\12\1\15\5\uffff\1\15\3\uffff\1\16\1\uffff\1\16"+
            "\2\uffff\1\16\3\uffff\1\13\1\14\10\13\6\uffff\1\17\37\uffff"+
            "\3\17",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\17\173\uffff\1\13",
            "",
            "",
            ""
    };

    static final short[] DFA110_eot = DFA.unpackEncodedString(DFA110_eotS);
    static final short[] DFA110_eof = DFA.unpackEncodedString(DFA110_eofS);
    static final char[] DFA110_min = DFA.unpackEncodedStringToUnsignedChars(DFA110_minS);
    static final char[] DFA110_max = DFA.unpackEncodedStringToUnsignedChars(DFA110_maxS);
    static final short[] DFA110_accept = DFA.unpackEncodedString(DFA110_acceptS);
    static final short[] DFA110_special = DFA.unpackEncodedString(DFA110_specialS);
    static final short[][] DFA110_transition;

    static {
        int numStates = DFA110_transitionS.length;
        DFA110_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA110_transition[i] = DFA.unpackEncodedString(DFA110_transitionS[i]);
        }
    }

    class DFA110 extends DFA {

        public DFA110(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 110;
            this.eot = DFA110_eot;
            this.eof = DFA110_eof;
            this.min = DFA110_min;
            this.max = DFA110_max;
            this.accept = DFA110_accept;
            this.special = DFA110_special;
            this.transition = DFA110_transition;
        }
        public String getDescription() {
            return "1652:1: atom returns [Token lparen = null] : ( LPAREN ( yield_expr | testlist_gexp -> testlist_gexp | ) RPAREN | LBRACK ( listmaker[$LBRACK] -> listmaker | ) RBRACK | LCURLY ( dictmaker | ) RCURLY | lb= BACKQUOTE testlist[expr_contextType.Load] rb= BACKQUOTE | NAME | INT | LONGINT | FLOAT | COMPLEX | (S+= STRING )+ | sql_stmt -> sql_stmt | prolog_stmt -> prolog_stmt | asp_stmt -> asp_stmt | sim_stmt -> sim_stmt );";
        }
    }
    static final String DFA125_eotS =
        "\12\uffff";
    static final String DFA125_eofS =
        "\12\uffff";
    static final String DFA125_minS =
        "\1\145\1\134\10\uffff";
    static final String DFA125_maxS =
        "\1\152\1\146\10\uffff";
    static final String DFA125_acceptS =
        "\2\uffff\1\7\1\10\1\1\1\2\1\3\1\4\1\5\1\6";
    static final String DFA125_specialS =
        "\12\uffff}>";
    static final String[] DFA125_transitionS = {
            "\1\1\1\uffff\1\2\2\uffff\1\3",
            "\1\4\1\6\1\7\1\10\1\11\5\uffff\1\5",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA125_eot = DFA.unpackEncodedString(DFA125_eotS);
    static final short[] DFA125_eof = DFA.unpackEncodedString(DFA125_eofS);
    static final char[] DFA125_min = DFA.unpackEncodedStringToUnsignedChars(DFA125_minS);
    static final char[] DFA125_max = DFA.unpackEncodedStringToUnsignedChars(DFA125_maxS);
    static final short[] DFA125_accept = DFA.unpackEncodedString(DFA125_acceptS);
    static final short[] DFA125_special = DFA.unpackEncodedString(DFA125_specialS);
    static final short[][] DFA125_transition;

    static {
        int numStates = DFA125_transitionS.length;
        DFA125_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA125_transition[i] = DFA.unpackEncodedString(DFA125_transitionS[i]);
        }
    }

    class DFA125 extends DFA {

        public DFA125(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 125;
            this.eot = DFA125_eot;
            this.eof = DFA125_eof;
            this.min = DFA125_min;
            this.max = DFA125_max;
            this.accept = DFA125_accept;
            this.special = DFA125_special;
            this.transition = DFA125_transition;
        }
        public String getDescription() {
            return "1913:2: ( ( ASP PRLO aspload RBRACK ( PLUS )? DOT -> ^( PRLO[$asp_stmt.start,actions.castExprs($asp_stmt::exprs), $expr::ctype, $asp_stmt::strings, $asp_stmt::append, true, $asp_stmt::dir] ) ) | ( ASP ASPBLANKQ -> ^( ASPBLANKQ[$asp_stmt.start,actions.castExprs($asp_stmt::exprs), $expr::ctype, $asp_stmt::strings, $asp_stmt::append, true, $asp_stmt::dir] ) ) | ( ASP ASPPRINTDB -> ^( ASPPRINTDB[$asp_stmt.start,actions.castExprs($asp_stmt::exprs), $expr::ctype, $asp_stmt::strings, $asp_stmt::append, true, $asp_stmt::dir] ) ) | ( ASP PRQO aspquery DOT -> ^( PRQO[$asp_stmt.start,actions.castExprs($asp_stmt::exprs), $expr::ctype, $asp_stmt::strings, $asp_stmt::append, true, $asp_stmt::dir] ) ) | ( ASP PRIO aspquery DOT -> ^( PRQO[$asp_stmt.start,actions.castExprs($asp_stmt::exprs), $expr::ctype, $asp_stmt::strings, $asp_stmt::append, true, $asp_stmt::dir] ) ) | ( ASP PRSO aspsave RBRACK ( PLUS )? DOT -> ^( PRSO[$asp_stmt.start, actions.castExprs($asp_stmt::exprs), $expr::ctype, $asp_stmt::strings, $asp_stmt::append, true, $asp_stmt::dir] ) ) | ( ASP_SELECT ( REG_FACT | GROUP_FACT ) NAME -> ^( ASP_SELECT[$asp_stmt.start, actions.castExprs($asp_stmt::exprs), $expr::ctype, $asp_stmt::strings, $asp_stmt::append, true, $asp_stmt::dir] ) ) | ( ASP_PATH aspdir -> ^( ASP_PATH[$asp_stmt.start,actions.castExprs($asp_stmt::exprs), $expr::ctype, $asp_stmt::strings, $asp_stmt::append, true, $asp_stmt::dir] ) ) )";
        }
    }
    static final String DFA177_eotS =
        "\10\uffff";
    static final String DFA177_eofS =
        "\10\uffff";
    static final String DFA177_minS =
        "\2\11\1\uffff\1\12\1\11\2\12\1\uffff";
    static final String DFA177_maxS =
        "\2\u00a0\1\uffff\1\121\1\u00a0\1\u0086\1\121\1\uffff";
    static final String DFA177_acceptS =
        "\2\uffff\1\2\4\uffff\1\1";
    static final String DFA177_specialS =
        "\10\uffff}>";
    static final String[] DFA177_transitionS = {
            "\1\2\41\uffff\1\1\37\uffff\2\2\3\uffff\2\2\1\uffff\1\2\1\uffff"+
            "\7\2\5\uffff\1\2\3\uffff\1\2\1\uffff\1\2\2\uffff\1\2\3\uffff"+
            "\12\2\6\uffff\1\2\37\uffff\3\2",
            "\1\3\24\uffff\2\2\11\uffff\1\2\1\uffff\2\2\36\uffff\2\2\3\uffff"+
            "\2\2\1\uffff\1\2\1\uffff\7\2\5\uffff\1\2\3\uffff\1\2\1\uffff"+
            "\1\2\2\uffff\1\2\3\uffff\12\2\6\uffff\1\2\37\uffff\3\2",
            "",
            "\2\2\14\uffff\1\2\1\uffff\1\2\1\uffff\2\2\1\uffff\2\2\12\uffff"+
            "\1\2\1\5\2\uffff\1\4\2\2\15\uffff\21\2\1\uffff\1\2",
            "\1\6\24\uffff\2\2\13\uffff\2\2\36\uffff\2\2\3\uffff\2\2\1\uffff"+
            "\1\2\1\uffff\7\2\5\uffff\1\2\3\uffff\1\2\1\uffff\1\2\2\uffff"+
            "\1\2\3\uffff\12\2\6\uffff\1\2\37\uffff\3\2",
            "\1\2\40\uffff\2\2\2\uffff\4\2\14\uffff\1\2\7\uffff\11\2\1\uffff"+
            "\1\2\64\uffff\1\7",
            "\2\2\16\uffff\1\2\1\uffff\2\2\1\uffff\2\2\12\uffff\1\2\1\5"+
            "\2\uffff\1\4\2\2\15\uffff\21\2\1\uffff\1\2",
            ""
    };

    static final short[] DFA177_eot = DFA.unpackEncodedString(DFA177_eotS);
    static final short[] DFA177_eof = DFA.unpackEncodedString(DFA177_eofS);
    static final char[] DFA177_min = DFA.unpackEncodedStringToUnsignedChars(DFA177_minS);
    static final char[] DFA177_max = DFA.unpackEncodedStringToUnsignedChars(DFA177_maxS);
    static final short[] DFA177_accept = DFA.unpackEncodedString(DFA177_acceptS);
    static final short[] DFA177_special = DFA.unpackEncodedString(DFA177_specialS);
    static final short[][] DFA177_transition;

    static {
        int numStates = DFA177_transitionS.length;
        DFA177_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA177_transition[i] = DFA.unpackEncodedString(DFA177_transitionS[i]);
        }
    }

    class DFA177 extends DFA {

        public DFA177(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 177;
            this.eot = DFA177_eot;
            this.eof = DFA177_eof;
            this.min = DFA177_min;
            this.max = DFA177_max;
            this.accept = DFA177_accept;
            this.special = DFA177_special;
            this.transition = DFA177_transition;
        }
        public String getDescription() {
            return "2127:9: (s1= sqlinsertfrag )?";
        }
    }
    static final String DFA211_eotS =
        "\41\uffff";
    static final String DFA211_eofS =
        "\41\uffff";
    static final String DFA211_minS =
        "\1\11\40\uffff";
    static final String DFA211_maxS =
        "\1\u00a0\40\uffff";
    static final String DFA211_acceptS =
        "\1\uffff\1\1\1\2\36\uffff";
    static final String DFA211_specialS =
        "\41\uffff}>";
    static final String[] DFA211_transitionS = {
            "\1\2\41\uffff\1\1\37\uffff\2\2\3\uffff\2\2\1\uffff\1\2\1\uffff"+
            "\7\2\5\uffff\1\2\3\uffff\1\2\1\uffff\1\2\2\uffff\1\2\3\uffff"+
            "\12\2\6\uffff\1\2\37\uffff\3\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA211_eot = DFA.unpackEncodedString(DFA211_eotS);
    static final short[] DFA211_eof = DFA.unpackEncodedString(DFA211_eofS);
    static final char[] DFA211_min = DFA.unpackEncodedStringToUnsignedChars(DFA211_minS);
    static final char[] DFA211_max = DFA.unpackEncodedStringToUnsignedChars(DFA211_maxS);
    static final short[] DFA211_accept = DFA.unpackEncodedString(DFA211_acceptS);
    static final short[] DFA211_special = DFA.unpackEncodedString(DFA211_specialS);
    static final short[][] DFA211_transition;

    static {
        int numStates = DFA211_transitionS.length;
        DFA211_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA211_transition[i] = DFA.unpackEncodedString(DFA211_transitionS[i]);
        }
    }

    class DFA211 extends DFA {

        public DFA211(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 211;
            this.eot = DFA211_eot;
            this.eof = DFA211_eof;
            this.min = DFA211_min;
            this.max = DFA211_max;
            this.accept = DFA211_accept;
            this.special = DFA211_special;
            this.transition = DFA211_transition;
        }
        public String getDescription() {
            return "2193:61: ( sqlsubquery | sqlexpr )";
        }
    }
    static final String DFA212_eotS =
        "\41\uffff";
    static final String DFA212_eofS =
        "\41\uffff";
    static final String DFA212_minS =
        "\1\11\40\uffff";
    static final String DFA212_maxS =
        "\1\u00a0\40\uffff";
    static final String DFA212_acceptS =
        "\1\uffff\1\1\1\2\36\uffff";
    static final String DFA212_specialS =
        "\41\uffff}>";
    static final String[] DFA212_transitionS = {
            "\1\2\41\uffff\1\1\37\uffff\2\2\3\uffff\2\2\1\uffff\1\2\1\uffff"+
            "\7\2\5\uffff\1\2\3\uffff\1\2\1\uffff\1\2\2\uffff\1\2\3\uffff"+
            "\12\2\6\uffff\1\2\37\uffff\3\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA212_eot = DFA.unpackEncodedString(DFA212_eotS);
    static final short[] DFA212_eof = DFA.unpackEncodedString(DFA212_eofS);
    static final char[] DFA212_min = DFA.unpackEncodedStringToUnsignedChars(DFA212_minS);
    static final char[] DFA212_max = DFA.unpackEncodedStringToUnsignedChars(DFA212_maxS);
    static final short[] DFA212_accept = DFA.unpackEncodedString(DFA212_acceptS);
    static final short[] DFA212_special = DFA.unpackEncodedString(DFA212_specialS);
    static final short[][] DFA212_transition;

    static {
        int numStates = DFA212_transitionS.length;
        DFA212_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA212_transition[i] = DFA.unpackEncodedString(DFA212_transitionS[i]);
        }
    }

    class DFA212 extends DFA {

        public DFA212(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 212;
            this.eot = DFA212_eot;
            this.eof = DFA212_eof;
            this.min = DFA212_min;
            this.max = DFA212_max;
            this.accept = DFA212_accept;
            this.special = DFA212_special;
            this.transition = DFA212_transition;
        }
        public String getDescription() {
            return "2194:63: ( sqlsubquery | sqlexpr )";
        }
    }
    static final String DFA228_eotS =
        "\12\uffff";
    static final String DFA228_eofS =
        "\12\uffff";
    static final String DFA228_minS =
        "\1\57\1\u00a3\5\uffff\1\u00a8\1\11\1\uffff";
    static final String DFA228_maxS =
        "\2\u00a7\5\uffff\1\u00a8\1\11\1\uffff";
    static final String DFA228_acceptS =
        "\2\uffff\1\1\1\2\3\1\2\uffff\1\1";
    static final String DFA228_specialS =
        "\12\uffff}>";
    static final String[] DFA228_transitionS = {
            "\1\1\2\uffff\1\3\160\uffff\1\2\1\uffff\3\2",
            "\1\4\1\uffff\1\5\1\6\1\7",
            "",
            "",
            "",
            "",
            "",
            "\1\10",
            "\1\11",
            ""
    };

    static final short[] DFA228_eot = DFA.unpackEncodedString(DFA228_eotS);
    static final short[] DFA228_eof = DFA.unpackEncodedString(DFA228_eofS);
    static final char[] DFA228_min = DFA.unpackEncodedStringToUnsignedChars(DFA228_minS);
    static final char[] DFA228_max = DFA.unpackEncodedStringToUnsignedChars(DFA228_maxS);
    static final short[] DFA228_accept = DFA.unpackEncodedString(DFA228_acceptS);
    static final short[] DFA228_special = DFA.unpackEncodedString(DFA228_specialS);
    static final short[][] DFA228_transition;

    static {
        int numStates = DFA228_transitionS.length;
        DFA228_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA228_transition[i] = DFA.unpackEncodedString(DFA228_transitionS[i]);
        }
    }

    class DFA228 extends DFA {

        public DFA228(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 228;
            this.eot = DFA228_eot;
            this.eof = DFA228_eof;
            this.min = DFA228_min;
            this.max = DFA228_max;
            this.accept = DFA228_accept;
            this.special = DFA228_special;
            this.transition = DFA228_transition;
        }
        public String getDescription() {
            return "2286:197: ( ( COMMA )? eva_options )?";
        }
    }
    static final String DFA249_eotS =
        "\46\uffff";
    static final String DFA249_eofS =
        "\46\uffff";
    static final String DFA249_minS =
        "\1\54\1\11\44\uffff";
    static final String DFA249_maxS =
        "\1\57\1\u00a0\44\uffff";
    static final String DFA249_acceptS =
        "\2\uffff\1\2\1\uffff\1\1\41\uffff";
    static final String DFA249_specialS =
        "\46\uffff}>";
    static final String[] DFA249_transitionS = {
            "\1\2\2\uffff\1\1",
            "\1\4\24\uffff\2\4\13\uffff\1\4\1\2\36\uffff\2\4\3\uffff\2\4"+
            "\1\uffff\1\4\1\uffff\7\4\5\uffff\1\4\3\uffff\1\4\1\uffff\1\4"+
            "\2\uffff\1\4\3\uffff\12\4\6\uffff\1\4\37\uffff\3\4",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA249_eot = DFA.unpackEncodedString(DFA249_eotS);
    static final short[] DFA249_eof = DFA.unpackEncodedString(DFA249_eofS);
    static final char[] DFA249_min = DFA.unpackEncodedStringToUnsignedChars(DFA249_minS);
    static final char[] DFA249_max = DFA.unpackEncodedStringToUnsignedChars(DFA249_maxS);
    static final short[] DFA249_accept = DFA.unpackEncodedString(DFA249_acceptS);
    static final short[] DFA249_special = DFA.unpackEncodedString(DFA249_specialS);
    static final short[][] DFA249_transition;

    static {
        int numStates = DFA249_transitionS.length;
        DFA249_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA249_transition[i] = DFA.unpackEncodedString(DFA249_transitionS[i]);
        }
    }

    class DFA249 extends DFA {

        public DFA249(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 249;
            this.eot = DFA249_eot;
            this.eof = DFA249_eof;
            this.min = DFA249_min;
            this.max = DFA249_max;
            this.accept = DFA249_accept;
            this.special = DFA249_special;
            this.transition = DFA249_transition;
        }
        public String getDescription() {
            return "()* loopback of 2426:11: ( options {k=2; } : c1= COMMA t+= test[$expr::ctype] )*";
        }
    }
    static final String DFA262_eotS =
        "\47\uffff";
    static final String DFA262_eofS =
        "\47\uffff";
    static final String DFA262_minS =
        "\1\11\1\uffff\42\0\3\uffff";
    static final String DFA262_maxS =
        "\1\u00a0\1\uffff\42\0\3\uffff";
    static final String DFA262_acceptS =
        "\1\uffff\1\1\42\uffff\1\3\1\2\1\4";
    static final String DFA262_specialS =
        "\1\0\1\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14"+
        "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
        "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42\3\uffff}>";
    static final String[] DFA262_transitionS = {
            "\1\12\1\1\23\uffff\1\43\1\2\13\uffff\1\6\1\uffff\1\44\35\uffff"+
            "\1\3\1\4\3\uffff\1\5\1\7\1\uffff\1\10\1\uffff\1\11\1\13\1\14"+
            "\1\15\1\16\1\17\1\32\5\uffff\1\33\3\uffff\1\34\1\uffff\1\35"+
            "\2\uffff\1\36\3\uffff\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
            "\1\30\1\31\6\uffff\1\40\37\uffff\1\37\1\41\1\42",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            ""
    };

    static final short[] DFA262_eot = DFA.unpackEncodedString(DFA262_eotS);
    static final short[] DFA262_eof = DFA.unpackEncodedString(DFA262_eofS);
    static final char[] DFA262_min = DFA.unpackEncodedStringToUnsignedChars(DFA262_minS);
    static final char[] DFA262_max = DFA.unpackEncodedStringToUnsignedChars(DFA262_maxS);
    static final short[] DFA262_accept = DFA.unpackEncodedString(DFA262_acceptS);
    static final short[] DFA262_special = DFA.unpackEncodedString(DFA262_specialS);
    static final short[][] DFA262_transition;

    static {
        int numStates = DFA262_transitionS.length;
        DFA262_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA262_transition[i] = DFA.unpackEncodedString(DFA262_transitionS[i]);
        }
    }

    class DFA262 extends DFA {

        public DFA262(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 262;
            this.eot = DFA262_eot;
            this.eof = DFA262_eof;
            this.min = DFA262_min;
            this.max = DFA262_max;
            this.accept = DFA262_accept;
            this.special = DFA262_special;
            this.transition = DFA262_transition;
        }
        public String getDescription() {
            return "2511:1: subscript returns [slice sltype] : (d1= DOT DOT DOT | ( test[null] COLON )=>lower= test[expr_contextType.Load] (c1= COLON (upper1= test[expr_contextType.Load] )? ( sliceop )? )? | ( COLON )=>c2= COLON (upper2= test[expr_contextType.Load] )? ( sliceop )? | test[expr_contextType.Load] );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA262_0 = input.LA(1);

                         
                        int index262_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA262_0==DOT) ) {s = 1;}

                        else if ( (LA262_0==NOT) ) {s = 2;}

                        else if ( (LA262_0==PLUS) ) {s = 3;}

                        else if ( (LA262_0==MINUS) ) {s = 4;}

                        else if ( (LA262_0==TILDE) ) {s = 5;}

                        else if ( (LA262_0==LPAREN) ) {s = 6;}

                        else if ( (LA262_0==LBRACK) ) {s = 7;}

                        else if ( (LA262_0==LCURLY) ) {s = 8;}

                        else if ( (LA262_0==BACKQUOTE) ) {s = 9;}

                        else if ( (LA262_0==NAME) ) {s = 10;}

                        else if ( (LA262_0==INT) ) {s = 11;}

                        else if ( (LA262_0==LONGINT) ) {s = 12;}

                        else if ( (LA262_0==FLOAT) ) {s = 13;}

                        else if ( (LA262_0==COMPLEX) ) {s = 14;}

                        else if ( (LA262_0==STRING) ) {s = 15;}

                        else if ( (LA262_0==SELECT) ) {s = 16;}

                        else if ( (LA262_0==INSERT) ) {s = 17;}

                        else if ( (LA262_0==CREATE) ) {s = 18;}

                        else if ( (LA262_0==DROP) ) {s = 19;}

                        else if ( (LA262_0==UPDATE) ) {s = 20;}

                        else if ( (LA262_0==SQL_DELETE) ) {s = 21;}

                        else if ( (LA262_0==ALTER) ) {s = 22;}

                        else if ( (LA262_0==MAKECONNECT) ) {s = 23;}

                        else if ( (LA262_0==ASPSELECT) ) {s = 24;}

                        else if ( (LA262_0==RDFSELECT) ) {s = 25;}

                        else if ( (LA262_0==PRO) ) {s = 26;}

                        else if ( (LA262_0==PRO_SELECT) ) {s = 27;}

                        else if ( (LA262_0==ASP) ) {s = 28;}

                        else if ( (LA262_0==ASP_SELECT) ) {s = 29;}

                        else if ( (LA262_0==ASP_PATH) ) {s = 30;}

                        else if ( (LA262_0==MODIFY) ) {s = 31;}

                        else if ( (LA262_0==CAPSFROM) ) {s = 32;}

                        else if ( (LA262_0==CAPSCLASS) ) {s = 33;}

                        else if ( (LA262_0==SUBCLASS) ) {s = 34;}

                        else if ( (LA262_0==LAMBDA) ) {s = 35;}

                        else if ( (LA262_0==COLON) && (synpred14_Python())) {s = 36;}

                         
                        input.seek(index262_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA262_2 = input.LA(1);

                         
                        int index262_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred13_Python()) ) {s = 37;}

                        else if ( (true) ) {s = 38;}

                         
                        input.seek(index262_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA262_3 = input.LA(1);

                         
                        int index262_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred13_Python()) ) {s = 37;}

                        else if ( (true) ) {s = 38;}

                         
                        input.seek(index262_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA262_4 = input.LA(1);

                         
                        int index262_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred13_Python()) ) {s = 37;}

                        else if ( (true) ) {s = 38;}

                         
                        input.seek(index262_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA262_5 = input.LA(1);

                         
                        int index262_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred13_Python()) ) {s = 37;}

                        else if ( (true) ) {s = 38;}

                         
                        input.seek(index262_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA262_6 = input.LA(1);

                         
                        int index262_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred13_Python()) ) {s = 37;}

                        else if ( (true) ) {s = 38;}

                         
                        input.seek(index262_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA262_7 = input.LA(1);

                         
                        int index262_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred13_Python()) ) {s = 37;}

                        else if ( (true) ) {s = 38;}

                         
                        input.seek(index262_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA262_8 = input.LA(1);

                         
                        int index262_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred13_Python()) ) {s = 37;}

                        else if ( (true) ) {s = 38;}

                         
                        input.seek(index262_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA262_9 = input.LA(1);

                         
                        int index262_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred13_Python()) ) {s = 37;}

                        else if ( (true) ) {s = 38;}

                         
                        input.seek(index262_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA262_10 = input.LA(1);

                         
                        int index262_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred13_Python()) ) {s = 37;}

                        else if ( (true) ) {s = 38;}

                         
                        input.seek(index262_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA262_11 = input.LA(1);

                         
                        int index262_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred13_Python()) ) {s = 37;}

                        else if ( (true) ) {s = 38;}

                         
                        input.seek(index262_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA262_12 = input.LA(1);

                         
                        int index262_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred13_Python()) ) {s = 37;}

                        else if ( (true) ) {s = 38;}

                         
                        input.seek(index262_12);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA262_13 = input.LA(1);

                         
                        int index262_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred13_Python()) ) {s = 37;}

                        else if ( (true) ) {s = 38;}

                         
                        input.seek(index262_13);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA262_14 = input.LA(1);

                         
                        int index262_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred13_Python()) ) {s = 37;}

                        else if ( (true) ) {s = 38;}

                         
                        input.seek(index262_14);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA262_15 = input.LA(1);

                         
                        int index262_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred13_Python()) ) {s = 37;}

                        else if ( (true) ) {s = 38;}

                         
                        input.seek(index262_15);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA262_16 = input.LA(1);

                         
                        int index262_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred13_Python()) ) {s = 37;}

                        else if ( (true) ) {s = 38;}

                         
                        input.seek(index262_16);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA262_17 = input.LA(1);

                         
                        int index262_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred13_Python()) ) {s = 37;}

                        else if ( (true) ) {s = 38;}

                         
                        input.seek(index262_17);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA262_18 = input.LA(1);

                         
                        int index262_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred13_Python()) ) {s = 37;}

                        else if ( (true) ) {s = 38;}

                         
                        input.seek(index262_18);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA262_19 = input.LA(1);

                         
                        int index262_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred13_Python()) ) {s = 37;}

                        else if ( (true) ) {s = 38;}

                         
                        input.seek(index262_19);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA262_20 = input.LA(1);

                         
                        int index262_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred13_Python()) ) {s = 37;}

                        else if ( (true) ) {s = 38;}

                         
                        input.seek(index262_20);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA262_21 = input.LA(1);

                         
                        int index262_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred13_Python()) ) {s = 37;}

                        else if ( (true) ) {s = 38;}

                         
                        input.seek(index262_21);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA262_22 = input.LA(1);

                         
                        int index262_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred13_Python()) ) {s = 37;}

                        else if ( (true) ) {s = 38;}

                         
                        input.seek(index262_22);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA262_23 = input.LA(1);

                         
                        int index262_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred13_Python()) ) {s = 37;}

                        else if ( (true) ) {s = 38;}

                         
                        input.seek(index262_23);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA262_24 = input.LA(1);

                         
                        int index262_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred13_Python()) ) {s = 37;}

                        else if ( (true) ) {s = 38;}

                         
                        input.seek(index262_24);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA262_25 = input.LA(1);

                         
                        int index262_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred13_Python()) ) {s = 37;}

                        else if ( (true) ) {s = 38;}

                         
                        input.seek(index262_25);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA262_26 = input.LA(1);

                         
                        int index262_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred13_Python()) ) {s = 37;}

                        else if ( (true) ) {s = 38;}

                         
                        input.seek(index262_26);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA262_27 = input.LA(1);

                         
                        int index262_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred13_Python()) ) {s = 37;}

                        else if ( (true) ) {s = 38;}

                         
                        input.seek(index262_27);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA262_28 = input.LA(1);

                         
                        int index262_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred13_Python()) ) {s = 37;}

                        else if ( (true) ) {s = 38;}

                         
                        input.seek(index262_28);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA262_29 = input.LA(1);

                         
                        int index262_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred13_Python()) ) {s = 37;}

                        else if ( (true) ) {s = 38;}

                         
                        input.seek(index262_29);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA262_30 = input.LA(1);

                         
                        int index262_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred13_Python()) ) {s = 37;}

                        else if ( (true) ) {s = 38;}

                         
                        input.seek(index262_30);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA262_31 = input.LA(1);

                         
                        int index262_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred13_Python()) ) {s = 37;}

                        else if ( (true) ) {s = 38;}

                         
                        input.seek(index262_31);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA262_32 = input.LA(1);

                         
                        int index262_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred13_Python()) ) {s = 37;}

                        else if ( (true) ) {s = 38;}

                         
                        input.seek(index262_32);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA262_33 = input.LA(1);

                         
                        int index262_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred13_Python()) ) {s = 37;}

                        else if ( (true) ) {s = 38;}

                         
                        input.seek(index262_33);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA262_34 = input.LA(1);

                         
                        int index262_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred13_Python()) ) {s = 37;}

                        else if ( (true) ) {s = 38;}

                         
                        input.seek(index262_34);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA262_35 = input.LA(1);

                         
                        int index262_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred13_Python()) ) {s = 37;}

                        else if ( (true) ) {s = 38;}

                         
                        input.seek(index262_35);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 262, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA266_eotS =
        "\43\uffff";
    static final String DFA266_eofS =
        "\43\uffff";
    static final String DFA266_minS =
        "\1\11\40\0\2\uffff";
    static final String DFA266_maxS =
        "\1\u00a0\40\0\2\uffff";
    static final String DFA266_acceptS =
        "\41\uffff\1\1\1\2";
    static final String DFA266_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14"+
        "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
        "\1\32\1\33\1\34\1\35\1\36\1\37\2\uffff}>";
    static final String[] DFA266_transitionS = {
            "\1\10\41\uffff\1\4\37\uffff\1\1\1\2\3\uffff\1\3\1\5\1\uffff"+
            "\1\6\1\uffff\1\7\1\11\1\12\1\13\1\14\1\15\1\30\5\uffff\1\31"+
            "\3\uffff\1\32\1\uffff\1\33\2\uffff\1\34\3\uffff\1\16\1\17\1"+
            "\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\6\uffff\1\36\37\uffff"+
            "\1\35\1\37\1\40",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            ""
    };

    static final short[] DFA266_eot = DFA.unpackEncodedString(DFA266_eotS);
    static final short[] DFA266_eof = DFA.unpackEncodedString(DFA266_eofS);
    static final char[] DFA266_min = DFA.unpackEncodedStringToUnsignedChars(DFA266_minS);
    static final char[] DFA266_max = DFA.unpackEncodedStringToUnsignedChars(DFA266_maxS);
    static final short[] DFA266_accept = DFA.unpackEncodedString(DFA266_acceptS);
    static final short[] DFA266_special = DFA.unpackEncodedString(DFA266_specialS);
    static final short[][] DFA266_transition;

    static {
        int numStates = DFA266_transitionS.length;
        DFA266_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA266_transition[i] = DFA.unpackEncodedString(DFA266_transitionS[i]);
        }
    }

    class DFA266 extends DFA {

        public DFA266(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 266;
            this.eot = DFA266_eot;
            this.eof = DFA266_eof;
            this.min = DFA266_min;
            this.max = DFA266_max;
            this.accept = DFA266_accept;
            this.special = DFA266_special;
            this.transition = DFA266_transition;
        }
        public String getDescription() {
            return "2557:1: exprlist[expr_contextType ctype] returns [expr etype] : ( ( expr[null] COMMA )=>e+= expr[ctype] ( options {k=2; } : COMMA e+= expr[ctype] )* ( COMMA )? | expr[ctype] );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA266_1 = input.LA(1);

                         
                        int index266_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred15_Python()) ) {s = 33;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index266_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA266_2 = input.LA(1);

                         
                        int index266_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred15_Python()) ) {s = 33;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index266_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA266_3 = input.LA(1);

                         
                        int index266_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred15_Python()) ) {s = 33;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index266_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA266_4 = input.LA(1);

                         
                        int index266_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred15_Python()) ) {s = 33;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index266_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA266_5 = input.LA(1);

                         
                        int index266_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred15_Python()) ) {s = 33;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index266_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA266_6 = input.LA(1);

                         
                        int index266_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred15_Python()) ) {s = 33;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index266_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA266_7 = input.LA(1);

                         
                        int index266_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred15_Python()) ) {s = 33;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index266_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA266_8 = input.LA(1);

                         
                        int index266_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred15_Python()) ) {s = 33;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index266_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA266_9 = input.LA(1);

                         
                        int index266_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred15_Python()) ) {s = 33;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index266_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA266_10 = input.LA(1);

                         
                        int index266_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred15_Python()) ) {s = 33;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index266_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA266_11 = input.LA(1);

                         
                        int index266_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred15_Python()) ) {s = 33;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index266_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA266_12 = input.LA(1);

                         
                        int index266_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred15_Python()) ) {s = 33;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index266_12);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA266_13 = input.LA(1);

                         
                        int index266_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred15_Python()) ) {s = 33;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index266_13);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA266_14 = input.LA(1);

                         
                        int index266_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred15_Python()) ) {s = 33;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index266_14);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA266_15 = input.LA(1);

                         
                        int index266_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred15_Python()) ) {s = 33;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index266_15);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA266_16 = input.LA(1);

                         
                        int index266_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred15_Python()) ) {s = 33;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index266_16);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA266_17 = input.LA(1);

                         
                        int index266_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred15_Python()) ) {s = 33;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index266_17);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA266_18 = input.LA(1);

                         
                        int index266_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred15_Python()) ) {s = 33;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index266_18);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA266_19 = input.LA(1);

                         
                        int index266_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred15_Python()) ) {s = 33;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index266_19);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA266_20 = input.LA(1);

                         
                        int index266_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred15_Python()) ) {s = 33;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index266_20);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA266_21 = input.LA(1);

                         
                        int index266_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred15_Python()) ) {s = 33;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index266_21);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA266_22 = input.LA(1);

                         
                        int index266_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred15_Python()) ) {s = 33;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index266_22);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA266_23 = input.LA(1);

                         
                        int index266_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred15_Python()) ) {s = 33;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index266_23);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA266_24 = input.LA(1);

                         
                        int index266_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred15_Python()) ) {s = 33;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index266_24);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA266_25 = input.LA(1);

                         
                        int index266_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred15_Python()) ) {s = 33;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index266_25);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA266_26 = input.LA(1);

                         
                        int index266_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred15_Python()) ) {s = 33;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index266_26);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA266_27 = input.LA(1);

                         
                        int index266_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred15_Python()) ) {s = 33;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index266_27);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA266_28 = input.LA(1);

                         
                        int index266_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred15_Python()) ) {s = 33;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index266_28);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA266_29 = input.LA(1);

                         
                        int index266_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred15_Python()) ) {s = 33;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index266_29);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA266_30 = input.LA(1);

                         
                        int index266_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred15_Python()) ) {s = 33;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index266_30);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA266_31 = input.LA(1);

                         
                        int index266_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred15_Python()) ) {s = 33;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index266_31);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA266_32 = input.LA(1);

                         
                        int index266_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred15_Python()) ) {s = 33;}

                        else if ( (true) ) {s = 34;}

                         
                        input.seek(index266_32);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 266, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA264_eotS =
        "\44\uffff";
    static final String DFA264_eofS =
        "\44\uffff";
    static final String DFA264_minS =
        "\1\34\1\11\42\uffff";
    static final String DFA264_maxS =
        "\1\57\1\u00a0\42\uffff";
    static final String DFA264_acceptS =
        "\2\uffff\1\2\1\uffff\1\1\37\uffff";
    static final String DFA264_specialS =
        "\44\uffff}>";
    static final String[] DFA264_transitionS = {
            "\1\2\22\uffff\1\1",
            "\1\4\22\uffff\1\2\16\uffff\1\4\37\uffff\2\4\3\uffff\2\4\1\uffff"+
            "\1\4\1\uffff\7\4\5\uffff\1\4\3\uffff\1\4\1\uffff\1\4\2\uffff"+
            "\1\4\3\uffff\12\4\6\uffff\1\4\37\uffff\3\4",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA264_eot = DFA.unpackEncodedString(DFA264_eotS);
    static final short[] DFA264_eof = DFA.unpackEncodedString(DFA264_eofS);
    static final char[] DFA264_min = DFA.unpackEncodedStringToUnsignedChars(DFA264_minS);
    static final char[] DFA264_max = DFA.unpackEncodedStringToUnsignedChars(DFA264_maxS);
    static final short[] DFA264_accept = DFA.unpackEncodedString(DFA264_acceptS);
    static final short[] DFA264_special = DFA.unpackEncodedString(DFA264_specialS);
    static final short[][] DFA264_transition;

    static {
        int numStates = DFA264_transitionS.length;
        DFA264_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA264_transition[i] = DFA.unpackEncodedString(DFA264_transitionS[i]);
        }
    }

    class DFA264 extends DFA {

        public DFA264(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 264;
            this.eot = DFA264_eot;
            this.eof = DFA264_eof;
            this.min = DFA264_min;
            this.max = DFA264_max;
            this.accept = DFA264_accept;
            this.special = DFA264_special;
            this.transition = DFA264_transition;
        }
        public String getDescription() {
            return "()* loopback of 2559:44: ( options {k=2; } : COMMA e+= expr[ctype] )*";
        }
    }
    static final String DFA267_eotS =
        "\46\uffff";
    static final String DFA267_eofS =
        "\46\uffff";
    static final String DFA267_minS =
        "\2\7\44\uffff";
    static final String DFA267_maxS =
        "\1\62\1\u00a0\44\uffff";
    static final String DFA267_acceptS =
        "\2\uffff\1\2\3\uffff\1\1\37\uffff";
    static final String DFA267_specialS =
        "\46\uffff}>";
    static final String[] DFA267_transitionS = {
            "\1\2\47\uffff\1\1\2\uffff\1\2",
            "\1\2\1\uffff\1\6\41\uffff\1\6\6\uffff\1\2\30\uffff\2\6\3\uffff"+
            "\2\6\1\uffff\1\6\1\uffff\7\6\5\uffff\1\6\3\uffff\1\6\1\uffff"+
            "\1\6\2\uffff\1\6\3\uffff\12\6\6\uffff\1\6\37\uffff\3\6",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA267_eot = DFA.unpackEncodedString(DFA267_eotS);
    static final short[] DFA267_eof = DFA.unpackEncodedString(DFA267_eofS);
    static final char[] DFA267_min = DFA.unpackEncodedStringToUnsignedChars(DFA267_minS);
    static final char[] DFA267_max = DFA.unpackEncodedStringToUnsignedChars(DFA267_maxS);
    static final short[] DFA267_accept = DFA.unpackEncodedString(DFA267_acceptS);
    static final short[] DFA267_special = DFA.unpackEncodedString(DFA267_specialS);
    static final short[][] DFA267_transition;

    static {
        int numStates = DFA267_transitionS.length;
        DFA267_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA267_transition[i] = DFA.unpackEncodedString(DFA267_transitionS[i]);
        }
    }

    class DFA267 extends DFA {

        public DFA267(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 267;
            this.eot = DFA267_eot;
            this.eof = DFA267_eof;
            this.min = DFA267_min;
            this.max = DFA267_max;
            this.accept = DFA267_accept;
            this.special = DFA267_special;
            this.transition = DFA267_transition;
        }
        public String getDescription() {
            return "()* loopback of 2573:37: ( options {k=2; } : COMMA e+= expr[expr_contextType.Del] )*";
        }
    }
    static final String DFA271_eotS =
        "\45\uffff";
    static final String DFA271_eofS =
        "\45\uffff";
    static final String DFA271_minS =
        "\1\11\42\0\2\uffff";
    static final String DFA271_maxS =
        "\1\u00a0\42\0\2\uffff";
    static final String DFA271_acceptS =
        "\43\uffff\1\1\1\2";
    static final String DFA271_specialS =
        "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14"+
        "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
        "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41\2\uffff}>";
    static final String[] DFA271_transitionS = {
            "\1\11\24\uffff\1\42\1\1\13\uffff\1\5\37\uffff\1\2\1\3\3\uffff"+
            "\1\4\1\6\1\uffff\1\7\1\uffff\1\10\1\12\1\13\1\14\1\15\1\16\1"+
            "\31\5\uffff\1\32\3\uffff\1\33\1\uffff\1\34\2\uffff\1\35\3\uffff"+
            "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\6\uffff\1"+
            "\37\37\uffff\1\36\1\40\1\41",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            ""
    };

    static final short[] DFA271_eot = DFA.unpackEncodedString(DFA271_eotS);
    static final short[] DFA271_eof = DFA.unpackEncodedString(DFA271_eofS);
    static final char[] DFA271_min = DFA.unpackEncodedStringToUnsignedChars(DFA271_minS);
    static final char[] DFA271_max = DFA.unpackEncodedStringToUnsignedChars(DFA271_maxS);
    static final short[] DFA271_accept = DFA.unpackEncodedString(DFA271_acceptS);
    static final short[] DFA271_special = DFA.unpackEncodedString(DFA271_specialS);
    static final short[][] DFA271_transition;

    static {
        int numStates = DFA271_transitionS.length;
        DFA271_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA271_transition[i] = DFA.unpackEncodedString(DFA271_transitionS[i]);
        }
    }

    class DFA271 extends DFA {

        public DFA271(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 271;
            this.eot = DFA271_eot;
            this.eof = DFA271_eof;
            this.min = DFA271_min;
            this.max = DFA271_max;
            this.accept = DFA271_accept;
            this.special = DFA271_special;
            this.transition = DFA271_transition;
        }
        public String getDescription() {
            return "2580:1: testlist[expr_contextType ctype] : ( ( test[null] COMMA )=>t+= test[ctype] ( options {k=2; } : COMMA t+= test[ctype] )* ( COMMA )? | test[ctype] );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA271_1 = input.LA(1);

                         
                        int index271_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred16_Python()) ) {s = 35;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index271_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA271_2 = input.LA(1);

                         
                        int index271_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred16_Python()) ) {s = 35;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index271_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA271_3 = input.LA(1);

                         
                        int index271_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred16_Python()) ) {s = 35;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index271_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA271_4 = input.LA(1);

                         
                        int index271_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred16_Python()) ) {s = 35;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index271_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA271_5 = input.LA(1);

                         
                        int index271_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred16_Python()) ) {s = 35;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index271_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA271_6 = input.LA(1);

                         
                        int index271_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred16_Python()) ) {s = 35;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index271_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA271_7 = input.LA(1);

                         
                        int index271_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred16_Python()) ) {s = 35;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index271_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA271_8 = input.LA(1);

                         
                        int index271_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred16_Python()) ) {s = 35;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index271_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA271_9 = input.LA(1);

                         
                        int index271_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred16_Python()) ) {s = 35;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index271_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA271_10 = input.LA(1);

                         
                        int index271_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred16_Python()) ) {s = 35;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index271_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA271_11 = input.LA(1);

                         
                        int index271_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred16_Python()) ) {s = 35;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index271_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA271_12 = input.LA(1);

                         
                        int index271_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred16_Python()) ) {s = 35;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index271_12);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA271_13 = input.LA(1);

                         
                        int index271_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred16_Python()) ) {s = 35;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index271_13);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA271_14 = input.LA(1);

                         
                        int index271_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred16_Python()) ) {s = 35;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index271_14);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA271_15 = input.LA(1);

                         
                        int index271_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred16_Python()) ) {s = 35;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index271_15);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA271_16 = input.LA(1);

                         
                        int index271_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred16_Python()) ) {s = 35;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index271_16);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA271_17 = input.LA(1);

                         
                        int index271_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred16_Python()) ) {s = 35;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index271_17);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA271_18 = input.LA(1);

                         
                        int index271_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred16_Python()) ) {s = 35;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index271_18);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA271_19 = input.LA(1);

                         
                        int index271_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred16_Python()) ) {s = 35;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index271_19);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA271_20 = input.LA(1);

                         
                        int index271_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred16_Python()) ) {s = 35;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index271_20);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA271_21 = input.LA(1);

                         
                        int index271_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred16_Python()) ) {s = 35;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index271_21);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA271_22 = input.LA(1);

                         
                        int index271_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred16_Python()) ) {s = 35;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index271_22);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA271_23 = input.LA(1);

                         
                        int index271_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred16_Python()) ) {s = 35;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index271_23);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA271_24 = input.LA(1);

                         
                        int index271_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred16_Python()) ) {s = 35;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index271_24);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA271_25 = input.LA(1);

                         
                        int index271_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred16_Python()) ) {s = 35;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index271_25);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA271_26 = input.LA(1);

                         
                        int index271_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred16_Python()) ) {s = 35;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index271_26);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA271_27 = input.LA(1);

                         
                        int index271_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred16_Python()) ) {s = 35;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index271_27);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA271_28 = input.LA(1);

                         
                        int index271_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred16_Python()) ) {s = 35;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index271_28);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA271_29 = input.LA(1);

                         
                        int index271_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred16_Python()) ) {s = 35;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index271_29);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA271_30 = input.LA(1);

                         
                        int index271_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred16_Python()) ) {s = 35;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index271_30);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA271_31 = input.LA(1);

                         
                        int index271_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred16_Python()) ) {s = 35;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index271_31);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA271_32 = input.LA(1);

                         
                        int index271_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred16_Python()) ) {s = 35;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index271_32);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA271_33 = input.LA(1);

                         
                        int index271_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred16_Python()) ) {s = 35;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index271_33);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA271_34 = input.LA(1);

                         
                        int index271_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred16_Python()) ) {s = 35;}

                        else if ( (true) ) {s = 36;}

                         
                        input.seek(index271_34);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 271, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA269_eotS =
        "\120\uffff";
    static final String DFA269_eofS =
        "\2\2\116\uffff";
    static final String DFA269_minS =
        "\2\7\116\uffff";
    static final String DFA269_maxS =
        "\1\125\1\u00a0\116\uffff";
    static final String DFA269_acceptS =
        "\2\uffff\1\2\47\uffff\1\1\4\uffff\1\1\40\uffff";
    static final String DFA269_specialS =
        "\120\uffff}>";
    static final String[] DFA269_transitionS = {
            "\1\2\20\uffff\1\2\1\uffff\1\2\21\uffff\3\2\1\1\2\uffff\15\2"+
            "\23\uffff\1\2\2\uffff\1\2",
            "\1\2\1\uffff\1\57\16\uffff\1\2\1\uffff\1\2\3\uffff\2\57\13"+
            "\uffff\1\57\4\2\2\uffff\15\2\14\uffff\2\57\3\uffff\2\57\1\2"+
            "\1\57\1\uffff\1\52\6\57\5\uffff\1\57\3\uffff\1\57\1\uffff\1"+
            "\57\2\uffff\1\57\3\uffff\12\57\6\uffff\1\57\37\uffff\3\57",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA269_eot = DFA.unpackEncodedString(DFA269_eotS);
    static final short[] DFA269_eof = DFA.unpackEncodedString(DFA269_eofS);
    static final char[] DFA269_min = DFA.unpackEncodedStringToUnsignedChars(DFA269_minS);
    static final char[] DFA269_max = DFA.unpackEncodedStringToUnsignedChars(DFA269_maxS);
    static final short[] DFA269_accept = DFA.unpackEncodedString(DFA269_acceptS);
    static final short[] DFA269_special = DFA.unpackEncodedString(DFA269_specialS);
    static final short[][] DFA269_transition;

    static {
        int numStates = DFA269_transitionS.length;
        DFA269_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA269_transition[i] = DFA.unpackEncodedString(DFA269_transitionS[i]);
        }
    }

    class DFA269 extends DFA {

        public DFA269(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 269;
            this.eot = DFA269_eot;
            this.eof = DFA269_eof;
            this.min = DFA269_min;
            this.max = DFA269_max;
            this.accept = DFA269_accept;
            this.special = DFA269_special;
            this.transition = DFA269_transition;
        }
        public String getDescription() {
            return "()* loopback of 2590:22: ( options {k=2; } : COMMA t+= test[ctype] )*";
        }
    }
    static final String DFA272_eotS =
        "\46\uffff";
    static final String DFA272_eofS =
        "\46\uffff";
    static final String DFA272_minS =
        "\1\57\1\11\44\uffff";
    static final String DFA272_maxS =
        "\1\124\1\u00a0\44\uffff";
    static final String DFA272_acceptS =
        "\2\uffff\1\2\1\1\42\uffff";
    static final String DFA272_specialS =
        "\46\uffff}>";
    static final String[] DFA272_transitionS = {
            "\1\1\44\uffff\1\2",
            "\1\3\24\uffff\2\3\13\uffff\1\3\37\uffff\2\3\3\uffff\2\3\1\uffff"+
            "\1\3\1\2\7\3\5\uffff\1\3\3\uffff\1\3\1\uffff\1\3\2\uffff\1\3"+
            "\3\uffff\12\3\6\uffff\1\3\37\uffff\3\3",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA272_eot = DFA.unpackEncodedString(DFA272_eotS);
    static final short[] DFA272_eof = DFA.unpackEncodedString(DFA272_eofS);
    static final char[] DFA272_min = DFA.unpackEncodedStringToUnsignedChars(DFA272_minS);
    static final char[] DFA272_max = DFA.unpackEncodedStringToUnsignedChars(DFA272_maxS);
    static final short[] DFA272_accept = DFA.unpackEncodedString(DFA272_acceptS);
    static final short[] DFA272_special = DFA.unpackEncodedString(DFA272_specialS);
    static final short[][] DFA272_transition;

    static {
        int numStates = DFA272_transitionS.length;
        DFA272_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA272_transition[i] = DFA.unpackEncodedString(DFA272_transitionS[i]);
        }
    }

    class DFA272 extends DFA {

        public DFA272(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 272;
            this.eot = DFA272_eot;
            this.eof = DFA272_eof;
            this.min = DFA272_min;
            this.max = DFA272_max;
            this.accept = DFA272_accept;
            this.special = DFA272_special;
            this.transition = DFA272_transition;
        }
        public String getDescription() {
            return "()* loopback of 2601:9: ( options {k=2; } : COMMA k+= test[expr_contextType.Load] COLON v+= test[expr_contextType.Load] )*";
        }
    }
 

    public static final BitSet FOLLOW_NEWLINE_in_single_input123 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_EOF_in_single_input126 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_simple_stmt_in_single_input142 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_NEWLINE_in_single_input144 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_EOF_in_single_input147 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_compound_stmt_in_single_input163 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_NEWLINE_in_single_input165 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_EOF_in_single_input168 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NEWLINE_in_file_input220 = new BitSet(new long[]{0x00000FFCCFA7E280L,0x40FFC4A20FEB1800L,0x00000001C0000000L});
    public static final BitSet FOLLOW_stmt_in_file_input230 = new BitSet(new long[]{0x00000FFCCFA7E280L,0x40FFC4A20FEB1800L,0x00000001C0000000L});
    public static final BitSet FOLLOW_EOF_in_file_input249 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEADING_WS_in_eval_input303 = new BitSet(new long[]{0x00000800C0000280L,0x40FFC4A20FEB1800L,0x00000001C0000000L});
    public static final BitSet FOLLOW_NEWLINE_in_eval_input307 = new BitSet(new long[]{0x00000800C0000280L,0x40FFC4A20FEB1800L,0x00000001C0000000L});
    public static final BitSet FOLLOW_testlist_in_eval_input311 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_NEWLINE_in_eval_input315 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_EOF_in_eval_input319 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NAME_in_dotted_attr371 = new BitSet(new long[]{0x0000000000000402L});
    public static final BitSet FOLLOW_DOT_in_dotted_attr382 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_NAME_in_dotted_attr386 = new BitSet(new long[]{0x0000000000000402L});
    public static final BitSet FOLLOW_set_in_attr0 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AT_in_decorator723 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_dotted_attr_in_decorator725 = new BitSet(new long[]{0x0000080000000080L});
    public static final BitSet FOLLOW_LPAREN_in_decorator733 = new BitSet(new long[]{0x00031800C0000200L,0x40FFC4A20FEB1800L,0x00000001C0000000L});
    public static final BitSet FOLLOW_arglist_in_decorator743 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_RPAREN_in_decorator787 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_NEWLINE_in_decorator809 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_decorator_in_decorators837 = new BitSet(new long[]{0x0000040000000002L});
    public static final BitSet FOLLOW_decorators_in_funcdef875 = new BitSet(new long[]{0x0000000000020000L});
    public static final BitSet FOLLOW_DEF_in_funcdef878 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_NAME_in_funcdef880 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_parameters_in_funcdef882 = new BitSet(new long[]{0x0000200000000000L});
    public static final BitSet FOLLOW_COLON_in_funcdef884 = new BitSet(new long[]{0x00000A3CCAA56280L,0x40FFC4A20FEB1800L,0x00000001C0000000L});
    public static final BitSet FOLLOW_suite_in_funcdef886 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_parameters919 = new BitSet(new long[]{0x0003180000000200L});
    public static final BitSet FOLLOW_varargslist_in_parameters928 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_RPAREN_in_parameters972 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fpdef_in_defparameter1005 = new BitSet(new long[]{0x0000400000000002L});
    public static final BitSet FOLLOW_ASSIGN_in_defparameter1009 = new BitSet(new long[]{0x00000800C0000200L,0x40FFC4A20FEB1800L,0x00000001C0000000L});
    public static final BitSet FOLLOW_test_in_defparameter1011 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_defparameter_in_varargslist1057 = new BitSet(new long[]{0x0000800000000002L});
    public static final BitSet FOLLOW_COMMA_in_varargslist1068 = new BitSet(new long[]{0x0000080000000200L});
    public static final BitSet FOLLOW_defparameter_in_varargslist1072 = new BitSet(new long[]{0x0000800000000002L});
    public static final BitSet FOLLOW_COMMA_in_varargslist1084 = new BitSet(new long[]{0x0003000000000002L});
    public static final BitSet FOLLOW_STAR_in_varargslist1097 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_NAME_in_varargslist1101 = new BitSet(new long[]{0x0000800000000002L});
    public static final BitSet FOLLOW_COMMA_in_varargslist1104 = new BitSet(new long[]{0x0002000000000000L});
    public static final BitSet FOLLOW_DOUBLESTAR_in_varargslist1106 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_NAME_in_varargslist1110 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOUBLESTAR_in_varargslist1126 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_NAME_in_varargslist1130 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STAR_in_varargslist1168 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_NAME_in_varargslist1172 = new BitSet(new long[]{0x0000800000000002L});
    public static final BitSet FOLLOW_COMMA_in_varargslist1175 = new BitSet(new long[]{0x0002000000000000L});
    public static final BitSet FOLLOW_DOUBLESTAR_in_varargslist1177 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_NAME_in_varargslist1181 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOUBLESTAR_in_varargslist1199 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_NAME_in_varargslist1203 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NAME_in_fpdef1240 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_fpdef1267 = new BitSet(new long[]{0x0000080000000200L});
    public static final BitSet FOLLOW_fplist_in_fpdef1269 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_RPAREN_in_fpdef1271 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_fpdef1287 = new BitSet(new long[]{0x0000080000000200L});
    public static final BitSet FOLLOW_fplist_in_fpdef1290 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_RPAREN_in_fpdef1292 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_fpdef_in_fplist1321 = new BitSet(new long[]{0x0000800000000002L});
    public static final BitSet FOLLOW_COMMA_in_fplist1338 = new BitSet(new long[]{0x0000080000000200L});
    public static final BitSet FOLLOW_fpdef_in_fplist1342 = new BitSet(new long[]{0x0000800000000002L});
    public static final BitSet FOLLOW_COMMA_in_fplist1348 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_simple_stmt_in_stmt1384 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_compound_stmt_in_stmt1400 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_small_stmt_in_simple_stmt1436 = new BitSet(new long[]{0x0004000000000080L});
    public static final BitSet FOLLOW_SEMI_in_simple_stmt1446 = new BitSet(new long[]{0x00000A3CCAA56200L,0x40FFC4A20FEB1800L,0x00000001C0000000L});
    public static final BitSet FOLLOW_small_stmt_in_simple_stmt1450 = new BitSet(new long[]{0x0004000000000080L});
    public static final BitSet FOLLOW_SEMI_in_simple_stmt1455 = new BitSet(new long[]{0x0000000000000080L});
    public static final BitSet FOLLOW_NEWLINE_in_simple_stmt1459 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_stmt_in_small_stmt1482 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_print_stmt_in_small_stmt1497 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_del_stmt_in_small_stmt1512 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_pass_stmt_in_small_stmt1527 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_flow_stmt_in_small_stmt1542 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_import_stmt_in_small_stmt1557 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_global_stmt_in_small_stmt1572 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_exec_stmt_in_small_stmt1587 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_assert_stmt_in_small_stmt1602 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_testlist_in_expr_stmt1650 = new BitSet(new long[]{0x7FF8000000000000L});
    public static final BitSet FOLLOW_augassign_in_expr_stmt1666 = new BitSet(new long[]{0x0000023000014000L});
    public static final BitSet FOLLOW_yield_expr_in_expr_stmt1670 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_augassign_in_expr_stmt1710 = new BitSet(new long[]{0x00000800C0000200L,0x40FFC4A20FEB1800L,0x00000001C0000000L});
    public static final BitSet FOLLOW_testlist_in_expr_stmt1714 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_testlist_in_expr_stmt1769 = new BitSet(new long[]{0x0000400000000002L});
    public static final BitSet FOLLOW_ASSIGN_in_expr_stmt1796 = new BitSet(new long[]{0x00000800C0000200L,0x40FFC4A20FEB1800L,0x00000001C0000000L});
    public static final BitSet FOLLOW_testlist_in_expr_stmt1800 = new BitSet(new long[]{0x0000400000000002L});
    public static final BitSet FOLLOW_ASSIGN_in_expr_stmt1845 = new BitSet(new long[]{0x0000023000014000L});
    public static final BitSet FOLLOW_yield_expr_in_expr_stmt1849 = new BitSet(new long[]{0x0000400000000002L});
    public static final BitSet FOLLOW_testlist_in_expr_stmt1897 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PLUSEQUAL_in_augassign1939 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MINUSEQUAL_in_augassign1957 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STAREQUAL_in_augassign1975 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SLASHEQUAL_in_augassign1993 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PERCENTEQUAL_in_augassign2011 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AMPEREQUAL_in_augassign2029 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_VBAREQUAL_in_augassign2047 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CIRCUMFLEXEQUAL_in_augassign2065 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFTSHIFTEQUAL_in_augassign2083 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RIGHTSHIFTEQUAL_in_augassign2101 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOUBLESTAREQUAL_in_augassign2119 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOUBLESLASHEQUAL_in_augassign2137 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PRINT_in_print_stmt2177 = new BitSet(new long[]{0x80000800C0000202L,0x40FFC4A20FEB1800L,0x00000001C0000000L});
    public static final BitSet FOLLOW_printlist_in_print_stmt2188 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RIGHTSHIFT_in_print_stmt2207 = new BitSet(new long[]{0x00000800C0000200L,0x40FFC4A20FEB1800L,0x00000001C0000000L});
    public static final BitSet FOLLOW_printlist2_in_print_stmt2211 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_test_in_printlist2291 = new BitSet(new long[]{0x0000800000000002L});
    public static final BitSet FOLLOW_COMMA_in_printlist2303 = new BitSet(new long[]{0x00000800C0000200L,0x40FFC4A20FEB1800L,0x00000001C0000000L});
    public static final BitSet FOLLOW_test_in_printlist2307 = new BitSet(new long[]{0x0000800000000002L});
    public static final BitSet FOLLOW_COMMA_in_printlist2315 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_test_in_printlist2336 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_test_in_printlist22393 = new BitSet(new long[]{0x0000800000000002L});
    public static final BitSet FOLLOW_COMMA_in_printlist22405 = new BitSet(new long[]{0x00000800C0000200L,0x40FFC4A20FEB1800L,0x00000001C0000000L});
    public static final BitSet FOLLOW_test_in_printlist22409 = new BitSet(new long[]{0x0000800000000002L});
    public static final BitSet FOLLOW_COMMA_in_printlist22417 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_test_in_printlist22438 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DELETE_in_del_stmt2475 = new BitSet(new long[]{0x0000080080000200L,0x40FFC4A20FEB1800L,0x00000001C0000000L});
    public static final BitSet FOLLOW_del_list_in_del_stmt2477 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PASS_in_pass_stmt2513 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_break_stmt_in_flow_stmt2539 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_continue_stmt_in_flow_stmt2547 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_return_stmt_in_flow_stmt2555 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_raise_stmt_in_flow_stmt2563 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_yield_stmt_in_flow_stmt2571 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BREAK_in_break_stmt2599 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CONTINUE_in_continue_stmt2635 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RETURN_in_return_stmt2671 = new BitSet(new long[]{0x00000800C0000202L,0x40FFC4A20FEB1800L,0x00000001C0000000L});
    public static final BitSet FOLLOW_testlist_in_return_stmt2680 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_yield_expr_in_yield_stmt2745 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RAISE_in_raise_stmt2781 = new BitSet(new long[]{0x00000800C0000202L,0x40FFC4A20FEB1800L,0x00000001C0000000L});
    public static final BitSet FOLLOW_test_in_raise_stmt2786 = new BitSet(new long[]{0x0000800000000002L});
    public static final BitSet FOLLOW_COMMA_in_raise_stmt2790 = new BitSet(new long[]{0x00000800C0000200L,0x40FFC4A20FEB1800L,0x00000001C0000000L});
    public static final BitSet FOLLOW_test_in_raise_stmt2794 = new BitSet(new long[]{0x0000800000000002L});
    public static final BitSet FOLLOW_COMMA_in_raise_stmt2806 = new BitSet(new long[]{0x00000800C0000200L,0x40FFC4A20FEB1800L,0x00000001C0000000L});
    public static final BitSet FOLLOW_test_in_raise_stmt2810 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_import_name_in_import_stmt2843 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_import_from_in_import_stmt2851 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IMPORT_in_import_name2879 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_dotted_as_names_in_import_name2881 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FROM_in_import_from2918 = new BitSet(new long[]{0x0000000000000600L});
    public static final BitSet FOLLOW_DOT_in_import_from2923 = new BitSet(new long[]{0x0000000000000600L});
    public static final BitSet FOLLOW_dotted_name_in_import_from2926 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_DOT_in_import_from2932 = new BitSet(new long[]{0x0000000008000400L});
    public static final BitSet FOLLOW_IMPORT_in_import_from2936 = new BitSet(new long[]{0x0001080000000200L});
    public static final BitSet FOLLOW_STAR_in_import_from2947 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_import_as_names_in_import_from2972 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_import_from2995 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_import_as_names_in_import_from2999 = new BitSet(new long[]{0x0000900000000000L});
    public static final BitSet FOLLOW_COMMA_in_import_from3001 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_RPAREN_in_import_from3004 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_import_as_name_in_import_as_names3053 = new BitSet(new long[]{0x0000800000000002L});
    public static final BitSet FOLLOW_COMMA_in_import_as_names3056 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_import_as_name_in_import_as_names3061 = new BitSet(new long[]{0x0000800000000002L});
    public static final BitSet FOLLOW_NAME_in_import_as_name3102 = new BitSet(new long[]{0x0000000000001002L});
    public static final BitSet FOLLOW_AS_in_import_as_name3105 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_NAME_in_import_as_name3109 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_dotted_name_in_dotted_as_name3149 = new BitSet(new long[]{0x0000000000001002L});
    public static final BitSet FOLLOW_AS_in_dotted_as_name3152 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_NAME_in_dotted_as_name3156 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_dotted_as_name_in_dotted_as_names3192 = new BitSet(new long[]{0x0000800000000002L});
    public static final BitSet FOLLOW_COMMA_in_dotted_as_names3195 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_dotted_as_name_in_dotted_as_names3200 = new BitSet(new long[]{0x0000800000000002L});
    public static final BitSet FOLLOW_NAME_in_dotted_name3234 = new BitSet(new long[]{0x0000000000000402L});
    public static final BitSet FOLLOW_DOT_in_dotted_name3237 = new BitSet(new long[]{0x000003FFFFFFFA00L});
    public static final BitSet FOLLOW_attr_in_dotted_name3241 = new BitSet(new long[]{0x0000000000000402L});
    public static final BitSet FOLLOW_GLOBAL_in_global_stmt3277 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_NAME_in_global_stmt3281 = new BitSet(new long[]{0x0000800000000002L});
    public static final BitSet FOLLOW_COMMA_in_global_stmt3284 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_NAME_in_global_stmt3288 = new BitSet(new long[]{0x0000800000000002L});
    public static final BitSet FOLLOW_EXEC_in_exec_stmt3326 = new BitSet(new long[]{0x0000080080000200L,0x40FFC4A20FEB1800L,0x00000001C0000000L});
    public static final BitSet FOLLOW_expr_in_exec_stmt3328 = new BitSet(new long[]{0x0000000010000002L});
    public static final BitSet FOLLOW_IN_in_exec_stmt3332 = new BitSet(new long[]{0x00000800C0000200L,0x40FFC4A20FEB1800L,0x00000001C0000000L});
    public static final BitSet FOLLOW_test_in_exec_stmt3336 = new BitSet(new long[]{0x0000800000000002L});
    public static final BitSet FOLLOW_COMMA_in_exec_stmt3340 = new BitSet(new long[]{0x00000800C0000200L,0x40FFC4A20FEB1800L,0x00000001C0000000L});
    public static final BitSet FOLLOW_test_in_exec_stmt3344 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ASSERT_in_assert_stmt3385 = new BitSet(new long[]{0x00000800C0000200L,0x40FFC4A20FEB1800L,0x00000001C0000000L});
    public static final BitSet FOLLOW_test_in_assert_stmt3389 = new BitSet(new long[]{0x0000800000000002L});
    public static final BitSet FOLLOW_COMMA_in_assert_stmt3393 = new BitSet(new long[]{0x00000800C0000200L,0x40FFC4A20FEB1800L,0x00000001C0000000L});
    public static final BitSet FOLLOW_test_in_assert_stmt3397 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_if_stmt_in_compound_stmt3426 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_while_stmt_in_compound_stmt3434 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_for_stmt_in_compound_stmt3442 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_try_stmt_in_compound_stmt3450 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_with_stmt_in_compound_stmt3458 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_funcdef_in_compound_stmt3475 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classdef_in_compound_stmt3483 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IF_in_if_stmt3511 = new BitSet(new long[]{0x00000800C0000200L,0x40FFC4A20FEB1800L,0x00000001C0000000L});
    public static final BitSet FOLLOW_test_in_if_stmt3513 = new BitSet(new long[]{0x0000200000000000L});
    public static final BitSet FOLLOW_COLON_in_if_stmt3516 = new BitSet(new long[]{0x00000A3CCAA56280L,0x40FFC4A20FEB1800L,0x00000001C0000000L});
    public static final BitSet FOLLOW_suite_in_if_stmt3520 = new BitSet(new long[]{0x0000000200080002L});
    public static final BitSet FOLLOW_elif_clause_in_if_stmt3523 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_else_clause_in_elif_clause3568 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ELIF_in_elif_clause3584 = new BitSet(new long[]{0x00000800C0000200L,0x40FFC4A20FEB1800L,0x00000001C0000000L});
    public static final BitSet FOLLOW_test_in_elif_clause3586 = new BitSet(new long[]{0x0000200000000000L});
    public static final BitSet FOLLOW_COLON_in_elif_clause3589 = new BitSet(new long[]{0x00000A3CCAA56280L,0x40FFC4A20FEB1800L,0x00000001C0000000L});
    public static final BitSet FOLLOW_suite_in_elif_clause3591 = new BitSet(new long[]{0x0000000200080002L});
    public static final BitSet FOLLOW_elif_clause_in_elif_clause3603 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ORELSE_in_else_clause3663 = new BitSet(new long[]{0x0000200000000000L});
    public static final BitSet FOLLOW_COLON_in_else_clause3665 = new BitSet(new long[]{0x00000A3CCAA56280L,0x40FFC4A20FEB1800L,0x00000001C0000000L});
    public static final BitSet FOLLOW_suite_in_else_clause3669 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WHILE_in_while_stmt3706 = new BitSet(new long[]{0x00000800C0000200L,0x40FFC4A20FEB1800L,0x00000001C0000000L});
    public static final BitSet FOLLOW_test_in_while_stmt3708 = new BitSet(new long[]{0x0000200000000000L});
    public static final BitSet FOLLOW_COLON_in_while_stmt3711 = new BitSet(new long[]{0x00000A3CCAA56280L,0x40FFC4A20FEB1800L,0x00000001C0000000L});
    public static final BitSet FOLLOW_suite_in_while_stmt3715 = new BitSet(new long[]{0x0000000200000002L});
    public static final BitSet FOLLOW_ORELSE_in_while_stmt3719 = new BitSet(new long[]{0x0000200000000000L});
    public static final BitSet FOLLOW_COLON_in_while_stmt3721 = new BitSet(new long[]{0x00000A3CCAA56280L,0x40FFC4A20FEB1800L,0x00000001C0000000L});
    public static final BitSet FOLLOW_suite_in_while_stmt3725 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FOR_in_for_stmt3764 = new BitSet(new long[]{0x0000080080000200L,0x40FFC4A20FEB1800L,0x00000001C0000000L});
    public static final BitSet FOLLOW_exprlist_in_for_stmt3766 = new BitSet(new long[]{0x0000000010000000L});
    public static final BitSet FOLLOW_IN_in_for_stmt3769 = new BitSet(new long[]{0x00000800C0000200L,0x40FFC4A20FEB1800L,0x00000001C0000000L});
    public static final BitSet FOLLOW_testlist_in_for_stmt3771 = new BitSet(new long[]{0x0000200000000000L});
    public static final BitSet FOLLOW_COLON_in_for_stmt3774 = new BitSet(new long[]{0x00000A3CCAA56280L,0x40FFC4A20FEB1800L,0x00000001C0000000L});
    public static final BitSet FOLLOW_suite_in_for_stmt3778 = new BitSet(new long[]{0x0000000200000002L});
    public static final BitSet FOLLOW_ORELSE_in_for_stmt3790 = new BitSet(new long[]{0x0000200000000000L});
    public static final BitSet FOLLOW_COLON_in_for_stmt3792 = new BitSet(new long[]{0x00000A3CCAA56280L,0x40FFC4A20FEB1800L,0x00000001C0000000L});
    public static final BitSet FOLLOW_suite_in_for_stmt3796 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TRY_in_try_stmt3839 = new BitSet(new long[]{0x0000200000000000L});
    public static final BitSet FOLLOW_COLON_in_try_stmt3841 = new BitSet(new long[]{0x00000A3CCAA56280L,0x40FFC4A20FEB1800L,0x00000001C0000000L});
    public static final BitSet FOLLOW_suite_in_try_stmt3845 = new BitSet(new long[]{0x0000000000500000L});
    public static final BitSet FOLLOW_except_clause_in_try_stmt3858 = new BitSet(new long[]{0x0000000200500002L});
    public static final BitSet FOLLOW_ORELSE_in_try_stmt3862 = new BitSet(new long[]{0x0000200000000000L});
    public static final BitSet FOLLOW_COLON_in_try_stmt3864 = new BitSet(new long[]{0x00000A3CCAA56280L,0x40FFC4A20FEB1800L,0x00000001C0000000L});
    public static final BitSet FOLLOW_suite_in_try_stmt3868 = new BitSet(new long[]{0x0000000000400002L});
    public static final BitSet FOLLOW_FINALLY_in_try_stmt3874 = new BitSet(new long[]{0x0000200000000000L});
    public static final BitSet FOLLOW_COLON_in_try_stmt3876 = new BitSet(new long[]{0x00000A3CCAA56280L,0x40FFC4A20FEB1800L,0x00000001C0000000L});
    public static final BitSet FOLLOW_suite_in_try_stmt3880 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FINALLY_in_try_stmt3903 = new BitSet(new long[]{0x0000200000000000L});
    public static final BitSet FOLLOW_COLON_in_try_stmt3905 = new BitSet(new long[]{0x00000A3CCAA56280L,0x40FFC4A20FEB1800L,0x00000001C0000000L});
    public static final BitSet FOLLOW_suite_in_try_stmt3909 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WITH_in_with_stmt3958 = new BitSet(new long[]{0x00000800C0000200L,0x40FFC4A20FEB1800L,0x00000001C0000000L});
    public static final BitSet FOLLOW_test_in_with_stmt3960 = new BitSet(new long[]{0x0000200000001200L});
    public static final BitSet FOLLOW_with_var_in_with_stmt3964 = new BitSet(new long[]{0x0000200000000000L});
    public static final BitSet FOLLOW_COLON_in_with_stmt3968 = new BitSet(new long[]{0x00000A3CCAA56280L,0x40FFC4A20FEB1800L,0x00000001C0000000L});
    public static final BitSet FOLLOW_suite_in_with_stmt3970 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_with_var4005 = new BitSet(new long[]{0x0000080080000200L,0x40FFC4A20FEB1800L,0x00000001C0000000L});
    public static final BitSet FOLLOW_expr_in_with_var4013 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EXCEPT_in_except_clause4050 = new BitSet(new long[]{0x00002800C0000200L,0x40FFC4A20FEB1800L,0x00000001C0000000L});
    public static final BitSet FOLLOW_test_in_except_clause4055 = new BitSet(new long[]{0x0000A00000001000L});
    public static final BitSet FOLLOW_set_in_except_clause4059 = new BitSet(new long[]{0x00000800C0000200L,0x40FFC4A20FEB1800L,0x00000001C0000000L});
    public static final BitSet FOLLOW_test_in_except_clause4069 = new BitSet(new long[]{0x0000200000000000L});
    public static final BitSet FOLLOW_COLON_in_except_clause4076 = new BitSet(new long[]{0x00000A3CCAA56280L,0x40FFC4A20FEB1800L,0x00000001C0000000L});
    public static final BitSet FOLLOW_suite_in_except_clause4078 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_simple_stmt_in_suite4124 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NEWLINE_in_suite4140 = new BitSet(new long[]{0x0000000000000010L});
    public static final BitSet FOLLOW_INDENT_in_suite4142 = new BitSet(new long[]{0x00000FFCCFA7E280L,0x40FFC4A20FEB1800L,0x00000001C0000000L});
    public static final BitSet FOLLOW_stmt_in_suite4151 = new BitSet(new long[]{0x00000FFCCFA7E2A0L,0x40FFC4A20FEB1800L,0x00000001C0000000L});
    public static final BitSet FOLLOW_DEDENT_in_suite4171 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_or_test_in_test4201 = new BitSet(new long[]{0x0000000004000002L});
    public static final BitSet FOLLOW_IF_in_test4223 = new BitSet(new long[]{0x0000080080000200L,0x40FFC4A20FEB1800L,0x00000001C0000000L});
    public static final BitSet FOLLOW_or_test_in_test4227 = new BitSet(new long[]{0x0000000200000000L});
    public static final BitSet FOLLOW_ORELSE_in_test4230 = new BitSet(new long[]{0x00000800C0000200L,0x40FFC4A20FEB1800L,0x00000001C0000000L});
    public static final BitSet FOLLOW_test_in_test4234 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lambdef_in_test4279 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_and_test_in_or_test4314 = new BitSet(new long[]{0x0000000100000002L});
    public static final BitSet FOLLOW_OR_in_or_test4330 = new BitSet(new long[]{0x0000080080000200L,0x40FFC4A20FEB1800L,0x00000001C0000000L});
    public static final BitSet FOLLOW_and_test_in_or_test4334 = new BitSet(new long[]{0x0000000100000002L});
    public static final BitSet FOLLOW_not_test_in_and_test4415 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_AND_in_and_test4431 = new BitSet(new long[]{0x0000080080000200L,0x40FFC4A20FEB1800L,0x00000001C0000000L});
    public static final BitSet FOLLOW_not_test_in_and_test4435 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_NOT_in_not_test4519 = new BitSet(new long[]{0x0000080080000200L,0x40FFC4A20FEB1800L,0x00000001C0000000L});
    public static final BitSet FOLLOW_not_test_in_not_test4523 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_comparison_in_not_test4540 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_in_comparison4589 = new BitSet(new long[]{0x00000000B0000002L,0x000000000000007FL});
    public static final BitSet FOLLOW_comp_op_in_comparison4603 = new BitSet(new long[]{0x0000080080000200L,0x40FFC4A20FEB1800L,0x00000001C0000000L});
    public static final BitSet FOLLOW_expr_in_comparison4607 = new BitSet(new long[]{0x00000000B0000002L,0x000000000000007FL});
    public static final BitSet FOLLOW_LESS_in_comp_op4688 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_GREATER_in_comp_op4704 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EQUAL_in_comp_op4720 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_GREATEREQUAL_in_comp_op4736 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LESSEQUAL_in_comp_op4752 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ALT_NOTEQUAL_in_comp_op4768 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NOTEQUAL_in_comp_op4784 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IN_in_comp_op4800 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NOT_in_comp_op4816 = new BitSet(new long[]{0x0000000010000000L});
    public static final BitSet FOLLOW_IN_in_comp_op4818 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IS_in_comp_op4834 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IS_in_comp_op4850 = new BitSet(new long[]{0x0000000080000000L});
    public static final BitSet FOLLOW_NOT_in_comp_op4852 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_xor_expr_in_expr4904 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000080L});
    public static final BitSet FOLLOW_VBAR_in_expr4919 = new BitSet(new long[]{0x0000080080000200L,0x40FFC4A20FEB1800L,0x00000001C0000000L});
    public static final BitSet FOLLOW_xor_expr_in_expr4923 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000080L});
    public static final BitSet FOLLOW_and_expr_in_xor_expr5002 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000100L});
    public static final BitSet FOLLOW_CIRCUMFLEX_in_xor_expr5017 = new BitSet(new long[]{0x0000080080000200L,0x40FFC4A20FEB1800L,0x00000001C0000000L});
    public static final BitSet FOLLOW_and_expr_in_xor_expr5021 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000100L});
    public static final BitSet FOLLOW_shift_expr_in_and_expr5099 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000200L});
    public static final BitSet FOLLOW_AMPER_in_and_expr5114 = new BitSet(new long[]{0x0000080080000200L,0x40FFC4A20FEB1800L,0x00000001C0000000L});
    public static final BitSet FOLLOW_shift_expr_in_and_expr5118 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000200L});
    public static final BitSet FOLLOW_arith_expr_in_shift_expr5201 = new BitSet(new long[]{0x8000000000000002L,0x0000000000000400L});
    public static final BitSet FOLLOW_shift_op_in_shift_expr5215 = new BitSet(new long[]{0x0000080080000200L,0x40FFC4A20FEB1800L,0x00000001C0000000L});
    public static final BitSet FOLLOW_arith_expr_in_shift_expr5219 = new BitSet(new long[]{0x8000000000000002L,0x0000000000000400L});
    public static final BitSet FOLLOW_LEFTSHIFT_in_shift_op5303 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RIGHTSHIFT_in_shift_op5319 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_term_in_arith_expr5365 = new BitSet(new long[]{0x0000000000000002L,0x0000000000001800L});
    public static final BitSet FOLLOW_arith_op_in_arith_expr5378 = new BitSet(new long[]{0x0000080080000200L,0x40FFC4A20FEB1800L,0x00000001C0000000L});
    public static final BitSet FOLLOW_term_in_arith_expr5382 = new BitSet(new long[]{0x0000000000000002L,0x0000000000001800L});
    public static final BitSet FOLLOW_PLUS_in_arith_op5490 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MINUS_in_arith_op5506 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_factor_in_term5552 = new BitSet(new long[]{0x0001000000000002L,0x000000000000E000L});
    public static final BitSet FOLLOW_term_op_in_term5565 = new BitSet(new long[]{0x0000080080000200L,0x40FFC4A20FEB1800L,0x00000001C0000000L});
    public static final BitSet FOLLOW_factor_in_term5569 = new BitSet(new long[]{0x0001000000000002L,0x000000000000E000L});
    public static final BitSet FOLLOW_STAR_in_term_op5651 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SLASH_in_term_op5667 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PERCENT_in_term_op5683 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOUBLESLASH_in_term_op5699 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PLUS_in_factor5738 = new BitSet(new long[]{0x0000080080000200L,0x40FFC4A20FEB1800L,0x00000001C0000000L});
    public static final BitSet FOLLOW_factor_in_factor5742 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MINUS_in_factor5758 = new BitSet(new long[]{0x0000080080000200L,0x40FFC4A20FEB1800L,0x00000001C0000000L});
    public static final BitSet FOLLOW_factor_in_factor5762 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TILDE_in_factor5778 = new BitSet(new long[]{0x0000080080000200L,0x40FFC4A20FEB1800L,0x00000001C0000000L});
    public static final BitSet FOLLOW_factor_in_factor5782 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_power_in_factor5798 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_atom_in_power5837 = new BitSet(new long[]{0x0002080000000402L,0x0000000000020000L});
    public static final BitSet FOLLOW_trailer_in_power5842 = new BitSet(new long[]{0x0002080000000402L,0x0000000000020000L});
    public static final BitSet FOLLOW_DOUBLESTAR_in_power5857 = new BitSet(new long[]{0x0000080080000200L,0x40FFC4A20FEB1800L,0x00000001C0000000L});
    public static final BitSet FOLLOW_factor_in_power5859 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_atom5909 = new BitSet(new long[]{0x00001A30C0014200L,0x40FFC4A20FEB1800L,0x00000001C0000000L});
    public static final BitSet FOLLOW_yield_expr_in_atom5927 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_testlist_gexp_in_atom5947 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_RPAREN_in_atom5990 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LBRACK_in_atom5998 = new BitSet(new long[]{0x00000800C0000200L,0x40FFC4A20FEF1800L,0x00000001C0000000L});
    public static final BitSet FOLLOW_listmaker_in_atom6007 = new BitSet(new long[]{0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_RBRACK_in_atom6050 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LCURLY_in_atom6058 = new BitSet(new long[]{0x00000800C0000200L,0x40FFC4A20FFB1800L,0x00000001C0000000L});
    public static final BitSet FOLLOW_dictmaker_in_atom6068 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_RCURLY_in_atom6115 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BACKQUOTE_in_atom6126 = new BitSet(new long[]{0x00000800C0000200L,0x40FFC4A20FEB1800L,0x00000001C0000000L});
    public static final BitSet FOLLOW_testlist_in_atom6128 = new BitSet(new long[]{0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_BACKQUOTE_in_atom6133 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NAME_in_atom6151 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INT_in_atom6169 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LONGINT_in_atom6187 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FLOAT_in_atom6205 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COMPLEX_in_atom6223 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRING_in_atom6244 = new BitSet(new long[]{0x0000000000000002L,0x0000000004000000L});
    public static final BitSet FOLLOW_sql_stmt_in_atom6279 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_prolog_stmt_in_atom6293 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_asp_stmt_in_atom6304 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sim_stmt_in_atom6316 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PRO_in_prolog_stmt6365 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_PRLO_in_prolog_stmt6367 = new BitSet(new long[]{0x0000080080000200L,0x40FFC4AA0FEB1800L,0x00000001C0000000L});
    public static final BitSet FOLLOW_prologload_in_prolog_stmt6370 = new BitSet(new long[]{0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_RBRACK_in_prolog_stmt6372 = new BitSet(new long[]{0x0000000000000400L,0x0000000000000800L});
    public static final BitSet FOLLOW_PLUS_in_prolog_stmt6375 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_DOT_in_prolog_stmt6381 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PRO_in_prolog_stmt6406 = new BitSet(new long[]{0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_ASPPRINTDB_in_prolog_stmt6408 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PRO_in_prolog_stmt6427 = new BitSet(new long[]{0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_PRQO_in_prolog_stmt6429 = new BitSet(new long[]{0x0000080080000200L,0x40FFC4A20FEB1800L,0x00000001C0000000L});
    public static final BitSet FOLLOW_prologquery_in_prolog_stmt6432 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_DOT_in_prolog_stmt6434 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PRO_in_prolog_stmt6456 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_PRIO_in_prolog_stmt6458 = new BitSet(new long[]{0x0000080080000200L,0x40FFC4A20FEB1800L,0x00000001C0000000L});
    public static final BitSet FOLLOW_prologinsert_in_prolog_stmt6461 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_DOT_in_prolog_stmt6465 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PRO_in_prolog_stmt6487 = new BitSet(new long[]{0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_PRSO_in_prolog_stmt6489 = new BitSet(new long[]{0x0000080080000200L,0x40FFC4BA0FEB1800L,0x00000001C0000000L});
    public static final BitSet FOLLOW_prologsave_in_prolog_stmt6492 = new BitSet(new long[]{0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_RBRACK_in_prolog_stmt6494 = new BitSet(new long[]{0x0000000000000400L,0x0000000000000800L});
    public static final BitSet FOLLOW_PLUS_in_prolog_stmt6497 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_DOT_in_prolog_stmt6503 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PRO_SELECT_in_prolog_stmt6526 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_NAME_in_prolog_stmt6530 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_prologqueryfragment_in_prologinsert6559 = new BitSet(new long[]{0x0000000000000002L,0x0000000400000000L});
    public static final BitSet FOLLOW_PRIMP_in_prologinsert6562 = new BitSet(new long[]{0x0000080080000200L,0x40FFC4A20FEB1800L,0x00000001C0000000L});
    public static final BitSet FOLLOW_prologqueryfragment_in_prologinsert6568 = new BitSet(new long[]{0x0000800000000002L});
    public static final BitSet FOLLOW_COMMA_in_prologinsert6573 = new BitSet(new long[]{0x0000080080000200L,0x40FFC4A20FEB1800L,0x00000001C0000000L});
    public static final BitSet FOLLOW_prologqueryfragment_in_prologinsert6578 = new BitSet(new long[]{0x0000800000000002L});
    public static final BitSet FOLLOW_prologloadfragment_in_prologload6599 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_prologexpr_in_prologload6606 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DIGITS_in_prologloadfragment6619 = new BitSet(new long[]{0x0000000000000200L,0x0000000800000000L});
    public static final BitSet FOLLOW_NAME_in_prologloadfragment6623 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_DOT_in_prologloadfragment6625 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_NAME_in_prologloadfragment6627 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_prologqueryfragment_in_prologquery6640 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_prologatom_in_prologqueryfragment6652 = new BitSet(new long[]{0x0000080000000002L});
    public static final BitSet FOLLOW_LPAREN_in_prologqueryfragment6657 = new BitSet(new long[]{0x0000080080000200L,0x40FFC4AA0FEB1800L,0x00000001C0000000L});
    public static final BitSet FOLLOW_prologqueryinterior_in_prologqueryfragment6663 = new BitSet(new long[]{0x0000900000000000L});
    public static final BitSet FOLLOW_COMMA_in_prologqueryfragment6668 = new BitSet(new long[]{0x0000080080000200L,0x40FFC4AA0FEB1800L,0x00000001C0000000L});
    public static final BitSet FOLLOW_prologqueryinterior_in_prologqueryfragment6674 = new BitSet(new long[]{0x0000900000000000L});
    public static final BitSet FOLLOW_RPAREN_in_prologqueryfragment6681 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRING_in_prologqueryinterior6700 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_prologexpr_in_prologqueryinterior6707 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_atom_in_prologatom6724 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_prologload_in_prologsave6740 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CLEAR_in_prologsave6747 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_in_prologexpr6765 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ASP_in_asp_stmt6807 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_PRLO_in_asp_stmt6809 = new BitSet(new long[]{0x0000080080000200L,0x40FFC4AA0FEB1800L,0x00000001C0000000L});
    public static final BitSet FOLLOW_aspload_in_asp_stmt6812 = new BitSet(new long[]{0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_RBRACK_in_asp_stmt6814 = new BitSet(new long[]{0x0000000000000400L,0x0000000000000800L});
    public static final BitSet FOLLOW_PLUS_in_asp_stmt6817 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_DOT_in_asp_stmt6823 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ASP_in_asp_stmt6848 = new BitSet(new long[]{0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_ASPBLANKQ_in_asp_stmt6850 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ASP_in_asp_stmt6869 = new BitSet(new long[]{0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_ASPPRINTDB_in_asp_stmt6871 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ASP_in_asp_stmt6890 = new BitSet(new long[]{0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_PRQO_in_asp_stmt6892 = new BitSet(new long[]{0x0000080080000200L,0x40FFCCA60FEB1800L,0x00000001C0000000L});
    public static final BitSet FOLLOW_aspquery_in_asp_stmt6895 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_DOT_in_asp_stmt6897 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ASP_in_asp_stmt6922 = new BitSet(new long[]{0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_PRIO_in_asp_stmt6924 = new BitSet(new long[]{0x0000080080000200L,0x40FFCCA60FEB1800L,0x00000001C0000000L});
    public static final BitSet FOLLOW_aspquery_in_asp_stmt6927 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_DOT_in_asp_stmt6929 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ASP_in_asp_stmt6954 = new BitSet(new long[]{0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_PRSO_in_asp_stmt6956 = new BitSet(new long[]{0x0000080080000200L,0x40FFC4BA0FEB1800L,0x00000001C0000000L});
    public static final BitSet FOLLOW_aspsave_in_asp_stmt6959 = new BitSet(new long[]{0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_RBRACK_in_asp_stmt6961 = new BitSet(new long[]{0x0000000000000400L,0x0000000000000800L});
    public static final BitSet FOLLOW_PLUS_in_asp_stmt6964 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_DOT_in_asp_stmt6970 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ASP_SELECT_in_asp_stmt6992 = new BitSet(new long[]{0x0000000000000000L,0x0000030000000000L});
    public static final BitSet FOLLOW_REG_FACT_in_asp_stmt6995 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_GROUP_FACT_in_asp_stmt7000 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_NAME_in_asp_stmt7004 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ASP_PATH_in_asp_stmt7024 = new BitSet(new long[]{0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_aspdir_in_asp_stmt7028 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_atom_in_aspatom7061 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_asploadfragment_in_aspload7082 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_aspexpr_in_aspload7089 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DIGITS_in_asploadfragment7102 = new BitSet(new long[]{0x0000000000000200L,0x0000000800000000L});
    public static final BitSet FOLLOW_NAME_in_asploadfragment7106 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_DOT_in_asploadfragment7108 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_NAME_in_asploadfragment7110 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_in_aspexpr7129 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_aspvarlist_in_aspquery7151 = new BitSet(new long[]{0x0000000000000002L,0x0000000400000000L});
    public static final BitSet FOLLOW_PRIMP_in_aspquery7156 = new BitSet(new long[]{0x0000080080000200L,0x40FFCCA20FEB1800L,0x00000001C0000000L});
    public static final BitSet FOLLOW_aspvarlist_in_aspquery7160 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PRIMP_in_aspquery7167 = new BitSet(new long[]{0x0000080080000200L,0x40FFCCA20FEB1800L,0x00000001C0000000L});
    public static final BitSet FOLLOW_aspvarlist_in_aspquery7171 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_aspqueryvar_in_aspvarlist7182 = new BitSet(new long[]{0x0000800000000002L,0x0000080000000000L});
    public static final BitSet FOLLOW_COMMA_in_aspvarlist7188 = new BitSet(new long[]{0x0000080080000200L,0x40FFC4A20FEB1800L,0x00000001C0000000L});
    public static final BitSet FOLLOW_aspqueryvar_in_aspvarlist7192 = new BitSet(new long[]{0x0000800000000002L});
    public static final BitSet FOLLOW_ASPLC_in_aspvarlist7197 = new BitSet(new long[]{0x0000080080000200L,0x40FFC4A20FEB1800L,0x00000001C0000000L});
    public static final BitSet FOLLOW_aspqueryvar_in_aspvarlist7201 = new BitSet(new long[]{0x0000A00000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_COLON_in_aspvarlist7207 = new BitSet(new long[]{0x0000080080000200L,0x40FFC4A20FEB1800L,0x00000001C0000000L});
    public static final BitSet FOLLOW_aspqueryvar_in_aspvarlist7211 = new BitSet(new long[]{0x0000A00000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_COMMA_in_aspvarlist7217 = new BitSet(new long[]{0x0000080080000200L,0x40FFC4A20FEB1800L,0x00000001C0000000L});
    public static final BitSet FOLLOW_aspqueryvar_in_aspvarlist7221 = new BitSet(new long[]{0x0000A00000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_RCURLY_in_aspvarlist7226 = new BitSet(new long[]{0x0000080080000202L,0x40FFC4A20FEB1800L,0x00000001C0000000L});
    public static final BitSet FOLLOW_aspatom_in_aspvarlist7231 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ASPLC_in_aspvarlist7242 = new BitSet(new long[]{0x0000080080000200L,0x40FFC4A20FEB1800L,0x00000001C0000000L});
    public static final BitSet FOLLOW_aspqueryvar_in_aspvarlist7246 = new BitSet(new long[]{0x0000A00000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_COMMA_in_aspvarlist7252 = new BitSet(new long[]{0x0000080080000200L,0x40FFC4A20FEB1800L,0x00000001C0000000L});
    public static final BitSet FOLLOW_aspqueryvar_in_aspvarlist7256 = new BitSet(new long[]{0x0000A00000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_COLON_in_aspvarlist7262 = new BitSet(new long[]{0x0000080080000200L,0x40FFC4A20FEB1800L,0x00000001C0000000L});
    public static final BitSet FOLLOW_aspqueryvar_in_aspvarlist7266 = new BitSet(new long[]{0x0000A00000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_RCURLY_in_aspvarlist7271 = new BitSet(new long[]{0x0000080080000202L,0x40FFC4A20FEB1800L,0x00000001C0000000L});
    public static final BitSet FOLLOW_aspatom_in_aspvarlist7276 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_aspnot_in_aspqueryvar7288 = new BitSet(new long[]{0x0000080000000002L,0x0000000000000001L});
    public static final BitSet FOLLOW_LPAREN_in_aspqueryvar7295 = new BitSet(new long[]{0x0000080080000200L,0x40FFC4AA0FEB1800L,0x00000001C0000000L});
    public static final BitSet FOLLOW_aspquerynotinterior_in_aspqueryvar7300 = new BitSet(new long[]{0x0004900000000000L});
    public static final BitSet FOLLOW_COMMA_in_aspqueryvar7307 = new BitSet(new long[]{0x0000080080000200L,0x40FFC4AA0FEB1800L,0x00000001C0000000L});
    public static final BitSet FOLLOW_aspquerynotinterior_in_aspqueryvar7311 = new BitSet(new long[]{0x0004900000000000L});
    public static final BitSet FOLLOW_SEMI_in_aspqueryvar7317 = new BitSet(new long[]{0x0000080080000200L,0x40FFC4AA0FEB1800L,0x00000001C0000000L});
    public static final BitSet FOLLOW_aspquerynotinterior_in_aspqueryvar7321 = new BitSet(new long[]{0x0004900000000000L});
    public static final BitSet FOLLOW_RPAREN_in_aspqueryvar7327 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LESS_in_aspqueryvar7337 = new BitSet(new long[]{0x0000080080000200L,0x40FFC4A20FEB1800L,0x00000001C0000000L});
    public static final BitSet FOLLOW_aspatom_in_aspqueryvar7341 = new BitSet(new long[]{0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_ASPDOTDOT_in_aspqueryvar7343 = new BitSet(new long[]{0x0000080080000200L,0x40FFC4A20FEB1800L,0x00000001C0000000L});
    public static final BitSet FOLLOW_aspatom_in_aspqueryvar7347 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_GREATER_in_aspqueryvar7349 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_aspqueryvar7359 = new BitSet(new long[]{0x0000000000000000L,0x000000000000007FL});
    public static final BitSet FOLLOW_EQUAL_in_aspqueryvar7362 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_NOTEQUAL_in_aspqueryvar7367 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_ALT_NOTEQUAL_in_aspqueryvar7372 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_LESS_in_aspqueryvar7377 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_GREATER_in_aspqueryvar7382 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_LESSEQUAL_in_aspqueryvar7387 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_GREATEREQUAL_in_aspqueryvar7392 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_RPAREN_in_aspqueryvar7396 = new BitSet(new long[]{0x0000080080000200L,0x40FFC4A20FEB1800L,0x00000001C0000000L});
    public static final BitSet FOLLOW_aspnot_in_aspqueryvar7399 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NOT_in_aspquerynotinterior7419 = new BitSet(new long[]{0x0000080080000200L,0x40FFC4AA0FEB1800L,0x00000001C0000000L});
    public static final BitSet FOLLOW_aspqueryinterior_in_aspquerynotinterior7425 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRING_in_aspqueryinterior7442 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_aspexpr_in_aspqueryinterior7449 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NOT_in_aspnot7464 = new BitSet(new long[]{0x0000080080000200L,0x40FFC4A20FEB1800L,0x00000001C0000000L});
    public static final BitSet FOLLOW_aspatom_in_aspnot7470 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_aspload_in_aspsave7482 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CLEAR_in_aspsave7489 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_path_in_aspdir7504 = new BitSet(new long[]{0x0000000000000002L,0x0000200000000000L});
    public static final BitSet FOLLOW_solverfrag_in_aspdir7508 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SOLVER_in_solverfrag7521 = new BitSet(new long[]{0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_path_in_solverfrag7527 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SELECT_in_sql_stmt7587 = new BitSet(new long[]{0x0001000000000200L,0x2000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_sqlquery_in_sql_stmt7589 = new BitSet(new long[]{0x0004000000000000L});
    public static final BitSet FOLLOW_SEMI_in_sql_stmt7591 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INSERT_in_sql_stmt7623 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_sqlinsert_in_sql_stmt7625 = new BitSet(new long[]{0x0004000000000000L});
    public static final BitSet FOLLOW_SEMI_in_sql_stmt7627 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CREATE_in_sql_stmt7659 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_sqlcreate_in_sql_stmt7661 = new BitSet(new long[]{0x0004000000000000L});
    public static final BitSet FOLLOW_SEMI_in_sql_stmt7663 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DROP_in_sql_stmt7695 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x00000000000FB080L});
    public static final BitSet FOLLOW_sqldrop_in_sql_stmt7697 = new BitSet(new long[]{0x0004000000000000L});
    public static final BitSet FOLLOW_SEMI_in_sql_stmt7700 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_UPDATE_in_sql_stmt7732 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_sqlupdate_in_sql_stmt7734 = new BitSet(new long[]{0x0004000000000000L});
    public static final BitSet FOLLOW_SEMI_in_sql_stmt7736 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SQL_DELETE_in_sql_stmt7768 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_sqldelete_in_sql_stmt7770 = new BitSet(new long[]{0x0004000000000000L});
    public static final BitSet FOLLOW_SEMI_in_sql_stmt7772 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ALTER_in_sql_stmt7804 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_sqlalter_in_sql_stmt7806 = new BitSet(new long[]{0x0004000000000000L});
    public static final BitSet FOLLOW_SEMI_in_sql_stmt7808 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MAKECONNECT_in_sql_stmt7834 = new BitSet(new long[]{0x0000000000000000L,0x0100000000000000L});
    public static final BitSet FOLLOW_urlfrag_in_sql_stmt7836 = new BitSet(new long[]{0x0004000000000000L});
    public static final BitSet FOLLOW_SEMI_in_sql_stmt7838 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ASPSELECT_in_sql_stmt7856 = new BitSet(new long[]{0x0001000000000200L,0x2000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_sqlquery_in_sql_stmt7858 = new BitSet(new long[]{0x0004000000000000L});
    public static final BitSet FOLLOW_SEMI_in_sql_stmt7860 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RDFSELECT_in_sql_stmt7892 = new BitSet(new long[]{0x0001000000000200L,0x2000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_sqlquery_in_sql_stmt7894 = new BitSet(new long[]{0x0004000000000000L});
    public static final BitSet FOLLOW_SEMI_in_sql_stmt7896 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_URLLINK_in_urlfrag7951 = new BitSet(new long[]{0x0000000000000002L,0x0200000000000000L});
    public static final BitSet FOLLOW_namefrag_in_urlfrag7955 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_UNAME_in_namefrag7969 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_NAME_in_namefrag7973 = new BitSet(new long[]{0x0000000000000002L,0x0400000000000000L});
    public static final BitSet FOLLOW_pwordfrag_in_namefrag7977 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PWORD_in_pwordfrag7992 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_NAME_in_pwordfrag7996 = new BitSet(new long[]{0x0000000000000002L,0x0800000000000000L});
    public static final BitSet FOLLOW_contypefrag_in_pwordfrag8000 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CONTYPE_in_contypefrag8014 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_NAME_in_contypefrag8018 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sqlqueryfrag_in_sqlquery8038 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000008000002L});
    public static final BitSet FOLLOW_sqlwhereclause_in_sqlquery8050 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_sqlorderbyclause_in_sqlquery8061 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_188_in_sqlqueryfrag8079 = new BitSet(new long[]{0x0001000000000200L,0x2000000000000000L});
    public static final BitSet FOLLOW_STAR_in_sqlqueryfrag8085 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_NAME_in_sqlqueryfrag8090 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_DOT_in_sqlqueryfrag8092 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_NAME_in_sqlqueryfrag8096 = new BitSet(new long[]{0x0000800000000200L,0x5000000000000000L});
    public static final BitSet FOLLOW_CAPSAS_in_sqlqueryfrag8099 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_NAME_in_sqlqueryfrag8102 = new BitSet(new long[]{0x0000800000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_COMMA_in_sqlqueryfrag8108 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_NAME_in_sqlqueryfrag8111 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_DOT_in_sqlqueryfrag8113 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_NAME_in_sqlqueryfrag8117 = new BitSet(new long[]{0x0000800000000200L,0x5000000000000000L});
    public static final BitSet FOLLOW_CAPSAS_in_sqlqueryfrag8120 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_NAME_in_sqlqueryfrag8123 = new BitSet(new long[]{0x0000800000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_AGGREG_in_sqlqueryfrag8131 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_NAME_in_sqlqueryfrag8134 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_DOT_in_sqlqueryfrag8136 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_NAME_in_sqlqueryfrag8140 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_RPAREN_in_sqlqueryfrag8142 = new BitSet(new long[]{0x0000000000000000L,0x5000000000000000L});
    public static final BitSet FOLLOW_CAPSAS_in_sqlqueryfrag8145 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_NAME_in_sqlqueryfrag8147 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_CAPSFROM_in_sqlqueryfrag8153 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_NAME_in_sqlqueryfrag8156 = new BitSet(new long[]{0x0000000000000200L,0x1000000000000000L});
    public static final BitSet FOLLOW_CAPSAS_in_sqlqueryfrag8158 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_NAME_in_sqlqueryfrag8163 = new BitSet(new long[]{0x0000800000000002L,0x8000000000000000L});
    public static final BitSet FOLLOW_COMMA_in_sqlqueryfrag8167 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_NAME_in_sqlqueryfrag8170 = new BitSet(new long[]{0x0000000000000200L,0x1000000000000000L});
    public static final BitSet FOLLOW_CAPSAS_in_sqlqueryfrag8172 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_NAME_in_sqlqueryfrag8177 = new BitSet(new long[]{0x0000800000000002L,0x8000000000000000L});
    public static final BitSet FOLLOW_sqljoinfrag_in_sqlqueryfrag8182 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_JOIN_in_sqljoinfrag8204 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_NAME_in_sqljoinfrag8207 = new BitSet(new long[]{0x0000000000000200L,0x1000000000000000L});
    public static final BitSet FOLLOW_CAPSAS_in_sqljoinfrag8209 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_NAME_in_sqljoinfrag8214 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_ON_in_sqljoinfrag8216 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_NAME_in_sqljoinfrag8218 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_DOT_in_sqljoinfrag8220 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_NAME_in_sqljoinfrag8222 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_ASSIGN_in_sqljoinfrag8224 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_NAME_in_sqljoinfrag8226 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_DOT_in_sqljoinfrag8228 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_NAME_in_sqljoinfrag8230 = new BitSet(new long[]{0x0000000000000002L,0x8000000000000000L});
    public static final BitSet FOLLOW_JOIN_in_sqljoinfrag8233 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_NAME_in_sqljoinfrag8236 = new BitSet(new long[]{0x0000000000000200L,0x1000000000000000L});
    public static final BitSet FOLLOW_CAPSAS_in_sqljoinfrag8238 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_NAME_in_sqljoinfrag8243 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_ON_in_sqljoinfrag8245 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_NAME_in_sqljoinfrag8247 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_DOT_in_sqljoinfrag8249 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_NAME_in_sqljoinfrag8251 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_ASSIGN_in_sqljoinfrag8253 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_NAME_in_sqljoinfrag8255 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_DOT_in_sqljoinfrag8257 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_NAME_in_sqljoinfrag8259 = new BitSet(new long[]{0x0000000000000002L,0x8000000000000000L});
    public static final BitSet FOLLOW_sqlorderbyfrag_in_sqlorderbyclause8288 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ORDER_in_sqlorderbyfrag8314 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_BY_in_sqlorderbyfrag8316 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_NAME_in_sqlorderbyfrag8321 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_DOT_in_sqlorderbyfrag8323 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_NAME_in_sqlorderbyfrag8327 = new BitSet(new long[]{0x0000000000000202L,0x0000000000000000L,0x0000000000000018L});
    public static final BitSet FOLLOW_set_in_sqlorderbyfrag8329 = new BitSet(new long[]{0x0000000000000202L});
    public static final BitSet FOLLOW_INTO_in_sqlinsert8365 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_NAME_in_sqlinsert8369 = new BitSet(new long[]{0x0000080080000200L,0x40FFC4A20FEB1800L,0x00000001C0000000L});
    public static final BitSet FOLLOW_sqlinsertfrag_in_sqlinsert8385 = new BitSet(new long[]{0x0000080080000200L,0x40FFC4A20FEB1800L,0x00000001C0000000L});
    public static final BitSet FOLLOW_sqlexpr_in_sqlinsert8391 = new BitSet(new long[]{0x0000900000000002L});
    public static final BitSet FOLLOW_COMMA_in_sqlinsert8405 = new BitSet(new long[]{0x0000080080000200L,0x40FFC4A20FEB1800L,0x00000001C0000000L});
    public static final BitSet FOLLOW_sqlexpr_in_sqlinsert8409 = new BitSet(new long[]{0x0000900000000002L});
    public static final BitSet FOLLOW_RPAREN_in_sqlinsert8426 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_sqlinsertfrag8451 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_NAME_in_sqlinsertfrag8453 = new BitSet(new long[]{0x0000900000000000L});
    public static final BitSet FOLLOW_COMMA_in_sqlinsertfrag8457 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_NAME_in_sqlinsertfrag8459 = new BitSet(new long[]{0x0000900000000000L});
    public static final BitSet FOLLOW_RPAREN_in_sqlinsertfrag8464 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_VALUES_in_sqlinsertfrag8466 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_LPAREN_in_sqlinsertfrag8468 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sqlalterfrag_in_sqlalter8486 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TABLE_in_sqlalterfrag8497 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_NAME_in_sqlalterfrag8499 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_NAME_in_sqlalterfrag8501 = new BitSet(new long[]{0x0000980000000200L,0x0000000001400000L});
    public static final BitSet FOLLOW_set_in_sqlalterfrag8504 = new BitSet(new long[]{0x0000980000000202L,0x0000000001400000L});
    public static final BitSet FOLLOW_sqlupdatefrag_in_sqlupdate8533 = new BitSet(new long[]{0x0000080080000200L,0x40FFC4A20FEB1800L,0x00000001C0000000L});
    public static final BitSet FOLLOW_sqlexpr_in_sqlupdate8538 = new BitSet(new long[]{0x0000800000000202L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_sqlsetfrag_in_sqlupdate8545 = new BitSet(new long[]{0x0000080080000200L,0x40FFC4A20FEB1800L,0x00000001C0000000L});
    public static final BitSet FOLLOW_sqlexpr_in_sqlupdate8551 = new BitSet(new long[]{0x0000800000000202L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_sqlwhereclause_in_sqlupdate8555 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NAME_in_sqlupdatefrag8567 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_SQL_SET_in_sqlupdatefrag8569 = new BitSet(new long[]{0x0000800000000200L});
    public static final BitSet FOLLOW_sqlsetfrag_in_sqlupdatefrag8571 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COMMA_in_sqlsetfrag8581 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_NAME_in_sqlsetfrag8584 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_ASSIGN_in_sqlsetfrag8586 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sqldeletefrag_in_sqldelete8601 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_sqlwhereclause_in_sqldelete8605 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CAPSFROM_in_sqldeletefrag8616 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_NAME_in_sqldeletefrag8618 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sqldropfrag_in_sqldrop8631 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TABLE_in_sqldropfrag8653 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_NAME_in_sqldropfrag8656 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_DOT_in_sqldropfrag8658 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_NAME_in_sqldropfrag8662 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000A00L});
    public static final BitSet FOLLOW_CASCADE_in_sqldropfrag8665 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_CONSTRAINTS_in_sqldropfrag8667 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_PURGE_in_sqldropfrag8671 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_VIEW_in_sqldropfrag8688 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_NAME_in_sqldropfrag8691 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_DOT_in_sqldropfrag8693 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_NAME_in_sqldropfrag8697 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000A00L});
    public static final BitSet FOLLOW_CASCADE_in_sqldropfrag8700 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_CONSTRAINTS_in_sqldropfrag8702 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_PURGE_in_sqldropfrag8706 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INDEX_in_sqldropfrag8723 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_NAME_in_sqldropfrag8726 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_DOT_in_sqldropfrag8728 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_NAME_in_sqldropfrag8732 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_FORCE_in_sqldropfrag8734 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FUNCTION_in_sqldropfrag8751 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_NAME_in_sqldropfrag8754 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_DOT_in_sqldropfrag8756 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_NAME_in_sqldropfrag8760 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OPERATOR_in_sqldropfrag8776 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_NAME_in_sqldropfrag8779 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_DOT_in_sqldropfrag8781 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_NAME_in_sqldropfrag8785 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_FORCE_in_sqldropfrag8787 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PROCEDURE_in_sqldropfrag8804 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_NAME_in_sqldropfrag8807 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_DOT_in_sqldropfrag8809 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_NAME_in_sqldropfrag8813 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TRIGGER_in_sqldropfrag8829 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_NAME_in_sqldropfrag8832 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_DOT_in_sqldropfrag8834 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_NAME_in_sqldropfrag8838 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TYPE_in_sqldropfrag8854 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_NAME_in_sqldropfrag8857 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_DOT_in_sqldropfrag8859 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_NAME_in_sqldropfrag8863 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000104000L});
    public static final BitSet FOLLOW_set_in_sqldropfrag8865 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sqlcreatefrag_in_sqlcreate8893 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TABLE_in_sqlcreatefrag8915 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_NAME_in_sqlcreatefrag8918 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_DOT_in_sqlcreatefrag8920 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_NAME_in_sqlcreatefrag8924 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_LPAREN_in_sqlcreatefrag8927 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_sqlrelationalproperties_in_sqlcreatefrag8929 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_RPAREN_in_sqlcreatefrag8931 = new BitSet(new long[]{0x0000080000000002L});
    public static final BitSet FOLLOW_sqlcolumndefinition_in_sqlrelationalproperties8958 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NAME_in_sqlcolumndefinition8983 = new BitSet(new long[]{0x0000000000000200L,0x0000000000000000L,0x0000000001E00000L});
    public static final BitSet FOLLOW_set_in_sqlcolumndefinition8985 = new BitSet(new long[]{0x0000800000000002L,0x0000000000000000L,0x0000000006000000L});
    public static final BitSet FOLLOW_SORT_in_sqlcolumndefinition9005 = new BitSet(new long[]{0x0000800000000002L,0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_DEFAULT_in_sqlcolumndefinition9009 = new BitSet(new long[]{0x0000080080000200L,0x40FFC4A20FEB1800L,0x00000001C0000000L});
    public static final BitSet FOLLOW_sqlexpr_in_sqlcolumndefinition9011 = new BitSet(new long[]{0x0000800000000002L});
    public static final BitSet FOLLOW_COMMA_in_sqlcolumndefinition9025 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_NAME_in_sqlcolumndefinition9027 = new BitSet(new long[]{0x0000000000000200L,0x0000000000000000L,0x0000000001E00000L});
    public static final BitSet FOLLOW_set_in_sqlcolumndefinition9029 = new BitSet(new long[]{0x0000800000000002L,0x0000000000000000L,0x0000000006000000L});
    public static final BitSet FOLLOW_SORT_in_sqlcolumndefinition9049 = new BitSet(new long[]{0x0000800000000002L,0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_DEFAULT_in_sqlcolumndefinition9053 = new BitSet(new long[]{0x0000080080000200L,0x40FFC4A20FEB1800L,0x00000001C0000000L});
    public static final BitSet FOLLOW_sqlexpr_in_sqlcolumndefinition9055 = new BitSet(new long[]{0x0000800000000002L});
    public static final BitSet FOLLOW_COMMA_in_sqlcolumndefinition29085 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_NAME_in_sqlcolumndefinition29087 = new BitSet(new long[]{0x0000000000000200L,0x0000000000000000L,0x0000000001E00000L});
    public static final BitSet FOLLOW_set_in_sqlcolumndefinition29089 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000006000000L});
    public static final BitSet FOLLOW_SORT_in_sqlcolumndefinition29109 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_DEFAULT_in_sqlcolumndefinition29113 = new BitSet(new long[]{0x0000080080000200L,0x40FFC4A20FEB1800L,0x00000001C0000000L});
    public static final BitSet FOLLOW_sqlexpr_in_sqlcolumndefinition29115 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sqlwherefrag1_in_sqlwhereclause9144 = new BitSet(new long[]{0x0000080080000200L,0x40FFC4A20FEB1800L,0x00000001C0000000L});
    public static final BitSet FOLLOW_sqlsubquery_in_sqlwhereclause9150 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000030000000L});
    public static final BitSet FOLLOW_sqlexpr_in_sqlwhereclause9154 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000030000000L});
    public static final BitSet FOLLOW_sqlwherefrag2_in_sqlwhereclause9171 = new BitSet(new long[]{0x0000080080000200L,0x40FFC4A20FEB1800L,0x00000001C0000000L});
    public static final BitSet FOLLOW_sqlsubquery_in_sqlwhereclause9177 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000030000000L});
    public static final BitSet FOLLOW_sqlexpr_in_sqlwhereclause9181 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000030000000L});
    public static final BitSet FOLLOW_WHERE_in_sqlwherefrag19210 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_NAME_in_sqlwherefrag19213 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_DOT_in_sqlwherefrag19215 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_NAME_in_sqlwherefrag19219 = new BitSet(new long[]{0x0000400000000000L,0x000000000000003BL});
    public static final BitSet FOLLOW_set_in_sqlwherefrag19221 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_sqlwherefrag29263 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_NAME_in_sqlwherefrag29274 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_DOT_in_sqlwherefrag29276 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_NAME_in_sqlwherefrag29280 = new BitSet(new long[]{0x0000400000000000L,0x000000000000003BL});
    public static final BitSet FOLLOW_set_in_sqlwherefrag29283 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_sqlsubquery9333 = new BitSet(new long[]{0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_SELECT_in_sqlsubquery9335 = new BitSet(new long[]{0x0001000000000200L,0x2000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_subquery_in_sqlsubquery9343 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_sqlquery_in_subquery9359 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_RPAREN_in_subquery9361 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_in_sqlexpr9380 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MODIFY_in_sim_stmt9440 = new BitSet(new long[]{0x0000000000000200L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_modifystmt_in_sim_stmt9442 = new BitSet(new long[]{0x0004000000000000L});
    public static final BitSet FOLLOW_SEMI_in_sim_stmt9444 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CAPSFROM_in_sim_stmt9471 = new BitSet(new long[]{0x0000000000000200L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_retrievestmt_in_sim_stmt9473 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INSERT_in_sim_stmt9500 = new BitSet(new long[]{0x0000000000000200L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_insertstmt_in_sim_stmt9502 = new BitSet(new long[]{0x0004000000000000L});
    public static final BitSet FOLLOW_SEMI_in_sim_stmt9504 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CAPSCLASS_in_sim_stmt9532 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_class_stmt_in_sim_stmt9534 = new BitSet(new long[]{0x0004000000000000L});
    public static final BitSet FOLLOW_SEMI_in_sim_stmt9536 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SUBCLASS_in_sim_stmt9563 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_subclass_stmt_in_sim_stmt9565 = new BitSet(new long[]{0x0004000000000000L});
    public static final BitSet FOLLOW_SEMI_in_sim_stmt9567 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_limitfrag_in_modifystmt9607 = new BitSet(new long[]{0x0000000000000200L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_classfrag_in_modifystmt9610 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_LPAREN_in_modifystmt9612 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_assignment_expression_in_modifystmt9614 = new BitSet(new long[]{0x0000900000000000L});
    public static final BitSet FOLLOW_COMMA_in_modifystmt9617 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_assignment_expression_in_modifystmt9619 = new BitSet(new long[]{0x0000900000000000L});
    public static final BitSet FOLLOW_RPAREN_in_modifystmt9623 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_whereclausefrag_in_modifystmt9625 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classfrag_in_retrievestmt9639 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_RETRIEVE_in_retrievestmt9643 = new BitSet(new long[]{0x0001000000000200L});
    public static final BitSet FOLLOW_selectattributefrag_in_retrievestmt9647 = new BitSet(new long[]{0x0000800000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_COMMA_in_retrievestmt9650 = new BitSet(new long[]{0x0001000000000200L});
    public static final BitSet FOLLOW_selectattributefrag_in_retrievestmt9652 = new BitSet(new long[]{0x0000800000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_fromwherefrag_in_retrievestmt9656 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classfrag_in_insertstmt9670 = new BitSet(new long[]{0x0000080000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_from_insert_in_insertstmt9673 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_LPAREN_in_insertstmt9677 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_assignment_expression_in_insertstmt9679 = new BitSet(new long[]{0x0000900000000000L});
    public static final BitSet FOLLOW_COMMA_in_insertstmt9682 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_assignment_expression_in_insertstmt9684 = new BitSet(new long[]{0x0000900000000000L});
    public static final BitSet FOLLOW_RPAREN_in_insertstmt9688 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NAME_in_class_stmt9704 = new BitSet(new long[]{0x0000080000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_comment_frag_in_class_stmt9709 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_LPAREN_in_class_stmt9713 = new BitSet(new long[]{0x0000100000000200L});
    public static final BitSet FOLLOW_dva_attr_in_class_stmt9725 = new BitSet(new long[]{0x0000100000000200L});
    public static final BitSet FOLLOW_eva_attr_in_class_stmt9729 = new BitSet(new long[]{0x0000100000000200L});
    public static final BitSet FOLLOW_RPAREN_in_class_stmt9733 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NAME_in_subclass_stmt9749 = new BitSet(new long[]{0x0000000000000000L,0x0000000004000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_comment_frag_in_subclass_stmt9754 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_OF_in_subclass_stmt9758 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_NAME_in_subclass_stmt9762 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_LPAREN_in_subclass_stmt9766 = new BitSet(new long[]{0x0000100000000200L});
    public static final BitSet FOLLOW_dva_attr_in_subclass_stmt9778 = new BitSet(new long[]{0x0000100000000200L});
    public static final BitSet FOLLOW_eva_attr_in_subclass_stmt9782 = new BitSet(new long[]{0x0000100000000200L});
    public static final BitSet FOLLOW_RPAREN_in_subclass_stmt9786 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NAME_in_eva_attr9800 = new BitSet(new long[]{0x0000200000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_comment_frag_in_eva_attr9804 = new BitSet(new long[]{0x0000200000000000L});
    public static final BitSet FOLLOW_COLON_in_eva_attr9807 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_NAME_in_eva_attr9811 = new BitSet(new long[]{0x0004800000000000L,0x0000000000000000L,0x000000E800000000L});
    public static final BitSet FOLLOW_COMMA_in_eva_attr9817 = new BitSet(new long[]{0x0000800000000000L,0x0000000000000000L,0x000000E800000000L});
    public static final BitSet FOLLOW_eva_options_in_eva_attr9823 = new BitSet(new long[]{0x0004800000000000L});
    public static final BitSet FOLLOW_COMMA_in_eva_attr9828 = new BitSet(new long[]{0x0000800000000000L,0x0000000000000000L,0x000000E800000000L});
    public static final BitSet FOLLOW_eva_options_in_eva_attr9830 = new BitSet(new long[]{0x0004800000000000L});
    public static final BitSet FOLLOW_SEMI_in_eva_attr9834 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NAME_in_dva_attr9848 = new BitSet(new long[]{0x0000200000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_comment_frag_in_dva_attr9852 = new BitSet(new long[]{0x0000200000000000L});
    public static final BitSet FOLLOW_COLON_in_dva_attr9855 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0xE000000000000000L});
    public static final BitSet FOLLOW_data_type_in_dva_attr9857 = new BitSet(new long[]{0x0004800000000000L,0x0000000000000000L,0x0000001800000000L});
    public static final BitSet FOLLOW_COMMA_in_dva_attr9861 = new BitSet(new long[]{0x0000800000000000L,0x0000000000000000L,0x0000001800000000L});
    public static final BitSet FOLLOW_dva_options_in_dva_attr9867 = new BitSet(new long[]{0x0004800000000000L,0x0000000000000000L,0x0000001800000000L});
    public static final BitSet FOLLOW_SEMI_in_dva_attr9871 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRING_in_comment_frag9885 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_data_type9902 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REQD_in_dva_options9926 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INITVAL_in_dva_options9934 = new BitSet(new long[]{0x0000080080000200L,0x40FFC4A20FEB1800L,0x00000001C0000000L});
    public static final BitSet FOLLOW_expr_in_dva_options9938 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REQD_in_eva_options9956 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SV_in_eva_options9966 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MV_in_eva_options9975 = new BitSet(new long[]{0x0000080000000002L});
    public static final BitSet FOLLOW_LPAREN_in_eva_options9980 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000060000000000L});
    public static final BitSet FOLLOW_eva_multivalued_in_eva_options9984 = new BitSet(new long[]{0x0000900000000000L});
    public static final BitSet FOLLOW_COMMA_in_eva_options9987 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000060000000000L});
    public static final BitSet FOLLOW_eva_multivalued_in_eva_options9989 = new BitSet(new long[]{0x0000900000000000L});
    public static final BitSet FOLLOW_RPAREN_in_eva_options9993 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INVERSE_in_eva_options10004 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_CAPSIS_in_eva_options10006 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_NAME_in_eva_options10010 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DISTINCT_in_eva_multivalued10029 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MAXVAL_in_eva_multivalued10036 = new BitSet(new long[]{0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_INT_in_eva_multivalued10040 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CAPSFROM_in_from_insert10058 = new BitSet(new long[]{0x0000000000000200L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_classfrag_in_from_insert10062 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000008000000L});
    public static final BitSet FOLLOW_whereclausefrag_in_from_insert10064 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WHERE_in_fromwherefrag10085 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_NAME_in_fromwherefrag10092 = new BitSet(new long[]{0x0004000000000000L});
    public static final BitSet FOLLOW_SEMI_in_fromwherefrag10094 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NAME_in_fromwherefrag10109 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_ASSIGN_in_fromwherefrag10111 = new BitSet(new long[]{0x0000080080000200L,0x40FFC4A20FEB1800L,0x00000001C0000000L});
    public static final BitSet FOLLOW_expr_in_fromwherefrag10115 = new BitSet(new long[]{0x0004000000000000L,0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_CAPSAND_in_fromwherefrag10131 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_NAME_in_fromwherefrag10135 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_ASSIGN_in_fromwherefrag10140 = new BitSet(new long[]{0x0000080080000200L,0x40FFC4A20FEB1800L,0x00000001C0000000L});
    public static final BitSet FOLLOW_expr_in_fromwherefrag10144 = new BitSet(new long[]{0x0004000000000000L,0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_SEMI_in_fromwherefrag10152 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_set_in_selectattributefrag10168 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_OF_in_selectattributefrag10182 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_NAME_in_selectattributefrag10186 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_OF_in_selectattributefrag10194 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_NAME_in_selectattributefrag10198 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_LIMIT_in_limitfrag10229 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_ASSIGN_in_limitfrag10231 = new BitSet(new long[]{0x0000080080000200L,0x40FFC4A20FEB1800L,0x00000001C0000000L});
    public static final BitSet FOLLOW_expr_in_limitfrag10235 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_attributefrag_in_assignment_expression10258 = new BitSet(new long[]{0x0000080080000200L,0x40FFC4A20FEB1800L,0x00001001C0000000L});
    public static final BitSet FOLLOW_evafrag_in_assignment_expression10261 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_dvafrag_in_assignment_expression10265 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NAME_in_classfrag10279 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NAME_in_attributefrag10302 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_PRIMP_in_attributefrag10306 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INCLUDE_in_evafrag10323 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_NAME_in_evafrag10340 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_CAPSWITH_in_evafrag10344 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_LPAREN_in_evafrag10346 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_NAME_in_evafrag10358 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_ASSIGN_in_evafrag10362 = new BitSet(new long[]{0x0000080080000200L,0x40FFC4A20FEB1800L,0x00000001C0000000L});
    public static final BitSet FOLLOW_expr_in_evafrag10368 = new BitSet(new long[]{0x0000100000000000L,0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_CAPSAND_in_evafrag10383 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_NAME_in_evafrag10387 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_ASSIGN_in_evafrag10392 = new BitSet(new long[]{0x0000080080000200L,0x40FFC4A20FEB1800L,0x00000001C0000000L});
    public static final BitSet FOLLOW_expr_in_evafrag10396 = new BitSet(new long[]{0x0000100000000000L,0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_RPAREN_in_evafrag10404 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_in_dvafrag10423 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WHERE_in_whereclausefrag10441 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_NAME_in_whereclausefrag10457 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_ASSIGN_in_whereclausefrag10461 = new BitSet(new long[]{0x0000080080000200L,0x40FFC4A20FEB1800L,0x00000001C0000000L});
    public static final BitSet FOLLOW_expr_in_whereclausefrag10467 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_CAPSAND_in_whereclausefrag10482 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_NAME_in_whereclausefrag10486 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_ASSIGN_in_whereclausefrag10491 = new BitSet(new long[]{0x0000080080000200L,0x40FFC4A20FEB1800L,0x00000001C0000000L});
    public static final BitSet FOLLOW_expr_in_whereclausefrag10495 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_expr_in_sim_expr10513 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_test_in_listmaker10544 = new BitSet(new long[]{0x0000800001000002L});
    public static final BitSet FOLLOW_list_for_in_listmaker10556 = new BitSet(new long[]{0x0000800000000002L});
    public static final BitSet FOLLOW_COMMA_in_listmaker10588 = new BitSet(new long[]{0x00000800C0000200L,0x40FFC4A20FEB1800L,0x00000001C0000000L});
    public static final BitSet FOLLOW_test_in_listmaker10592 = new BitSet(new long[]{0x0000800000000002L});
    public static final BitSet FOLLOW_COMMA_in_listmaker10621 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_test_in_testlist_gexp10653 = new BitSet(new long[]{0x0000800001000002L});
    public static final BitSet FOLLOW_COMMA_in_testlist_gexp10677 = new BitSet(new long[]{0x00000800C0000200L,0x40FFC4A20FEB1800L,0x00000001C0000000L});
    public static final BitSet FOLLOW_test_in_testlist_gexp10681 = new BitSet(new long[]{0x0000800000000002L});
    public static final BitSet FOLLOW_COMMA_in_testlist_gexp10689 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_gen_for_in_testlist_gexp10743 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LAMBDA_in_lambdef10807 = new BitSet(new long[]{0x0003280000000200L});
    public static final BitSet FOLLOW_varargslist_in_lambdef10810 = new BitSet(new long[]{0x0000200000000000L});
    public static final BitSet FOLLOW_COLON_in_lambdef10814 = new BitSet(new long[]{0x00000800C0000200L,0x40FFC4A20FEB1800L,0x00000001C0000000L});
    public static final BitSet FOLLOW_test_in_lambdef10816 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_trailer10855 = new BitSet(new long[]{0x00031800C0000200L,0x40FFC4A20FEB1800L,0x00000001C0000000L});
    public static final BitSet FOLLOW_arglist_in_trailer10864 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_RPAREN_in_trailer10906 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LBRACK_in_trailer10914 = new BitSet(new long[]{0x00002800C0000600L,0x40FFC4A20FEB1800L,0x00000001C0000000L});
    public static final BitSet FOLLOW_subscriptlist_in_trailer10916 = new BitSet(new long[]{0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_RBRACK_in_trailer10919 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOT_in_trailer10935 = new BitSet(new long[]{0x000003FFFFFFFA00L});
    public static final BitSet FOLLOW_attr_in_trailer10937 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_subscript_in_subscriptlist10976 = new BitSet(new long[]{0x0000800000000002L});
    public static final BitSet FOLLOW_COMMA_in_subscriptlist10988 = new BitSet(new long[]{0x00002800C0000600L,0x40FFC4A20FEB1800L,0x00000001C0000000L});
    public static final BitSet FOLLOW_subscript_in_subscriptlist10992 = new BitSet(new long[]{0x0000800000000002L});
    public static final BitSet FOLLOW_COMMA_in_subscriptlist10999 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOT_in_subscript11042 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_DOT_in_subscript11044 = new BitSet(new long[]{0x0000000000000400L});
    public static final BitSet FOLLOW_DOT_in_subscript11046 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_test_in_subscript11076 = new BitSet(new long[]{0x0000200000000002L});
    public static final BitSet FOLLOW_COLON_in_subscript11082 = new BitSet(new long[]{0x00002800C0000202L,0x40FFC4A20FEB1800L,0x00000001C0000000L});
    public static final BitSet FOLLOW_test_in_subscript11087 = new BitSet(new long[]{0x0000200000000002L});
    public static final BitSet FOLLOW_sliceop_in_subscript11093 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COLON_in_subscript11124 = new BitSet(new long[]{0x00002800C0000202L,0x40FFC4A20FEB1800L,0x00000001C0000000L});
    public static final BitSet FOLLOW_test_in_subscript11129 = new BitSet(new long[]{0x0000200000000002L});
    public static final BitSet FOLLOW_sliceop_in_subscript11135 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_test_in_subscript11153 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COLON_in_sliceop11190 = new BitSet(new long[]{0x00000800C0000202L,0x40FFC4A20FEB1800L,0x00000001C0000000L});
    public static final BitSet FOLLOW_test_in_sliceop11198 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_in_exprlist11269 = new BitSet(new long[]{0x0000800000000002L});
    public static final BitSet FOLLOW_COMMA_in_exprlist11281 = new BitSet(new long[]{0x0000080080000200L,0x40FFC4A20FEB1800L,0x00000001C0000000L});
    public static final BitSet FOLLOW_expr_in_exprlist11285 = new BitSet(new long[]{0x0000800000000002L});
    public static final BitSet FOLLOW_COMMA_in_exprlist11291 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_in_exprlist11310 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_in_del_list11348 = new BitSet(new long[]{0x0000800000000002L});
    public static final BitSet FOLLOW_COMMA_in_del_list11360 = new BitSet(new long[]{0x0000080080000200L,0x40FFC4A20FEB1800L,0x00000001C0000000L});
    public static final BitSet FOLLOW_expr_in_del_list11364 = new BitSet(new long[]{0x0000800000000002L});
    public static final BitSet FOLLOW_COMMA_in_del_list11370 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_test_in_testlist11423 = new BitSet(new long[]{0x0000800000000002L});
    public static final BitSet FOLLOW_COMMA_in_testlist11435 = new BitSet(new long[]{0x00000800C0000200L,0x40FFC4A20FEB1800L,0x00000001C0000000L});
    public static final BitSet FOLLOW_test_in_testlist11439 = new BitSet(new long[]{0x0000800000000002L});
    public static final BitSet FOLLOW_COMMA_in_testlist11445 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_test_in_testlist11463 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_test_in_dictmaker11492 = new BitSet(new long[]{0x0000200000000000L});
    public static final BitSet FOLLOW_COLON_in_dictmaker11495 = new BitSet(new long[]{0x00000800C0000200L,0x40FFC4A20FEB1800L,0x00000001C0000000L});
    public static final BitSet FOLLOW_test_in_dictmaker11499 = new BitSet(new long[]{0x0000800000000002L});
    public static final BitSet FOLLOW_COMMA_in_dictmaker11518 = new BitSet(new long[]{0x00000800C0000200L,0x40FFC4A20FEB1800L,0x00000001C0000000L});
    public static final BitSet FOLLOW_test_in_dictmaker11522 = new BitSet(new long[]{0x0000200000000000L});
    public static final BitSet FOLLOW_COLON_in_dictmaker11525 = new BitSet(new long[]{0x00000800C0000200L,0x40FFC4A20FEB1800L,0x00000001C0000000L});
    public static final BitSet FOLLOW_test_in_dictmaker11529 = new BitSet(new long[]{0x0000800000000002L});
    public static final BitSet FOLLOW_COMMA_in_dictmaker11543 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_decorators_in_classdef11581 = new BitSet(new long[]{0x0000000000008000L});
    public static final BitSet FOLLOW_CLASS_in_classdef11584 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_NAME_in_classdef11586 = new BitSet(new long[]{0x0000280000000000L});
    public static final BitSet FOLLOW_LPAREN_in_classdef11589 = new BitSet(new long[]{0x00001800C0000200L,0x40FFC4A20FEB1800L,0x00000001C0000000L});
    public static final BitSet FOLLOW_testlist_in_classdef11591 = new BitSet(new long[]{0x0000100000000000L});
    public static final BitSet FOLLOW_RPAREN_in_classdef11595 = new BitSet(new long[]{0x0000200000000000L});
    public static final BitSet FOLLOW_COLON_in_classdef11599 = new BitSet(new long[]{0x00000A3CCAA56280L,0x40FFC4A20FEB1800L,0x00000001C0000000L});
    public static final BitSet FOLLOW_suite_in_classdef11601 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_argument_in_arglist11643 = new BitSet(new long[]{0x0000800000000002L});
    public static final BitSet FOLLOW_COMMA_in_arglist11647 = new BitSet(new long[]{0x00000800C0000200L,0x40FFC4A20FEB1800L,0x00000001C0000000L});
    public static final BitSet FOLLOW_argument_in_arglist11649 = new BitSet(new long[]{0x0000800000000002L});
    public static final BitSet FOLLOW_COMMA_in_arglist11665 = new BitSet(new long[]{0x0003000000000002L});
    public static final BitSet FOLLOW_STAR_in_arglist11683 = new BitSet(new long[]{0x00000800C0000200L,0x40FFC4A20FEB1800L,0x00000001C0000000L});
    public static final BitSet FOLLOW_test_in_arglist11687 = new BitSet(new long[]{0x0000800000000002L});
    public static final BitSet FOLLOW_COMMA_in_arglist11691 = new BitSet(new long[]{0x00000800C0000200L,0x40FFC4A20FEB1800L,0x00000001C0000000L});
    public static final BitSet FOLLOW_argument_in_arglist11693 = new BitSet(new long[]{0x0000800000000002L});
    public static final BitSet FOLLOW_COMMA_in_arglist11699 = new BitSet(new long[]{0x0002000000000000L});
    public static final BitSet FOLLOW_DOUBLESTAR_in_arglist11701 = new BitSet(new long[]{0x00000800C0000200L,0x40FFC4A20FEB1800L,0x00000001C0000000L});
    public static final BitSet FOLLOW_test_in_arglist11705 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOUBLESTAR_in_arglist11726 = new BitSet(new long[]{0x00000800C0000200L,0x40FFC4A20FEB1800L,0x00000001C0000000L});
    public static final BitSet FOLLOW_test_in_arglist11730 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STAR_in_arglist11777 = new BitSet(new long[]{0x00000800C0000200L,0x40FFC4A20FEB1800L,0x00000001C0000000L});
    public static final BitSet FOLLOW_test_in_arglist11781 = new BitSet(new long[]{0x0000800000000002L});
    public static final BitSet FOLLOW_COMMA_in_arglist11785 = new BitSet(new long[]{0x00000800C0000200L,0x40FFC4A20FEB1800L,0x00000001C0000000L});
    public static final BitSet FOLLOW_argument_in_arglist11787 = new BitSet(new long[]{0x0000800000000002L});
    public static final BitSet FOLLOW_COMMA_in_arglist11793 = new BitSet(new long[]{0x0002000000000000L});
    public static final BitSet FOLLOW_DOUBLESTAR_in_arglist11795 = new BitSet(new long[]{0x00000800C0000200L,0x40FFC4A20FEB1800L,0x00000001C0000000L});
    public static final BitSet FOLLOW_test_in_arglist11799 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DOUBLESTAR_in_arglist11818 = new BitSet(new long[]{0x00000800C0000200L,0x40FFC4A20FEB1800L,0x00000001C0000000L});
    public static final BitSet FOLLOW_test_in_arglist11822 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_test_in_argument11861 = new BitSet(new long[]{0x0000C00001000000L});
    public static final BitSet FOLLOW_ASSIGN_in_argument11874 = new BitSet(new long[]{0x00000800C0000200L,0x40FFC4A20FEB1800L,0x00000001C0000000L});
    public static final BitSet FOLLOW_test_in_argument11878 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_gen_for_in_argument11904 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_list_for_in_list_iter11969 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_list_if_in_list_iter11978 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FOR_in_list_for12004 = new BitSet(new long[]{0x0000080080000200L,0x40FFC4A20FEB1800L,0x00000001C0000000L});
    public static final BitSet FOLLOW_exprlist_in_list_for12006 = new BitSet(new long[]{0x0000000010000000L});
    public static final BitSet FOLLOW_IN_in_list_for12009 = new BitSet(new long[]{0x00000800C0000200L,0x40FFC4A20FEB1800L,0x00000001C0000000L});
    public static final BitSet FOLLOW_testlist_in_list_for12011 = new BitSet(new long[]{0x0000000005000002L});
    public static final BitSet FOLLOW_list_iter_in_list_for12015 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IF_in_list_if12045 = new BitSet(new long[]{0x00000800C0000200L,0x40FFC4A20FEB1800L,0x00000001C0000000L});
    public static final BitSet FOLLOW_test_in_list_if12047 = new BitSet(new long[]{0x0000000005000002L});
    public static final BitSet FOLLOW_list_iter_in_list_if12051 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_gen_for_in_gen_iter12082 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_gen_if_in_gen_iter12091 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FOR_in_gen_for12117 = new BitSet(new long[]{0x0000080080000200L,0x40FFC4A20FEB1800L,0x00000001C0000000L});
    public static final BitSet FOLLOW_exprlist_in_gen_for12119 = new BitSet(new long[]{0x0000000010000000L});
    public static final BitSet FOLLOW_IN_in_gen_for12122 = new BitSet(new long[]{0x0000080080000200L,0x40FFC4A20FEB1800L,0x00000001C0000000L});
    public static final BitSet FOLLOW_or_test_in_gen_for12124 = new BitSet(new long[]{0x0000800005000002L});
    public static final BitSet FOLLOW_gen_iter_in_gen_for12127 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IF_in_gen_if12156 = new BitSet(new long[]{0x00000800C0000200L,0x40FFC4A20FEB1800L,0x00000001C0000000L});
    public static final BitSet FOLLOW_test_in_gen_if12158 = new BitSet(new long[]{0x0000800005000002L});
    public static final BitSet FOLLOW_gen_iter_in_gen_if12161 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_YIELD_in_yield_expr12202 = new BitSet(new long[]{0x00000800C0000202L,0x40FFC4A20FEB1800L,0x00000001C0000000L});
    public static final BitSet FOLLOW_testlist_in_yield_expr12204 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SLASH_in_path15147 = new BitSet(new long[]{0x0000000000000200L});
    public static final BitSet FOLLOW_NAME_in_path15149 = new BitSet(new long[]{0x0000000000000002L,0x0000000000002000L});
    public static final BitSet FOLLOW_LPAREN_in_synpred1_Python1257 = new BitSet(new long[]{0x0000080000000200L});
    public static final BitSet FOLLOW_fpdef_in_synpred1_Python1259 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_COMMA_in_synpred1_Python1262 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_testlist_in_synpred2_Python1640 = new BitSet(new long[]{0x7FF8000000000000L});
    public static final BitSet FOLLOW_augassign_in_synpred2_Python1643 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_testlist_in_synpred3_Python1759 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_ASSIGN_in_synpred3_Python1762 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_test_in_synpred4_Python2274 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_COMMA_in_synpred4_Python2277 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_test_in_synpred5_Python2373 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_COMMA_in_synpred5_Python2376 = new BitSet(new long[]{0x00000800C0000200L,0x40FFC4A20FEB1800L,0x00000001C0000000L});
    public static final BitSet FOLLOW_test_in_synpred5_Python2378 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_decorators_in_synpred6_Python3467 = new BitSet(new long[]{0x0000000000020000L});
    public static final BitSet FOLLOW_DEF_in_synpred6_Python3470 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IF_in_synpred7_Python4213 = new BitSet(new long[]{0x0000080080000200L,0x40FFC4A20FEB1800L,0x00000001C0000000L});
    public static final BitSet FOLLOW_or_test_in_synpred7_Python4215 = new BitSet(new long[]{0x0000000200000000L});
    public static final BitSet FOLLOW_ORELSE_in_synpred7_Python4218 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_test_in_synpred13_Python11063 = new BitSet(new long[]{0x0000200000000000L});
    public static final BitSet FOLLOW_COLON_in_synpred13_Python11066 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COLON_in_synpred14_Python11114 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expr_in_synpred15_Python11259 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_COMMA_in_synpred15_Python11262 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_test_in_synpred16_Python11410 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_COMMA_in_synpred16_Python11413 = new BitSet(new long[]{0x0000000000000002L});

}